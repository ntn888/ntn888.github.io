<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>Ajit Ananthadevan</title>
	<subtitle>Interested in everything Embedded.</subtitle>
	<link href="https://ntn888.github.io/feed.xml" rel="self" type="application/atom+xml"/>
    <link href="https://ntn888.github.io/"/>
	<updated>2025-02-19T21:24:00+00:00</updated>
	<id>https://ntn888.github.io/feed.xml</id>
	<entry xml:lang="en">
		<title>Understanding the Clock Subsytem</title>
		<published>2025-02-19T21:24:00+00:00</published>
		<updated>2025-02-19T21:24:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/efr32-clock/" type="text/html"/>
		<id>https://ntn888.github.io/blog/efr32-clock/</id>
		<content type="html">&lt;p&gt;As mentioned, the vendor provides a &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SiliconLabs&#x2F;peripheral_examples&quot;&gt;repo of examples&lt;&#x2F;a&gt; for their various chips. You can study them to use the various peripherals. So we won&#x27;t repeat them here. But we&#x27;ll discuss one crucial component - the clock.&lt;&#x2F;p&gt;
&lt;p&gt;One peculiarity of these Si-Labs chips (at-least the efr32Xg21 family) is they take a fixed 38.4MHz crystal for the external source. This simplifies a lot of the clock setup configs.&lt;&#x2F;p&gt;
&lt;p&gt;Here is a basic diagram with the most used components.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;efr32-clock-tree.jpg&quot; alt=&quot;clock circuit&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Note that the chip boots on &lt;code&gt;FSRCO&lt;&#x2F;code&gt; then switches to &lt;code&gt;HFRCODPLL&lt;&#x2F;code&gt; before executing user firmware.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;setting-up-for-external-crystal&quot;&gt;Setting up for external crystal&lt;a class=&quot;zola-anchor&quot; href=&quot;#setting-up-for-external-crystal&quot; aria-label=&quot;Anchor link for: setting-up-for-external-crystal&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Our &lt;code&gt;ZYZBP008&lt;&#x2F;code&gt; module comes with an external crystal attached (according to the datasheet, it is mandatory to source from the external clock to enable the radio unit). Here is a code excerpt from the example repo on how to configure for the external source:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
#include &amp;quot;em_cmu.h&amp;quot;
#include &amp;quot;em_chip.h&amp;quot;

int main(void)
{
  CHIP_Init();

  &#x2F;&#x2F; Start the HFXO with safe default parameters
  CMU_HFXOInit_TypeDef hfxoInit = CMU_HFXOINIT_DEFAULT;
  CMU_HFXOInit(&amp;amp;hfxoInit);
  CMU_OscillatorEnable(cmuOsc_HFXO, true, true);
  &#x2F;&#x2F;                            enable^     ^wait until clock succeeds before returning

  &#x2F;&#x2F; Switch the SYSCLK to the HFXO.
  CMU_ClockSelectSet(cmuClock_SYSCLK, cmuSelect_HFXO);
  
  while(1);
  
  return 0;
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Lookup for these functions and their possible options in the &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;docs.silabs.com&#x2F;gecko-platform&#x2F;5.1.1&#x2F;platform-emlib-efr32xg21&#x2F;cmu&quot;&gt;clock component documentation&lt;&#x2F;a&gt;. &lt;code&gt;CMU_HFXOINIT_DEFAULT&lt;&#x2F;code&gt; is defined in &lt;code&gt;em_cmu.h&lt;&#x2F;code&gt; and apparently suitable in most usual cases.&lt;&#x2F;p&gt;
&lt;p&gt;To verify that it works, we will test the UART peripheral (which is time sensitive).&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;#include &amp;quot;em_cmu.h&amp;quot;
#include &amp;quot;em_chip.h&amp;quot;
#include &amp;quot;em_gpio.h&amp;quot;
#include &amp;quot;em_usart.h&amp;quot;

#define BSP_BCC_TXPORT  gpioPortA &#x2F;&#x2F; A05 - TX
#define BSP_BCC_TXPIN   5 &#x2F;&#x2F;
#define BSP_BCC_RXPORT  gpioPortA &#x2F;&#x2F; A06 - RX
#define BSP_BCC_RXPIN   6 &#x2F;&#x2F;

int main (void)
{
  CHIP_Init();

  &#x2F;&#x2F; Start the HFXO with safe default parameters
  CMU_HFXOInit_TypeDef hfxoInit = CMU_HFXOINIT_DEFAULT;
  CMU_HFXOInit(&amp;amp;hfxoInit);
  CMU_OscillatorEnable(cmuOsc_HFXO, true, true);

  &#x2F;&#x2F; Switch the SYSCLK to the HFXO.
  CMU_ClockSelectSet(cmuClock_SYSCLK, cmuSelect_HFXO);
  
  CMU_ClockEnable(cmuClock_GPIO, true);
  GPIO_PinModeSet(gpioPortA, 0&#x2F;*pin 4*&#x2F;, gpioModePushPull &#x2F;*push-pull output*&#x2F;, 1&#x2F;*output level*&#x2F;);

  CMU_ClockEnable(cmuClock_USART0, true);
  
  USART_InitAsync_TypeDef initAsync = USART_INITASYNC_DEFAULT;
  initAsync.baudrate = 115200;
  
  GPIO-&amp;gt;USARTROUTE[0].TXROUTE = (BSP_BCC_TXPORT &amp;lt;&amp;lt; _GPIO_USART_TXROUTE_PORT_SHIFT)
            | (BSP_BCC_TXPIN &amp;lt;&amp;lt; _GPIO_USART_TXROUTE_PIN_SHIFT);
  GPIO-&amp;gt;USARTROUTE[0].RXROUTE = (BSP_BCC_RXPORT &amp;lt;&amp;lt; _GPIO_USART_RXROUTE_PORT_SHIFT)
            | (BSP_BCC_RXPIN &amp;lt;&amp;lt; _GPIO_USART_RXROUTE_PIN_SHIFT);
  
  GPIO-&amp;gt;USARTROUTE[0].ROUTEEN = GPIO_USART_ROUTEEN_RXPEN | GPIO_USART_ROUTEEN_TXPEN;
  USART_InitAsync(USART0, &amp;amp;initAsync);

  GPIO_PinModeSet(BSP_BCC_TXPORT, BSP_BCC_TXPIN, gpioModePushPull, 1);
  GPIO_PinModeSet(BSP_BCC_RXPORT, BSP_BCC_RXPIN, gpioModeInput, 0);
  
  &#x2F;&#x2F;USART_Tx (USART_TypeDef * usart, uint8_t data)
  
  char buf[] = &amp;quot;Hello&amp;quot;;
  
  while(1) {
    GPIO_PinOutToggle(gpioPortA, 0&#x2F;*pin 4*&#x2F;);
    
    for (int i = 0; i &amp;lt; 6; i++) {
      USART_Tx (USART0, buf[i]);
      USART_Tx (USART0, &amp;#39;\n&amp;#39;);
    }
    
    for (volatile uint32_t i = 0; i &amp;lt; 100000; i++) { } &#x2F;&#x2F; busy delay
  }
  
  return 0;
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The above code should print &lt;em&gt;Hello&lt;&#x2F;em&gt; via serial repeatedly with the roughly specified pauses.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Setting up the environment</title>
		<published>2025-02-19T02:24:00+00:00</published>
		<updated>2025-02-19T02:24:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/efr32-env/" type="text/html"/>
		<id>https://ntn888.github.io/blog/efr32-env/</id>
		<content type="html">&lt;p&gt;In this article we will see about setting up a development environment for Silicon Labs&#x27; BLE&#x2F;Thread range of MCUs. Specifically for the EFR32MG21A020F768IM32 chip which appears in the inexpensive ZYZBP008 module. I built a breakout board for this module. KiCAD files available &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ntn888&#x2F;efr32_breakout&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Silicon labs&#x27; EFR32 series IOT low power wireless chips are low cost and have good availability. They&#x27;re know for good power efficiency and being of western origin; have great documentation. Another attractive feature (unlike Nordic) is the traditional embedded development SDK.&lt;&#x2F;p&gt;
&lt;p&gt;Like ST they provide an Eclipse based IDE. But this is resource heavy to run on the host, and has been laggy under Linux (for me). As usual in this blog we avoid propriety IDEs and have a generic VIM&#x2F;makefile workflow.&lt;&#x2F;p&gt;
&lt;p&gt;Producing makefiles by hand has another inadvertent advantage: you intricately learn the project dependencies. Which helps you understand the environment better.&lt;&#x2F;p&gt;
&lt;p&gt;First install dependencies:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sudo apt install git git-lfs gcc-arm-none-eabi make bear gcc-multilib libstdc++-arm-none-eabi-newlib openocd gdb-multiarch
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;On arch:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sudo pacman -Sy git git-lfs make bear arm-none-eabi-gcc arm-none-eabi-newlib arm-none-eabi-gdb openocd
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then clone the gecko SDK:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;git clone https:&#x2F;&#x2F;github.com&#x2F;SiliconLabs&#x2F;gecko_sdk.git 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Alternatively download the SDK zip file from their releases. This results in a smaller download.&lt;&#x2F;p&gt;
&lt;p&gt;Now CD into this directory. We now need to create the files for a makefile structured project. The SDK uses a &lt;code&gt;SLC&lt;&#x2F;code&gt; based projects, but we will ignore this. I only succeeded to generate the blinky example using this. We will use makefile instead. This is the resulting file tree:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;gecko-sdk
|
├── platform
│    ├── CMSIS
│    └── emlib
│    │
│    ...
│
└── myapps
     └── blinky
          ├── Makefile
          ├── main.mk
          ├── emlib.mk
          ├── compile_commands.json
          ├── linker_script
          │     └── efr32mg21.ld
          └── src
               └── main.c
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We see the familiar &lt;code&gt;CMSIS&lt;&#x2F;code&gt; directory. &lt;code&gt;emlib&lt;&#x2F;code&gt; is Silicon labs&#x27; equivalent of peripheral HAL. The main make &lt;code&gt;Makefile&lt;&#x2F;code&gt; is a template available &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arturlangner&#x2F;EFM32_makefile_project&#x2F;blob&#x2F;master&#x2F;Makefile&quot;&gt;here&lt;&#x2F;a&gt;. I copied the linker script over from &lt;code&gt;gecko-sdk&#x2F;platform&#x2F;Device&#x2F;SiliconLabs&#x2F;EFR32MG21&#x2F;Source&#x2F;GCC&#x2F;efr32mg21.ld&lt;&#x2F;code&gt;. Note that this file differs between projects, especially if an RTOS is used.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;main.mk&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;CC = arm-none-eabi-gcc
SIZE = arm-none-eabi-size
OBJCOPY = arm-none-eabi-objcopy

COMMON_FLAGS = \
 -mcpu=cortex-m33 \
 -mthumb \
 -mfpu=fpv5-sp-d16 \
 -mfloat-abi=hard \
 -std=c99 \
 -Wall \
 -Wextra \
 -Os \
 -fdata-sections \
 -ffunction-sections \
 -fomit-frame-pointer \
 -imacros sl_gcc_preinclude.h \
 -mcmse \
 -g

DEFINES = -DEFR32MG21A020F768IM32

INCLUDE += -I include -I ..&#x2F;..&#x2F;platform&#x2F;CMSIS&#x2F;Core&#x2F;Include -I .&#x2F; \
 -I..&#x2F;..&#x2F;platform&#x2F;Device&#x2F;SiliconLabs&#x2F;EFR32MG21&#x2F;Include \
 -I..&#x2F;..&#x2F;platform&#x2F;common&#x2F;inc \
 -I ..&#x2F;..&#x2F;platform&#x2F;common&#x2F;toolchain&#x2F;inc \
 -I ..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;inc


CFLAGS := $(COMMON_FLAGS) $(INCLUDE) $(DEFINES)

SUBMAKEFILES := emlib.mk
SOURCES := ..&#x2F;..&#x2F;platform&#x2F;Device&#x2F;SiliconLabs&#x2F;EFR32MG21&#x2F;Source&#x2F;system_efr32mg21.c \
..&#x2F;..&#x2F;platform&#x2F;Device&#x2F;SiliconLabs&#x2F;EFR32MG21&#x2F;Source&#x2F;startup_efr32mg21.c \
src&#x2F;main.c


BUILD_DIR  := build
TARGET_DIR := build_output

#nosys.specs are required for printf
LDFLAGS =  \
 -mcpu=cortex-m33 \
 -mthumb \
 -mfpu=fpv5-sp-d16 \
 -mfloat-abi=hard \
 -T&amp;quot;linker_script&#x2F;efr32mg21.ld&amp;quot; \
 --specs=nano.specs \
 #--specs=nosys.specs \
 -Xlinker -Map=$(TARGET_DIR)&#x2F;main.map \
 -Wl,--gc-sections
 
# Startup file
#LDLIBS := ..&#x2F;..&#x2F;platform&#x2F;Device&#x2F;SiliconLabs&#x2F;EFR32MG21&#x2F;Source&#x2F;GCC&#x2F;startup_efr32mg21.S

###########

GROUP_START =-Wl,--start-group
GROUP_END =-Wl,--end-group

PROJECT_LIBS = \
 -lgcc \
 -lc \
 -lm \
 -lnosys

LIBS += $(GROUP_START) $(PROJECT_LIBS) $(GROUP_END)

TGT_LDFLAGS += $(LIBS)
##########

TARGET := main.elf

size: $(TARGET_DIR)&#x2F;main.elf
	$(SIZE) $(TARGET_DIR)&#x2F;main.elf

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;emlib.mk&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;SOURCES := ..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_cmu_fpga.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_dma.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_csen.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_msc.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_lcd.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_rtcc.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_can.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_wdog.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_system.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_prs.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_se.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_eusart.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_dbg.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_cmu.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_rmu.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_vcmp.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_gpio.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_aes.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_burtc.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_usart.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_qspi.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_lesense.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_adc.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_core.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_letimer.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_idac.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_ldma.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_vdac.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_rtc.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_dac.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_pcnt.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_pdm.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_cryotimer.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_iadc.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_acmp.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_opamp.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_timer.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_i2c.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_gpcrc.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_crypto.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_emu.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_ebi.c \
..&#x2F;..&#x2F;platform&#x2F;emlib&#x2F;src&#x2F;em_leuart.c
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;main.c&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;#include &amp;quot;em_cmu.h&amp;quot;
#include &amp;quot;em_gpio.h&amp;quot;

int main (void)
{
  CMU_ClockEnable(cmuClock_GPIO, true);
  GPIO_PinModeSet(gpioPortA, 0&#x2F;*pin 0*&#x2F;, gpioModePushPull &#x2F;*push-pull output*&#x2F;, 1&#x2F;*output level*&#x2F;);
  
  while(1) {
    GPIO_PinOutToggle(gpioPortA, 0&#x2F;*pin 0*&#x2F;);
    for (volatile uint32_t i = 0; i &amp;lt; 100000; i++) { } &#x2F;&#x2F; busy delay
  }
  
  return 0;
}

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can run &lt;code&gt;make -j&lt;&#x2F;code&gt; to build. To get intellisense in VIM&#x2F;VSCODE we need to produce the &lt;code&gt;compile_commands.json&lt;&#x2F;code&gt; file. To do this make sure to clean the build &lt;code&gt;rm -rf build build_output&lt;&#x2F;code&gt; and run &lt;code&gt; bear -- make -j&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>The Ten Cent Microcontroller Space</title>
		<published>2025-02-07T13:27:00+00:00</published>
		<updated>2025-02-07T13:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/10c-mcu/" type="text/html"/>
		<id>https://ntn888.github.io/blog/10c-mcu/</id>
		<content type="html">&lt;p&gt;Here are the contenders as of this writing.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;ch32v003&lt;&#x2F;li&gt;
&lt;li&gt;py32f002&lt;&#x2F;li&gt;
&lt;li&gt;stm32g030&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Although, ST&#x27;s chip is slightly more costly at 70c. The Puya chip is the cheapest at 12c while the WCH one sells for around 20c. These were the prices off LCSC supplier.&lt;&#x2F;p&gt;
&lt;p&gt;There are cheap dev boards for both the ST and WCH chips at AliExpress for 5usd for a batch of 5!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;weact-st.png&quot; alt=&quot;st dev board&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;weact-wch.png&quot; alt=&quot;wch dev board&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s general wisdom that ST&#x27;s parts are far more energy efficient (if you&#x27;re into battery &#x2F; harvested power projects). While the Puya part claims just a quater of it in it&#x27;s datasheet on low power mode comparison; I doubt it&#x27;ll hold true in practice.&lt;&#x2F;p&gt;
&lt;p&gt;Ofcourse ST has the head up on the dev environment experience.. given it&#x27;s maturity. So the real comparison is between the other two. I found that Puya&#x27;s ecosystem (and the English manuals) was far ahead of WCH. This was surprising to me given how much more popular other chip is.&lt;&#x2F;p&gt;
&lt;p&gt;So given the edge in price and the developer experience, I sought to try out the Puya SDK. That&#x27;s when I found out that there is a major bug in its parts that the reset vector map has to be located in the RAM. No wonder the RAM usage was high (as much as 40%!). Which is self-defeating..&lt;&#x2F;p&gt;
&lt;p&gt;Finally I resorted to the ST chip. Yeah, it&#x27;s relatively more expensive but I emphasise the user experience. Since I&#x27;m not that well versed in the register level programming (been spoilt with HAL usage) it will suit me to move quicker and learn fast.&lt;&#x2F;p&gt;
&lt;p&gt;I think low level (without HALs) programming suits these constrained chips more.&lt;&#x2F;p&gt;
&lt;p&gt;Maybe with experience I can then move to the challenging environments.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Port forwarding on site-to-site VPN using wireguard, AKA Howto bittorrent behind CGNAT for free</title>
		<published>2024-10-19T18:27:00+00:00</published>
		<updated>2024-10-19T18:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/selfhosted-wireguard-tunnel/" type="text/html"/>
		<id>https://ntn888.github.io/blog/selfhosted-wireguard-tunnel/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;Disclaimer: Note that we will be using bitorrent to share Linux ISOs here. The free providers I mention (Oracle being the most generous) will get you into trouble otherwise. The free providers are available as per demand. Alternatively you could head over to lowendbox.com to grab the ultimate $1 pm VPS deals; atleast that&#x27;s what I did to trial out the system without colluding my main VPS with IPTable rules :)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Another disclaimer: messing with IPTables on your VPS could leave it inaccessible via SSH and lock you out. Fortunately they don&#x27;t persist reboots :)&lt;&#x2F;p&gt;
&lt;p&gt;So I recently got a 5g home wireless plan. The speeds are great; but my provider only provides a CGNAT link. This means local port forwarding on the router is out of the question. It wouldn&#x27;t work.&lt;&#x2F;p&gt;
&lt;p&gt;Sure you could use ip6. While it&#x27;s estimated to be used by 40% of users, when it comes to bittorrent it&#x27;s hardly supported.&lt;&#x2F;p&gt;
&lt;p&gt;There are however docker images exactly for this purpose which run a VPN client in conjunction with qBittorrent. But as I&#x27;ve seen all of them only support (a select) commercial VPN providers. They don&#x27;t function in a selfhosted wireguard scenario.&lt;&#x2F;p&gt;
&lt;p&gt;Which brings me to &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.linuxserver.io&#x2F;blog&#x2F;routing-docker-host-and-container-traffic-through-wireguard&quot;&gt;this blog article&lt;&#x2F;a&gt;. Although it&#x27;s a manual setup, they cutoff the instructions with only the client side setup and again assume a VPN provider.&lt;&#x2F;p&gt;
&lt;p&gt;But that&#x27;s no good for us! We selfhost. This will be a full guide on site-to-site tunneling with port forwarding. Sure each setup will be varied; but I believe I have a very vanilla setup with a public facing VPS server and both the server and the client running wireguard in docker.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s a visual view of what we&#x27;ll be setting up:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;wg_tunnel.png&quot; alt=&quot;Tunnel Diagram&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-server&quot;&gt;The server&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-server&quot; aria-label=&quot;Anchor link for: the-server&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In our case we&#x27;ll be running the wireguard server via docker as well. This may take up extra resources than running in bare metal, but I&#x27;m used to docker so much. In the example we will be forwarding port &lt;code&gt;5000&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s the docker-compose.yml file:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;services:
  wireguard:
    image: lscr.io&#x2F;linuxserver&#x2F;wireguard:latest
    container_name: wireguard
    cap_add:
      - NET_ADMIN
      - SYS_MODULE #optional
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc&#x2F;UTC
      - SERVERURL=&amp;lt;server-ip&amp;gt; #optional
      - SERVERPORT=51820 #optional
      - PEERS=1 #optional
      - PEERDNS=auto #optional
      - INTERNAL_SUBNET=10.13.13.0 #optional
      - ALLOWEDIPS=0.0.0.0&#x2F;0 #optional
      - PERSISTENTKEEPALIVE_PEERS= #optional
      - LOG_CONFS=true #optional
    volumes:
      - &#x2F;home&#x2F;&amp;lt;user&amp;gt;&#x2F;.config&#x2F;appdata&#x2F;wg:&#x2F;config #&amp;lt;-- note this location
      - &#x2F;lib&#x2F;modules:&#x2F;lib&#x2F;modules #optional
    ports:
      - 51820:51820&#x2F;udp
      - 5000:5000
      - 5000:5000&#x2F;udp
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    restart: unless-stopped
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You need to put in your &lt;code&gt;&amp;lt;server-ip&amp;gt;&lt;&#x2F;code&gt; accordingly. Bring it up, and it&#x27;ll autogenerate the wg.conf files. The server conf file will be &lt;code&gt;~&#x2F;.config&#x2F;appdata&#x2F;wg&#x2F;wg_confs&#x2F;wg0.conf&lt;&#x2F;code&gt;. We&#x27;ll need to put in some IPTables into it.&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[Interface]
Address = 10.13.13.1
ListenPort = 51820
PrivateKey = 
PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth+ -j MASQUERADE
PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth+ -j MASQUERADE


PreUp = iptables -t nat -A PREROUTING -p tcp --dport 5000 -j DNAT --to-destination 10.13.13.2:5000; iptables -t nat -A PREROUTING -p udp --dport 5000 -j DNAT --to-destination 10.13.13.2:5000
PostDown = iptables -t nat -D PREROUTING -p tcp --dport 5000 -j DNAT --to-destination 10.13.13.2:5000; iptables -t nat -D PREROUTING -p udp --dport 5000 -j DNAT --to-destination 10.13.13.2:5000
PreUp = iptables -t nat -A POSTROUTING -o wg0 -j MASQUERADE
PostDown = iptables -t nat -D POSTROUTING -o wg0 -j MASQUERADE

PreUp = iptables -A FORWARD -i eth0 -o wg0 -p tcp --dport 5000 -j ACCEPT; iptables -A FORWARD -i eth0 -o wg0 -p udp --dport 5000 -j ACCEPT
PreUp = iptables -A FORWARD -i wg0 -o eth0 -p tcp --sport 5000 -j ACCEPT; iptables -A FORWARD -i wg0 -o eth0 -p udp --sport 5000 -j ACCEPT

PreUp = iptables -t nat -A POSTROUTING -o wg0 -p tcp --dport 5000 -j MASQUERADE; iptables -t nat -A POSTROUTING -o wg0 -p udp --dport 5000 -j MASQUERADE

PostDown = iptables -D FORWARD -i eth0 -o wg0 -p tcp --dport 5000 -j ACCEPT; iptables -D FORWARD -i eth0 -o wg0 -p udp --dport 5000 -j ACCEPT
PostDown = iptables -D FORWARD -i wg0 -o eth0 -p tcp --sport 5000 -j ACCEPT; iptables -D FORWARD -i wg0 -o eth0 -p udp --sport 5000 -j ACCEPT

PostDown = iptables -t nat -D POSTROUTING -o wg0 -p tcp --dport 5000 -j MASQUERADE; iptables -t nat -D POSTROUTING -o wg0 -p udp --dport 5000 -j MASQUERADE

[Peer]
# peer1
PublicKey = 
PresharedKey = 
AllowedIPs = 10.13.13.2&#x2F;32
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first two routes, &lt;code&gt;PostUp&lt;&#x2F;code&gt; and &lt;code&gt;PostDown&lt;&#x2F;code&gt; will be added automatically, don&#x27;t change it.&lt;&#x2F;p&gt;
&lt;p&gt;Once that is added, bring up the service one more time. Now run &lt;code&gt;docker compose logs&lt;&#x2F;code&gt; and check there&#x27;s no errors.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;client&quot;&gt;Client&lt;a class=&quot;zola-anchor&quot; href=&quot;#client&quot; aria-label=&quot;Anchor link for: client&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Much of the client side config is based off of the above referenced blog post. But in my experience it needed additional IPTables route lines I will show below.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s the docker compose:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;networks:
  default:
    name: wgnet
    ipam:
      config:
      - subnet: 172.20.0.0&#x2F;24

services:

  wireguard:
    image: lscr.io&#x2F;linuxserver&#x2F;wireguard:latest
    container_name: wireguard
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Australia&#x2F;Sydney
    volumes:
      - &#x2F;mnt&#x2F;main&#x2F;config&#x2F;wg:&#x2F;config      #&amp;lt;--- path for your config
      - &#x2F;lib&#x2F;modules:&#x2F;lib&#x2F;modules
    networks:
      default:
        ipv4_address: 172.20.0.50
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      #- net.ipv6.conf.all.disable_ipv6=0
      #- net.ipv4.ip_forward=1
    restart: unless-stopped

  qbittorrent:
    image: lscr.io&#x2F;linuxserver&#x2F;qbittorrent:latest
    container_name: qbittorrent
    #networks:
      #- wgnet
    networks:
      default:
        ipv4_address: 172.20.0.2
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Australia&#x2F;Sydney
      - WEBUI_PORT=8080
      - TORRENTING_PORT=5000
    volumes:
      - &#x2F;mnt&#x2F;main&#x2F;config&#x2F;qbtorrent:&#x2F;config
      - &#x2F;mnt&#x2F;main&#x2F;media&#x2F;torrents:&#x2F;data&#x2F;torrents:rw
    ports:
      - 8080:8080
    restart: unless-stopped
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now copy &lt;code&gt;~&#x2F;.config&#x2F;appdata&#x2F;wg&#x2F;peer1&#x2F;wg0.conf&lt;&#x2F;code&gt; to the client machine. Make the file as &lt;code&gt;&amp;lt;your_path&amp;gt;&#x2F;wg_confs&#x2F;wg0.conf&lt;&#x2F;code&gt;. Now add these IPTables.&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[Interface]
Address = 10.13.13.2
PrivateKey = 
ListenPort = 51820
DNS = 10.13.13.1

PostUp = iptables -t nat -A POSTROUTING -o wg+ -j MASQUERADE; iptables -t nat -A PREROUTING -p tcp --dport 5000 -j DNAT --to-destination 172.20.0.2:5000; iptables -t nat -A PREROUTING -p udp --dport 5000 -j DNAT --to-destination 172.20.0.2:5000
PreDown = iptables -t nat -D POSTROUTING -o wg+ -j MASQUERADE; iptables -t nat -D PREROUTING -p tcp --dport 5000 -j DNAT --to-destination 172.20.0.2:5000; iptables -t nat -D PREROUTING -p udp --dport 5000 -j DNAT --to-destination 172.20.0.2:5000

PostUp = iptables -A FORWARD -i wg0 -p tcp --dport 5000 -j ACCEPT; iptables -A FORWARD -i wg0 -p udp --dport 5000 -j ACCEPT
PreDown = iptables -D FORWARD -i wg0 -p tcp --dport 5000 -j ACCEPT; iptables -D FORWARD -i wg0 -p udp --dport 5000 -j ACCEPT

[Peer]
PublicKey = 
PresharedKey = 
Endpoint = &amp;lt;server-ip&amp;gt;:51820
AllowedIPs = 0.0.0.0&#x2F;0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now bring up the services on the client. Then run these commands:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;docker exec --privileged qbittorrent ip route del default
docker exec --privileged qbittorrent ip route add default via 172.20.0.50

docker exec --privileged qbittorrent ip route add 192.168.0.0&#x2F;24 via 172.20.0.1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first two will re-route qBT container traffic to wireguard container, and then through the tunnel. The third command will make an exception for the qBT webUI to be accessed locally. Make sure to use the appropriate subnet accordingly. Eg. you may need to change to &lt;code&gt;192.168.1.0&#x2F;24&lt;&#x2F;code&gt; which is another popular Home LAN subnet.&lt;&#x2F;p&gt;
&lt;p&gt;Remember these &lt;code&gt;docker exec&lt;&#x2F;code&gt; commands need to be run each time you restart these containers. Alternatively you may script them for automation.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Perpertually AI auto blogging from RSS news feed: My experience with NO-CODE tools</title>
		<published>2024-10-05T04:27:00+00:00</published>
		<updated>2024-10-05T04:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/ai-nocode-autoblogging/" type="text/html"/>
		<id>https://ntn888.github.io/blog/ai-nocode-autoblogging/</id>
		<content type="html">&lt;p&gt;Enter &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;n8n.io&#x2F;&quot;&gt;n8n&lt;&#x2F;a&gt;, an up-and-comming alternative to Make.com; that helps create a drag-and-drop workflow for building web pipilines without coding. The distinguishing of n8n is that it is self-hostable without any license and is released as opensource.&lt;&#x2F;p&gt;
&lt;p&gt;With the ever shrinking AI costs, and with AI agents being all the rage on Youtube tutorials, I felt an itch to try them out... naturally.&lt;&#x2F;p&gt;
&lt;p&gt;Most of these tutorials featured web workflows with Make.com. I tilted towards the selfhosted n8n... again, naturally. These workflows can be linked to OpenAI API to build agents in the workflow. And the utility of the combination is mindblowing!! Especially ease of use, for the layman!&lt;&#x2F;p&gt;
&lt;p&gt;And so I set out to implement fully automated blogging from news source - without any human intervention. I chose to use the GPT 4o-mini model as it&#x27;s the most cost effective. One article costs under 5c to generate.&lt;&#x2F;p&gt;
&lt;p&gt;In creating the workflow I had one initial major hurdle - enabling the AI agent to access the news source web page. I got onto the n8n community forum, and boy! I recieved a prompt response from the staff with a specific implementation example for my usecase!&lt;&#x2F;p&gt;
&lt;p&gt;The final workflow looks like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;n8n-autoblogging-workflow.png&quot; alt=&quot;n8n Workflow screen&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;{
  &amp;quot;meta&amp;quot;: {
    &amp;quot;instanceId&amp;quot;: &amp;quot;3ff62b04b44d3432aa968154a94112c96c611f8f64771b1525f31b170fd94df5&amp;quot;
  },
  &amp;quot;nodes&amp;quot;: [
    {
      &amp;quot;parameters&amp;quot;: {
        &amp;quot;model&amp;quot;: &amp;quot;gpt-4o-mini&amp;quot;,
        &amp;quot;options&amp;quot;: {
          &amp;quot;maxTokens&amp;quot;: 1000
        }
      },
      &amp;quot;id&amp;quot;: &amp;quot;043f35ee-3851-49ae-94e5-15f4c03d5672&amp;quot;,
      &amp;quot;name&amp;quot;: &amp;quot;OpenAI Chat Model&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;@n8n&#x2F;n8n-nodes-langchain.lmChatOpenAi&amp;quot;,
      &amp;quot;typeVersion&amp;quot;: 1,
      &amp;quot;position&amp;quot;: [
        1100,
        660
      ],
      &amp;quot;credentials&amp;quot;: {
        &amp;quot;openAiApi&amp;quot;: {
          &amp;quot;id&amp;quot;: &amp;quot;HwtpRSRN6gaCQp8N&amp;quot;,
          &amp;quot;name&amp;quot;: &amp;quot;OpenAi account&amp;quot;
        }
      }
    },
    {
      &amp;quot;parameters&amp;quot;: {},
      &amp;quot;id&amp;quot;: &amp;quot;56356c70-c111-4e86-b612-00ed5f6618c7&amp;quot;,
      &amp;quot;name&amp;quot;: &amp;quot;Limit&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;n8n-nodes-base.limit&amp;quot;,
      &amp;quot;typeVersion&amp;quot;: 1,
      &amp;quot;position&amp;quot;: [
        660,
        260
      ]
    },
    {
      &amp;quot;parameters&amp;quot;: {
        &amp;quot;model&amp;quot;: &amp;quot;gpt-4o-mini&amp;quot;,
        &amp;quot;options&amp;quot;: {
          &amp;quot;maxTokens&amp;quot;: 1000
        }
      },
      &amp;quot;id&amp;quot;: &amp;quot;b1f8a92e-ceb5-4742-af7d-ebc4f23e01c7&amp;quot;,
      &amp;quot;name&amp;quot;: &amp;quot;OpenAI Chat Model1&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;@n8n&#x2F;n8n-nodes-langchain.lmChatOpenAi&amp;quot;,
      &amp;quot;typeVersion&amp;quot;: 1,
      &amp;quot;position&amp;quot;: [
        1440,
        680
      ],
      &amp;quot;credentials&amp;quot;: {
        &amp;quot;openAiApi&amp;quot;: {
          &amp;quot;id&amp;quot;: &amp;quot;HwtpRSRN6gaCQp8N&amp;quot;,
          &amp;quot;name&amp;quot;: &amp;quot;OpenAi account&amp;quot;
        }
      }
    },
    {
      &amp;quot;parameters&amp;quot;: {
        &amp;quot;url&amp;quot;: &amp;quot;={{ $json.link }}&amp;quot;,
        &amp;quot;sendQuery&amp;quot;: true,
        &amp;quot;queryParameters&amp;quot;: {
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;headers&amp;quot;,
              &amp;quot;value&amp;quot;: &amp;quot;&amp;#39;User-Agent&amp;#39;: &amp;#39;Mozilla&#x2F;5.0 (X11; Linux x86_64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;108.0.0.0 Safari&#x2F;537.36&amp;#39;&amp;quot;
            },
            {
              &amp;quot;name&amp;quot;: &amp;quot;cookies&amp;quot;,
              &amp;quot;value&amp;quot;: &amp;quot;&amp;#39;CONSENT&amp;#39;: &amp;#39;YES+cb.20220419-08-p0.cs+FX+111&amp;#39;&amp;quot;
            }
          ]
        },
        &amp;quot;options&amp;quot;: {
          &amp;quot;redirect&amp;quot;: {
            &amp;quot;redirect&amp;quot;: {}
          }
        }
      },
      &amp;quot;id&amp;quot;: &amp;quot;c6186aa5-b187-4b29-8188-2106fb7c610e&amp;quot;,
      &amp;quot;name&amp;quot;: &amp;quot;HTTP Request&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;n8n-nodes-base.httpRequest&amp;quot;,
      &amp;quot;typeVersion&amp;quot;: 4.2,
      &amp;quot;position&amp;quot;: [
        880,
        260
      ]
    },
    {
      &amp;quot;parameters&amp;quot;: {
        &amp;quot;operation&amp;quot;: &amp;quot;extractHtmlContent&amp;quot;,
        &amp;quot;extractionValues&amp;quot;: {
          &amp;quot;values&amp;quot;: [
            {
              &amp;quot;key&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;cssSelector&amp;quot;: &amp;quot;#article-body&amp;quot;
            }
          ]
        },
        &amp;quot;options&amp;quot;: {
          &amp;quot;cleanUpText&amp;quot;: true
        }
      },
      &amp;quot;id&amp;quot;: &amp;quot;77f14452-56ff-495d-9de2-c1da18c0fd36&amp;quot;,
      &amp;quot;name&amp;quot;: &amp;quot;HTML&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;n8n-nodes-base.html&amp;quot;,
      &amp;quot;typeVersion&amp;quot;: 1.2,
      &amp;quot;position&amp;quot;: [
        1100,
        260
      ]
    },
    {
      &amp;quot;parameters&amp;quot;: {
        &amp;quot;operation&amp;quot;: &amp;quot;toText&amp;quot;,
        &amp;quot;sourceProperty&amp;quot;: &amp;quot;result&amp;quot;,
        &amp;quot;options&amp;quot;: {
          &amp;quot;fileName&amp;quot;: &amp;quot;={{ $(&amp;#39;Generate URL SLUG&amp;#39;).item.json.text }}.md&amp;quot;
        }
      },
      &amp;quot;id&amp;quot;: &amp;quot;d4266fdc-6a6e-4786-adfc-a3971a8a6ecb&amp;quot;,
      &amp;quot;name&amp;quot;: &amp;quot;Convert to File&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;n8n-nodes-base.convertToFile&amp;quot;,
      &amp;quot;typeVersion&amp;quot;: 1.1,
      &amp;quot;position&amp;quot;: [
        2720,
        460
      ]
    },
    {
      &amp;quot;parameters&amp;quot;: {
        &amp;quot;mode&amp;quot;: &amp;quot;raw&amp;quot;,
        &amp;quot;jsonOutput&amp;quot;: &amp;quot;={\n\n\&amp;quot;meta\&amp;quot;: \&amp;quot;+++\\ntitle = \\\&amp;quot;{{ $(&amp;#39;Gen Title&amp;#39;).item.json.text }}\\\&amp;quot;\\ndate = {{ $now.format(\&amp;quot;yyyy-MM-dd HH:mm:ss\&amp;quot;) }}\\ndraft = false\\n\\n[taxonomies]\\ncategories = [\\\&amp;quot;Tech News\\\&amp;quot;]\\ntags = [\\\&amp;quot;Tech News\\\&amp;quot;]\\n\\n[extra]\\nlang = \\\&amp;quot;en\\\&amp;quot;\\ntoc = true\\ncomment = false\\ncopy = true\\nmath = false\\nmermaid = false\\noutdate_alert = false\\noutdate_alert_days = 120\\ndisplay_tags = true\\ntruncate_summary = false\\n+++\\n\\n\&amp;quot;\n}&amp;quot;,
        &amp;quot;options&amp;quot;: {}
      },
      &amp;quot;id&amp;quot;: &amp;quot;d62388c7-065e-4e20-8c1d-ca3d46cb0f48&amp;quot;,
      &amp;quot;name&amp;quot;: &amp;quot;add_meta&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;n8n-nodes-base.set&amp;quot;,
      &amp;quot;typeVersion&amp;quot;: 3.4,
      &amp;quot;position&amp;quot;: [
        2240,
        460
      ]
    },
    {
      &amp;quot;parameters&amp;quot;: {
        &amp;quot;jsCode&amp;quot;: &amp;quot;let z = $input.first().json.meta;\nz = z.concat($(&amp;#39;Gen Article&amp;#39;).first().json.text);\n\n\n&#x2F;&#x2F;let z = Object.assign($input.first().json.meta, $input.first().json.text);\n&#x2F;&#x2F;let z = $input.first().json.meta\n\n\nreturn {\n  json: {\n    result: z &#x2F;&#x2F; Return the result text\n  }\n}; &amp;quot;
      },
      &amp;quot;id&amp;quot;: &amp;quot;68ccc345-aa70-4565-8709-1133e96ad688&amp;quot;,
      &amp;quot;name&amp;quot;: &amp;quot;Code&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;n8n-nodes-base.code&amp;quot;,
      &amp;quot;typeVersion&amp;quot;: 2,
      &amp;quot;position&amp;quot;: [
        2460,
        460
      ]
    },
    {
      &amp;quot;parameters&amp;quot;: {
        &amp;quot;promptType&amp;quot;: &amp;quot;define&amp;quot;,
        &amp;quot;text&amp;quot;: &amp;quot;=Generate a post on this article: {{ $(&amp;#39;HTML&amp;#39;).item.json.body }}\n\nHere&amp;#39;s the title of the article: {{ $json.text }}\n\nYou&amp;#39;re a blog writer and you are turning the article given above into a unique SEO-optimised blog post. DO NOT include the title as it&amp;#39;s already written so please start with the body to the article.\n\nFormatting: Use H1, H2 and H3 headers. You choose what to bold and bullet point.\n\nParameters: This is a blog post and it should be approx. 500 words long.&amp;quot;
      },
      &amp;quot;id&amp;quot;: &amp;quot;ad801655-230e-489d-91dc-6df5f10e5f9c&amp;quot;,
      &amp;quot;name&amp;quot;: &amp;quot;Gen Article&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;@n8n&#x2F;n8n-nodes-langchain.chainLlm&amp;quot;,
      &amp;quot;typeVersion&amp;quot;: 1.4,
      &amp;quot;position&amp;quot;: [
        1440,
        460
      ]
    },
    {
      &amp;quot;parameters&amp;quot;: {
        &amp;quot;model&amp;quot;: &amp;quot;gpt-4o-mini&amp;quot;,
        &amp;quot;options&amp;quot;: {
          &amp;quot;maxTokens&amp;quot;: 1000
        }
      },
      &amp;quot;id&amp;quot;: &amp;quot;24634b0d-c6e3-4113-9bba-7a386b6b7620&amp;quot;,
      &amp;quot;name&amp;quot;: &amp;quot;OpenAI Chat Model2&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;@n8n&#x2F;n8n-nodes-langchain.lmChatOpenAi&amp;quot;,
      &amp;quot;typeVersion&amp;quot;: 1,
      &amp;quot;position&amp;quot;: [
        1860,
        680
      ],
      &amp;quot;credentials&amp;quot;: {
        &amp;quot;openAiApi&amp;quot;: {
          &amp;quot;id&amp;quot;: &amp;quot;HwtpRSRN6gaCQp8N&amp;quot;,
          &amp;quot;name&amp;quot;: &amp;quot;OpenAi account&amp;quot;
        }
      }
    },
    {
      &amp;quot;parameters&amp;quot;: {
        &amp;quot;resource&amp;quot;: &amp;quot;file&amp;quot;,
        &amp;quot;owner&amp;quot;: {
          &amp;quot;__rl&amp;quot;: true,
          &amp;quot;value&amp;quot;: &amp;quot;ntn888&amp;quot;,
          &amp;quot;mode&amp;quot;: &amp;quot;name&amp;quot;
        },
        &amp;quot;repository&amp;quot;: {
          &amp;quot;__rl&amp;quot;: true,
          &amp;quot;value&amp;quot;: &amp;quot;ecosmartabode_online&amp;quot;,
          &amp;quot;mode&amp;quot;: &amp;quot;list&amp;quot;,
          &amp;quot;cachedResultName&amp;quot;: &amp;quot;ecosmartabode_online&amp;quot;,
          &amp;quot;cachedResultUrl&amp;quot;: &amp;quot;https:&#x2F;&#x2F;github.com&#x2F;ntn888&#x2F;ecosmartabode_online&amp;quot;
        },
        &amp;quot;filePath&amp;quot;: &amp;quot;=content&#x2F;blog&#x2F;{{ $(&amp;#39;Generate URL SLUG&amp;#39;).item.json.text }}.md&amp;quot;,
        &amp;quot;binaryData&amp;quot;: true,
        &amp;quot;commitMessage&amp;quot;: &amp;quot;=create post: {{ $(&amp;#39;Generate URL SLUG&amp;#39;).item.json.text }}&amp;quot;,
        &amp;quot;additionalParameters&amp;quot;: {
          &amp;quot;branch&amp;quot;: {
            &amp;quot;branch&amp;quot;: &amp;quot;main&amp;quot;
          }
        }
      },
      &amp;quot;id&amp;quot;: &amp;quot;c4aed289-807d-4388-8a74-55d5865c6802&amp;quot;,
      &amp;quot;name&amp;quot;: &amp;quot;GitHub&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;n8n-nodes-base.github&amp;quot;,
      &amp;quot;typeVersion&amp;quot;: 1,
      &amp;quot;position&amp;quot;: [
        3000,
        460
      ],
      &amp;quot;credentials&amp;quot;: {
        &amp;quot;githubApi&amp;quot;: {
          &amp;quot;id&amp;quot;: &amp;quot;JfzHKbfULAozXWJ2&amp;quot;,
          &amp;quot;name&amp;quot;: &amp;quot;GitHub account&amp;quot;
        }
      }
    },
    {
      &amp;quot;parameters&amp;quot;: {
        &amp;quot;pollTimes&amp;quot;: {
          &amp;quot;item&amp;quot;: [
            {
              &amp;quot;mode&amp;quot;: &amp;quot;everyHour&amp;quot;
            }
          ]
        },
        &amp;quot;feedUrl&amp;quot;: &amp;quot;https:&#x2F;&#x2F;www.techradar.com&#x2F;rss&amp;quot;
      },
      &amp;quot;id&amp;quot;: &amp;quot;9ea6652a-c6c1-4ff2-b0f2-51b6a7097471&amp;quot;,
      &amp;quot;name&amp;quot;: &amp;quot;RSS Feed Trigger&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;n8n-nodes-base.rssFeedReadTrigger&amp;quot;,
      &amp;quot;typeVersion&amp;quot;: 1,
      &amp;quot;position&amp;quot;: [
        320,
        260
      ]
    },
    {
      &amp;quot;parameters&amp;quot;: {
        &amp;quot;promptType&amp;quot;: &amp;quot;define&amp;quot;,
        &amp;quot;text&amp;quot;: &amp;quot;=You&amp;#39;re a blog writer and your job is to turn the following news article into a unique SEO optimised blog post.\n\nHere&amp;#39;s the title of the article: {{ $(&amp;#39;Limit&amp;#39;).item.json.title }}\nHere&amp;#39;s the article, please read it here: {{ $json.body }}\n\nBased on the information given above, please generate an SEO Optimised Article Title.\n\nParameters:\n\nMax 10 words &amp;amp; 1 sentence flow\n\nDO NOT put quotes around the title&amp;quot;
      },
      &amp;quot;id&amp;quot;: &amp;quot;1ee9c123-9a81-445a-b092-03142589e219&amp;quot;,
      &amp;quot;name&amp;quot;: &amp;quot;Gen Title&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;@n8n&#x2F;n8n-nodes-langchain.chainLlm&amp;quot;,
      &amp;quot;typeVersion&amp;quot;: 1.4,
      &amp;quot;position&amp;quot;: [
        1080,
        460
      ],
      &amp;quot;executeOnce&amp;quot;: false
    },
    {
      &amp;quot;parameters&amp;quot;: {
        &amp;quot;promptType&amp;quot;: &amp;quot;define&amp;quot;,
        &amp;quot;text&amp;quot;: &amp;quot;=Generate a short URL SLUG for the blog post titled:  {{ $(&amp;#39;Gen Title&amp;#39;).item.json.text }}\n\nKeep it short and DO NOT include the domain name. Provide only the relative path. DO NOT include any slashes.&amp;quot;
      },
      &amp;quot;id&amp;quot;: &amp;quot;18da5708-1d1c-4af7-bc62-ff5c284c3dfa&amp;quot;,
      &amp;quot;name&amp;quot;: &amp;quot;Generate URL SLUG&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;@n8n&#x2F;n8n-nodes-langchain.chainLlm&amp;quot;,
      &amp;quot;typeVersion&amp;quot;: 1.4,
      &amp;quot;position&amp;quot;: [
        1840,
        460
      ]
    }
  ],
  &amp;quot;connections&amp;quot;: {
    &amp;quot;OpenAI Chat Model&amp;quot;: {
      &amp;quot;ai_languageModel&amp;quot;: [
        [
          {
            &amp;quot;node&amp;quot;: &amp;quot;Gen Title&amp;quot;,
            &amp;quot;type&amp;quot;: &amp;quot;ai_languageModel&amp;quot;,
            &amp;quot;index&amp;quot;: 0
          }
        ]
      ]
    },
    &amp;quot;Limit&amp;quot;: {
      &amp;quot;main&amp;quot;: [
        [
          {
            &amp;quot;node&amp;quot;: &amp;quot;HTTP Request&amp;quot;,
            &amp;quot;type&amp;quot;: &amp;quot;main&amp;quot;,
            &amp;quot;index&amp;quot;: 0
          }
        ]
      ]
    },
    &amp;quot;OpenAI Chat Model1&amp;quot;: {
      &amp;quot;ai_languageModel&amp;quot;: [
        [
          {
            &amp;quot;node&amp;quot;: &amp;quot;Gen Article&amp;quot;,
            &amp;quot;type&amp;quot;: &amp;quot;ai_languageModel&amp;quot;,
            &amp;quot;index&amp;quot;: 0
          }
        ]
      ]
    },
    &amp;quot;HTTP Request&amp;quot;: {
      &amp;quot;main&amp;quot;: [
        [
          {
            &amp;quot;node&amp;quot;: &amp;quot;HTML&amp;quot;,
            &amp;quot;type&amp;quot;: &amp;quot;main&amp;quot;,
            &amp;quot;index&amp;quot;: 0
          }
        ]
      ]
    },
    &amp;quot;HTML&amp;quot;: {
      &amp;quot;main&amp;quot;: [
        [
          {
            &amp;quot;node&amp;quot;: &amp;quot;Gen Title&amp;quot;,
            &amp;quot;type&amp;quot;: &amp;quot;main&amp;quot;,
            &amp;quot;index&amp;quot;: 0
          }
        ]
      ]
    },
    &amp;quot;Convert to File&amp;quot;: {
      &amp;quot;main&amp;quot;: [
        [
          {
            &amp;quot;node&amp;quot;: &amp;quot;GitHub&amp;quot;,
            &amp;quot;type&amp;quot;: &amp;quot;main&amp;quot;,
            &amp;quot;index&amp;quot;: 0
          }
        ]
      ]
    },
    &amp;quot;add_meta&amp;quot;: {
      &amp;quot;main&amp;quot;: [
        [
          {
            &amp;quot;node&amp;quot;: &amp;quot;Code&amp;quot;,
            &amp;quot;type&amp;quot;: &amp;quot;main&amp;quot;,
            &amp;quot;index&amp;quot;: 0
          }
        ]
      ]
    },
    &amp;quot;Code&amp;quot;: {
      &amp;quot;main&amp;quot;: [
        [
          {
            &amp;quot;node&amp;quot;: &amp;quot;Convert to File&amp;quot;,
            &amp;quot;type&amp;quot;: &amp;quot;main&amp;quot;,
            &amp;quot;index&amp;quot;: 0
          }
        ]
      ]
    },
    &amp;quot;Gen Article&amp;quot;: {
      &amp;quot;main&amp;quot;: [
        [
          {
            &amp;quot;node&amp;quot;: &amp;quot;Generate URL SLUG&amp;quot;,
            &amp;quot;type&amp;quot;: &amp;quot;main&amp;quot;,
            &amp;quot;index&amp;quot;: 0
          }
        ]
      ]
    },
    &amp;quot;OpenAI Chat Model2&amp;quot;: {
      &amp;quot;ai_languageModel&amp;quot;: [
        [
          {
            &amp;quot;node&amp;quot;: &amp;quot;Generate URL SLUG&amp;quot;,
            &amp;quot;type&amp;quot;: &amp;quot;ai_languageModel&amp;quot;,
            &amp;quot;index&amp;quot;: 0
          }
        ]
      ]
    },
    &amp;quot;RSS Feed Trigger&amp;quot;: {
      &amp;quot;main&amp;quot;: [
        [
          {
            &amp;quot;node&amp;quot;: &amp;quot;Limit&amp;quot;,
            &amp;quot;type&amp;quot;: &amp;quot;main&amp;quot;,
            &amp;quot;index&amp;quot;: 0
          }
        ]
      ]
    },
    &amp;quot;Gen Title&amp;quot;: {
      &amp;quot;main&amp;quot;: [
        [
          {
            &amp;quot;node&amp;quot;: &amp;quot;Gen Article&amp;quot;,
            &amp;quot;type&amp;quot;: &amp;quot;main&amp;quot;,
            &amp;quot;index&amp;quot;: 0
          }
        ]
      ]
    },
    &amp;quot;Generate URL SLUG&amp;quot;: {
      &amp;quot;main&amp;quot;: [
        [
          {
            &amp;quot;node&amp;quot;: &amp;quot;add_meta&amp;quot;,
            &amp;quot;type&amp;quot;: &amp;quot;main&amp;quot;,
            &amp;quot;index&amp;quot;: 0
          }
        ]
      ]
    }
  },
  &amp;quot;pinData&amp;quot;: {}
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It&#x27;s pretty much self-explainatory. The first node &lt;em&gt;RSS Feed Trigger&lt;&#x2F;em&gt; runs periodically and pulls in the latest news item. The end node is used to commit our new post content to the Github repo (where the code for my SSG website resides). Be sure to modify this value to target your own repo. You can simply copy and paste this workflow code into your instance of n8n!&lt;&#x2F;p&gt;
&lt;p&gt;Finally you may see the results produced on my test blog here: &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;ecosmartabode.online&#x2F;blog&#x2F;&quot;&gt;https:&#x2F;&#x2F;ecosmartabode.online&#x2F;blog&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: I gathered the AI prompts from this &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=u5TyXyf1jRk&quot;&gt;Youtube tutorial&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Venture into Silicon Labs&#x27; EFR32BG22 Series 2 chips</title>
		<published>2024-08-11T13:24:00+00:00</published>
		<updated>2024-08-11T13:24:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/efr32-intro/" type="text/html"/>
		<id>https://ntn888.github.io/blog/efr32-intro/</id>
		<content type="html">&lt;p&gt;Silicon Labs is an industry leader in low-power wireless chips. But Silicon Labs uses a more traditional&#x2F;familiar tooling and dev environment (as opposed to Nordic&#x27;s Zephyr, which is full on and complex) and can be considered less intimidating to someone approaching from a hardware&#x2F;firmware background.&lt;&#x2F;p&gt;
&lt;p&gt;In this series of articles we shall see setting up a dev environment for a Linux host and working with the basic and crucial peripherals.&lt;&#x2F;p&gt;
&lt;p&gt;Resources provided to get upto speed with the chip family are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.silabs.com&#x2F;support&#x2F;training&#x2F;ssv5-project-config-gecko-platform&quot;&gt;2 hour long webinar introducing the SDK&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SiliconLabs&#x2F;peripheral_examples&quot;&gt;examples on github&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;docs.silabs.com&#x2F;gecko-platform&#x2F;5.0.1&#x2F;platform-overview&#x2F;&quot;&gt;Doxygen dump of defines&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I will be using this cheap &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.silabs.com&#x2F;development-tools&#x2F;wireless&#x2F;bluetooth&#x2F;bg22-explorer-kit?tab=overview&quot;&gt;BG22 Bluetooth SoC Explorer Kit&lt;&#x2F;a&gt; to demo the applications.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Venturing into freeBSD: Homeserver attempt 2</title>
		<published>2024-05-19T07:27:00+00:00</published>
		<updated>2024-05-19T07:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/freebsd-nas/" type="text/html"/>
		<id>https://ntn888.github.io/blog/freebsd-nas/</id>
		<content type="html">&lt;h1 id=&quot;why-freebsd&quot;&gt;Why freeBSD?&lt;a class=&quot;zola-anchor&quot; href=&quot;#why-freebsd&quot; aria-label=&quot;Anchor link for: why-freebsd&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;ZFS. raidz2 recommended but we will use raidz1 in our experiment! &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;arstechnica.com&#x2F;information-technology&#x2F;2020&#x2F;05&#x2F;zfs-101-understanding-zfs-storage-and-performance&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt; for more info.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;hw-setup&quot;&gt;HW setup&lt;a class=&quot;zola-anchor&quot; href=&quot;#hw-setup&quot; aria-label=&quot;Anchor link for: hw-setup&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Here are the main parts for the build:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.aliexpress.com&#x2F;item&#x2F;1005006221619148.html&quot;&gt;N5105 Motherboard&lt;&#x2F;a&gt; (CPU attached)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.aliexpress.com&#x2F;item&#x2F;1005001370106988.html&quot;&gt;Innovision 4bay NAS case&lt;&#x2F;a&gt; comes with individual HDD bay LEDs! Spectacle when they spin up!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The N5105 is an Intel Celeron chip with a TDP of just 10W (in the RPI range..). It also has the QuickSync feature for hardware assisted Plex transcoding. :)&lt;&#x2F;p&gt;
&lt;p&gt;I got an 8GB RAM. The board accepts DDR4 Laptop SO-DIMM sticks. And also got a 120GB NVME SSD for the boot drive.&lt;&#x2F;p&gt;
&lt;p&gt;The case comes with the PSU included. SAS HDDs are cheaper, but I wasn&#x27;t sure if the case support them. So went for 4x SATA 4TB ones.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;sw-setup&quot;&gt;SW setup&lt;a class=&quot;zola-anchor&quot; href=&quot;#sw-setup&quot; aria-label=&quot;Anchor link for: sw-setup&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;As mentioned we&#x27;ll be using freeBSD. This OS does not support docker. But has the concept of &lt;em&gt;Jails&lt;&#x2F;em&gt;. It is the same principle (container isolation) but predates docker.&lt;&#x2F;p&gt;
&lt;p&gt;Using a &lt;em&gt;jail manager&lt;&#x2F;em&gt; provides a simpler interface to managing jails. We&#x27;ll use the &lt;em&gt;bastille&lt;&#x2F;em&gt; jail manager. For the following features:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;auto NAT! (using PF; whole new rabbithole; we&#x27;ll learn just enough to get by..)&lt;&#x2F;li&gt;
&lt;li&gt;easy and intuitive recipes&#x2F;templates to automate spinning up jails (very useful in our complex case!)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We&#x27;ll use no hostname resolution. Instead we&#x27;ll refer each app using it&#x27;s jail&#x27;s hardcoded IPs (that&#x27;s internally NAT&#x27;d)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pre-requisites&quot;&gt;Pre-requisites&lt;a class=&quot;zola-anchor&quot; href=&quot;#pre-requisites&quot; aria-label=&quot;Anchor link for: pre-requisites&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;We add our user to sudo. In this article I&#x27;ll be referring to user &lt;code&gt;ajit&lt;&#x2F;code&gt; as the main user. The username doesn&#x27;t matter, what&#x27;s important is the &lt;code&gt;uid&lt;&#x2F;code&gt;. I&#x27;ve set this to &lt;code&gt;1001&lt;&#x2F;code&gt; to be consistent with the default first user created in freeBSD host. See the templates below for clarity.&lt;&#x2F;p&gt;
&lt;p&gt;Remember to add this user to group &lt;code&gt;wheel&lt;&#x2F;code&gt; when you install the host system or afterwards. Then:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;su -
install pkg sudo
visudo
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Uncomment the %wheel so it looks like this :&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;## Allows people in group wheel to run all commands
%wheel    ALL=(ALL)   ALL
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We have to enable mDNS so that our server can be reachable using it&#x27;s hostname (eg freesrv.local):&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sudo pkg install openmdns

sudo sysrc mdnsd_enable=yes
sudo sysrc mdnsd_flags=igc0 #indicate eth interface
sudo service mdnsd start

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the flag above replace &lt;code&gt;igc0&lt;&#x2F;code&gt; with your ethernet interface.&lt;&#x2F;p&gt;
&lt;p&gt;Enable &lt;code&gt;powerd&lt;&#x2F;code&gt; to make the system run more power efficient. See &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;bastian.rieck.me&#x2F;blog&#x2F;2013&#x2F;freebsd_nas_part_ii&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zfs-setup&quot;&gt;ZFS setup&lt;a class=&quot;zola-anchor&quot; href=&quot;#zfs-setup&quot; aria-label=&quot;Anchor link for: zfs-setup&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;We begin by setting up our ZFS storage. Refer the &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;docs.freebsd.org&#x2F;en&#x2F;books&#x2F;handbook&#x2F;zfs&#x2F;&quot;&gt;handbook&lt;&#x2F;a&gt; and create &lt;code&gt;media&lt;&#x2F;code&gt; and &lt;code&gt;appdata&lt;&#x2F;code&gt; datasets. Now create the following directory structure:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;cd &amp;lt;..&amp;gt;&#x2F;media
mkdir medialibrary
mkdir medialibrary&#x2F;movies
mkdir medialibrary&#x2F;tv
mkdir torrents

cd &amp;lt;..&amp;gt;&#x2F;appdata
mkdir radarr sonarr sabnzbd

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After initialised, I was left with 10TB usable storage!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bastille-jails-setup&quot;&gt;Bastille jails setup&lt;a class=&quot;zola-anchor&quot; href=&quot;#bastille-jails-setup&quot; aria-label=&quot;Anchor link for: bastille-jails-setup&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Run this to automatically setup bastille. It&#x27;ll also setup PF with rule for ssh.&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sudo bastille setup
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you have external ZFS mounts on your system but want bastille to use the UFS filesystem (used by root):&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sudo bastille setup ufs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We also need to allow mDNS (hostname resolution). To do this add the following to the &lt;code&gt;&#x2F;etc&#x2F;pf.conf&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;pass in inet proto udp from any to any port = 5353 keep state
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sudo service pf start
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You will need to re-initiate the ssh connection.&lt;&#x2F;p&gt;
&lt;p&gt;Finally to setup the jails issue the following commands (templates at the end of this article):&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sudo bastille create radarrJail 14.0-RELEASE 10.17.89.50
sudo bastille template radarrJail bastillebsd-templates&#x2F;radarr

sudo bastille create sonarrJail 14.0-RELEASE 10.17.89.51
sudo bastille template radarrJail bastillebsd-templates&#x2F;sonarr

sudo bastille create sabnzbdJail 14.0-RELEASE 10.17.89.52
sudo bastille template radarrJail bastillebsd-templates&#x2F;sabnzbd

sudo bastille create jellyfinJail 14.0-RELEASE 10.17.89.53
sudo bastille template radarrJail bastillebsd-templates&#x2F;jellyfin

sudo bastille create homerJail 14.0-RELEASE 10.17.89.54
sudo bastille template homerJail bastillebsd-templates&#x2F;homer
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If everything goes to plan, you should have an accessible *ARR suite running, with the correct permisions.&lt;&#x2F;p&gt;
&lt;p&gt;Additional NOTE: Set the media files to be globally readable. This is so that we can run &lt;code&gt;jellyfin&lt;&#x2F;code&gt; as any user. Goto Radarr Settings -&amp;gt; Media Management (Show Advanced) -&amp;gt; Permissions -&amp;gt; Set Permissions (checked) -&amp;gt; chmod Folder [755].&lt;&#x2F;p&gt;
&lt;p&gt;TODO: Implement the equivalent of &lt;em&gt;Watchtowerr&lt;&#x2F;em&gt; application that auto updates the container packages on a periodic basis (ie weekly). To achieve this I could incorporate the cron and some shell scripting (but my scripting skills are not upto scratch). A rudimentary approach is outlined in this &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;forums.FreeBSD.org&#x2F;threads&#x2F;is-it-possible-to-pkg-update-upgrade-all-jails-in-one-go.39446&#x2F;post-219246&quot;&gt;forum post&lt;&#x2F;a&gt;. Unfortunately it restarts the containers regardless if there was an update, which I think is wasteful.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;templates-dump&quot;&gt;Templates dump&lt;a class=&quot;zola-anchor&quot; href=&quot;#templates-dump&quot; aria-label=&quot;Anchor link for: templates-dump&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;radarr:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;CMD pw useradd -u 1001 -n ajit -c &amp;quot;Ajit&amp;quot; -s csh -m -w random
CMD mkdir &#x2F;mnt&#x2F;media

CONFIG set allow.mlock=1;
CONFIG set ip6=inherit;
RDR tcp 7878 7878
RESTART

PKG radarr
MOUNT &#x2F;storage&#x2F;appdata&#x2F;radarr &#x2F;usr&#x2F;local&#x2F;radarr nullfs rw 0 0
MOUNT &#x2F;storage&#x2F;media &#x2F;mnt&#x2F;media nullfs rw 0 0
RESTART

SYSRC radarr_enable=&amp;quot;YES&amp;quot;
SERVICE radarr start
CMD chown -R ajit:ajit &#x2F;var&#x2F;run&#x2F;radarr
CMD sed -i -r s&amp;#39;&#x2F;radarr_user:=&amp;quot;radarr&amp;quot;&#x2F;radarr_user:=&amp;quot;ajit&amp;quot;&#x2F;&amp;#39; &#x2F;usr&#x2F;local&#x2F;etc&#x2F;rc.d&#x2F;radarr
CMD sed -i -r s&amp;#39;&#x2F;radarr_group:=&amp;quot;radarr&amp;quot;&#x2F;radarr_group:=&amp;quot;ajit&amp;quot;&#x2F;&amp;#39; &#x2F;usr&#x2F;local&#x2F;etc&#x2F;rc.d&#x2F;radarr
SERVICE radarr restart

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;sonarr:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;CMD pw useradd -u 1001 -n ajit -c &amp;quot;Ajit&amp;quot; -s csh -m -w random
CMD mkdir &#x2F;mnt&#x2F;media

CONFIG set allow.mlock=1;
CONFIG set ip6=inherit;
RDR tcp 8989 8989
RESTART

PKG sonarr
MOUNT &#x2F;storage&#x2F;appdata&#x2F;sonarr &#x2F;usr&#x2F;local&#x2F;sonarr nullfs rw 0 0
MOUNT &#x2F;storage&#x2F;media &#x2F;mnt&#x2F;media nullfs rw 0 0
RESTART

SYSRC sonarr_enable=&amp;quot;YES&amp;quot;
SERVICE sonarr start
CMD chown -R ajit:ajit &#x2F;var&#x2F;run&#x2F;sonarr
CMD sed -i -r s&amp;#39;&#x2F;sonarr_user:=&amp;quot;sonarr&amp;quot;&#x2F;sonarr_user:=&amp;quot;ajit&amp;quot;&#x2F;&amp;#39; &#x2F;usr&#x2F;local&#x2F;etc&#x2F;rc.d&#x2F;sonarr
CMD sed -i -r s&amp;#39;&#x2F;sonarr_group:=&amp;quot;sonarr&amp;quot;&#x2F;sonarr_group:=&amp;quot;ajit&amp;quot;&#x2F;&amp;#39; &#x2F;usr&#x2F;local&#x2F;etc&#x2F;rc.d&#x2F;sonarr
SERVICE sonarr restart

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;sabnzbd:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;CMD pw useradd -u 1001 -n ajit -c &amp;quot;Ajit&amp;quot; -s csh -m -w random
CMD mkdir -p &#x2F;mnt&#x2F;media&#x2F;torrents

CONFIG set ip6=inherit;
RDR tcp 8080 8080
RESTART

PKG sabnzbd
MOUNT &#x2F;storage&#x2F;appdata&#x2F;sabnzbd &#x2F;usr&#x2F;local&#x2F;sabnzbd nullfs rw 0 0
MOUNT &#x2F;storage&#x2F;media&#x2F;torrents &#x2F;mnt&#x2F;media&#x2F;torrents nullfs rw 0 0
RESTART

SYSRC sabnzbd_enable=&amp;quot;YES&amp;quot;
SERVICE sabnzbd start
CMD chown -R ajit:ajit &#x2F;var&#x2F;run&#x2F;sabnzbd
CMD sed -i -r s&amp;#39;&#x2F;sabnzbd_user:=_sabnzbd&#x2F;sabnzbd_user:=&amp;quot;ajit&amp;quot;&#x2F;&amp;#39; &#x2F;usr&#x2F;local&#x2F;etc&#x2F;rc.d&#x2F;sabnzbd
CMD sed -i -r s&amp;#39;&#x2F;sabnzbd_group:=_sabnzbd&#x2F;sabnzbd_group:=&amp;quot;ajit&amp;quot;&#x2F;&amp;#39; &#x2F;usr&#x2F;local&#x2F;etc&#x2F;rc.d&#x2F;sabnzbd
SERVICE sabnzbd restart

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;jellyfin:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;CMD mkdir -p &#x2F;mnt&#x2F;data&#x2F;movies
CMD mkdir -p &#x2F;mnt&#x2F;data&#x2F;tv

CMD mkdir -p &#x2F;usr&#x2F;local&#x2F;etc&#x2F;pkg&#x2F;repos
CMD echo &amp;#39;FreeBSD: { url: &amp;quot;pkg+http:&#x2F;&#x2F;pkg.FreeBSD.org&#x2F;${ABI}&#x2F;latest&amp;quot; }&amp;#39; &amp;gt; &#x2F;usr&#x2F;local&#x2F;etc&#x2F;pkg&#x2F;repos&#x2F;FreeBSD.conf
CONFIG set allow.mlock=1;
CONFIG set ip6=inherit;
RDR tcp 8096 8096
RESTART

PKG jellyfin
MOUNT &#x2F;storage&#x2F;media&#x2F;medialibrary&#x2F;movies &#x2F;mnt&#x2F;data&#x2F;movies nullfs rw 0 0
MOUNT &#x2F;storage&#x2F;media&#x2F;medialibrary&#x2F;tv &#x2F;mnt&#x2F;data&#x2F;tv nullfs rw 0 0
RESTART

SYSRC jellyfin_enable=&amp;quot;YES&amp;quot;
SERVICE jellyfin start

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;homer:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;CONFIG set ip6=inherit;
RDR tcp 80 80
RESTART

PKG apache24

CMD curl -LO https:&#x2F;&#x2F;github.com&#x2F;bastienwirtz&#x2F;homer&#x2F;releases&#x2F;latest&#x2F;download&#x2F;homer.zip
CMD unzip -o homer.zip -d &#x2F;usr&#x2F;local&#x2F;www&#x2F;apache24&#x2F;data
CMD cp &#x2F;usr&#x2F;local&#x2F;www&#x2F;apache24&#x2F;data&#x2F;assets&#x2F;config.yml.dist &#x2F;usr&#x2F;local&#x2F;www&#x2F;apache24&#x2F;data&#x2F;assets&#x2F;config.yml
CP config.yml &#x2F;usr&#x2F;local&#x2F;www&#x2F;apache24&#x2F;data&#x2F;assets&#x2F;

SYSRC apache24_enable=&amp;quot;YES&amp;quot;
SYSRC apache24_flags=&amp;quot;&amp;quot;
CMD httpd -t
SERVICE apache24 start

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;homer &lt;code&gt;config.yml&lt;&#x2F;code&gt;. Place this file beside the homer template.&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;---
# Homepage configuration
# See https:&#x2F;&#x2F;fontawesome.com&#x2F;v5&#x2F;search for icons options

title: &amp;quot;FreeSRV dashboard&amp;quot;
subtitle: &amp;quot;Homer&amp;quot;
logo: &amp;quot;logo.png&amp;quot;
# icon: &amp;quot;fas fa-skull-crossbones&amp;quot; # Optional icon

header: true
footer: &amp;#39;&amp;lt;p&amp;gt;Created with &amp;lt;span class=&amp;quot;has-text-danger&amp;quot;&amp;gt;❤️&amp;lt;&#x2F;span&amp;gt; with &amp;lt;a href=&amp;quot;https:&#x2F;&#x2F;bulma.io&#x2F;&amp;quot;&amp;gt;bulma&amp;lt;&#x2F;a&amp;gt;, &amp;lt;a href=&amp;quot;https:&#x2F;&#x2F;vuejs.org&#x2F;&amp;quot;&amp;gt;vuejs&amp;lt;&#x2F;a&amp;gt; &amp;amp; &amp;lt;a href=&amp;quot;https:&#x2F;&#x2F;fontawesome.com&#x2F;&amp;quot;&amp;gt;font awesome&amp;lt;&#x2F;a&amp;gt; &#x2F;&#x2F; Fork me on &amp;lt;a href=&amp;quot;https:&#x2F;&#x2F;github.com&#x2F;bastienwirtz&#x2F;homer&amp;quot;&amp;gt;&amp;lt;i class=&amp;quot;fab fa-github-alt&amp;quot;&amp;gt;&amp;lt;&#x2F;i&amp;gt;&amp;lt;&#x2F;a&amp;gt;&amp;lt;&#x2F;p&amp;gt;&amp;#39; # set false if you want to hide it.

# Optional theme customization
theme: default
colors:
  light:
    highlight-primary: &amp;quot;#3367d6&amp;quot;
    highlight-secondary: &amp;quot;#4285f4&amp;quot;
    highlight-hover: &amp;quot;#5a95f5&amp;quot;
    background: &amp;quot;#f5f5f5&amp;quot;
    card-background: &amp;quot;#ffffff&amp;quot;
    text: &amp;quot;#363636&amp;quot;
    text-header: &amp;quot;#ffffff&amp;quot;
    text-title: &amp;quot;#303030&amp;quot;
    text-subtitle: &amp;quot;#424242&amp;quot;
    card-shadow: rgba(0, 0, 0, 0.1)
    link: &amp;quot;#3273dc&amp;quot;
    link-hover: &amp;quot;#363636&amp;quot;
  dark:
    highlight-primary: &amp;quot;#3367d6&amp;quot;
    highlight-secondary: &amp;quot;#4285f4&amp;quot;
    highlight-hover: &amp;quot;#5a95f5&amp;quot;
    background: &amp;quot;#131313&amp;quot;
    card-background: &amp;quot;#2b2b2b&amp;quot;
    text: &amp;quot;#eaeaea&amp;quot;
    text-header: &amp;quot;#ffffff&amp;quot;
    text-title: &amp;quot;#fafafa&amp;quot;
    text-subtitle: &amp;quot;#f5f5f5&amp;quot;
    card-shadow: rgba(0, 0, 0, 0.4)
    link: &amp;quot;#3273dc&amp;quot;
    link-hover: &amp;quot;#ffdd57&amp;quot;

# Optional navbar
# links: [] # Allows for navbar (dark mode, layout, and search) without any links
links:
  - name: &amp;quot;Contribute&amp;quot;
    icon: &amp;quot;fab fa-github&amp;quot;
    url: &amp;quot;https:&#x2F;&#x2F;github.com&#x2F;bastienwirtz&#x2F;homer&amp;quot;
    target: &amp;quot;_blank&amp;quot; # optional html a tag target attribute
  - name: &amp;quot;Wiki&amp;quot;
    icon: &amp;quot;fas fa-book&amp;quot;
    url: &amp;quot;https:&#x2F;&#x2F;www.wikipedia.org&#x2F;&amp;quot;
  # this will link to a second homer page that will load config from additional-page.yml and keep default config values as in config.yml file
  # see url field and assets&#x2F;additional-page.yml.dist used in this example:
  #- name: &amp;quot;another page!&amp;quot;
  #  icon: &amp;quot;fas fa-file-alt&amp;quot;
  #  url: &amp;quot;#additional-page&amp;quot; 

# Services
# First level array represent a group.
# Leave only a &amp;quot;items&amp;quot; key if not using group (group name, icon &amp;amp; tagstyle are optional, section separation will not be displayed).
services:
  - name: &amp;quot;Applications&amp;quot;
    icon: &amp;quot;fas fa-cloud&amp;quot;
    items:
      - name: &amp;quot;Jellyfin&amp;quot;
        logo: &amp;quot;assets&#x2F;tools&#x2F;sample2.png&amp;quot;
        subtitle: &amp;quot;Media Player&amp;quot;
        tag: &amp;quot;app&amp;quot;
        url: &amp;quot;http:&#x2F;&#x2F;freesrv.local:8096&#x2F;&amp;quot;
        target: &amp;quot;_blank&amp;quot; # optional html a tag target attribute
      - name: &amp;quot;Radarr&amp;quot;
        logo: &amp;quot;assets&#x2F;tools&#x2F;sample.png&amp;quot;
        subtitle: &amp;quot;Movies&amp;quot;
        tag: &amp;quot;app&amp;quot;
        url: &amp;quot;http:&#x2F;&#x2F;freesrv.local:7878&#x2F;&amp;quot;
        target: &amp;quot;_blank&amp;quot; # optional html a tag target attribute
      - name: &amp;quot;Sonarr&amp;quot;
        logo: &amp;quot;assets&#x2F;tools&#x2F;sample.png&amp;quot;
        subtitle: &amp;quot;TV&amp;quot;
        tag: &amp;quot;app&amp;quot;
        url: &amp;quot;http:&#x2F;&#x2F;freesrv.local:8989&#x2F;&amp;quot;
        target: &amp;quot;_blank&amp;quot; # optional html a tag target attribute
      - name: &amp;quot;Sabnzbd&amp;quot;
        logo: &amp;quot;assets&#x2F;tools&#x2F;sample.png&amp;quot;
        subtitle: &amp;quot;Usenet&amp;quot;
        tag: &amp;quot;app&amp;quot;
        url: &amp;quot;http:&#x2F;&#x2F;freesrv.local:8080&#x2F;&amp;quot;
        target: &amp;quot;_blank&amp;quot; # optional html a tag target attribute
      
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Setup Radarr for x265 encodes</title>
		<published>2024-04-27T17:27:00+00:00</published>
		<updated>2024-04-27T17:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/radarr-profiles/" type="text/html"/>
		<id>https://ntn888.github.io/blog/radarr-profiles/</id>
		<content type="html">&lt;p&gt;This article is a continuation of &lt;a href=&quot;https:&#x2F;&#x2F;ntn888.github.io&#x2F;blog&#x2F;diy-nas&#x2F;&quot;&gt;this post&lt;&#x2F;a&gt; on setting up a DIY NAS. Here we will setup Radarr&#x2F;Sonarr custom formats, such that it prioritises the efficient x265 1080p encodes.&lt;&#x2F;p&gt;
&lt;p&gt;First go to Settings-&amp;gt;Custom Formats and setup two custom formats like so:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;RalphyXD-like.png&quot; alt=&quot;RalphyXD-like&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;Lama-like.png&quot; alt=&quot;Lama-like&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;With the appropriate conditions as shown. The x265 &amp;amp; x264 are preset conditions available in the drop-down!&lt;&#x2F;p&gt;
&lt;p&gt;Next go to Settings-&amp;gt;Profiles. Select &lt;code&gt;HD - 720p&#x2F;1080p&lt;&#x2F;code&gt; And add the custom formats as indicated below, using the &lt;code&gt;score&lt;&#x2F;code&gt; value to prioritise the x265.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;720p_1080p-quality-profile.png&quot; alt=&quot;720p&#x2F;1080p quality profile&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Third and final step, setup Quality Definitions. We are interested in 720p &amp;amp; 1080p profiles here.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;quality-slider.png&quot; alt=&quot;Quality Slider&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Additionally, you may want to import these custom formats from Trash-Guides to weed out the low quality encodes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;trash-guides.info&#x2F;Radarr&#x2F;Radarr-collection-of-custom-formats&#x2F;#lq&quot;&gt;Low Quality Releases = LQ&lt;&#x2F;a&gt; &lt;em&gt;I tend to exclude iVy and Tigole in this list as I like those&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;trash-guides.info&#x2F;Radarr&#x2F;Radarr-collection-of-custom-formats&#x2F;#no-rlsgroup&quot;&gt;No-RlsGroup&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Instruction on using these lists, &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;trash-guides.info&#x2F;Radarr&#x2F;Radarr-import-custom-formats&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Then go ahead Auto &#x27;Search Movie&#x27; feature on top in the movie listing page to test it. Be sure to select the &lt;code&gt;HD - 720p&#x2F;1080p&lt;&#x2F;code&gt; Quality Profile when you add the new movie!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Prepare Fedora Linux for Buildroot compilation</title>
		<published>2024-01-10T07:27:00+00:00</published>
		<updated>2024-01-10T07:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/linux-prepare-fedora/" type="text/html"/>
		<id>https://ntn888.github.io/blog/linux-prepare-fedora/</id>
		<content type="html">&lt;p&gt;Here&#x27;s a quick note on how to prepare Fedora for compiling Buildroot. The following worked for me for compiling a system for the &lt;a href=&quot;https:&#x2F;&#x2F;ntn888.github.io&#x2F;blog&#x2F;linux-milkv-duo&#x2F;&quot;&gt;Milk-V Duo&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;First install Fedora&#x27;s equivalent of &lt;code&gt;build-essential&lt;&#x2F;code&gt; and ncurses (for menuconfig).&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sudo dnf group install &amp;quot;C Development Tools and Libraries&amp;quot; &amp;quot;Development Tools&amp;quot;

sudo dnf install ncurses-devel
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If when running &lt;code&gt;make&lt;&#x2F;code&gt; compilation results in missing Perl modules, install them via:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sudo dnf install &amp;#39;perl(My::Module)&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Fortunately these missing Perl modules error appear at the very beginning of the compilation and causes the least hassle!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>My roundup of some popular Linux Distros</title>
		<published>2024-01-09T12:27:00+00:00</published>
		<updated>2024-01-09T12:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/distro-talk/" type="text/html"/>
		<id>https://ntn888.github.io/blog/distro-talk/</id>
		<content type="html">&lt;h1 id=&quot;ubuntu&quot;&gt;Ubuntu&lt;a class=&quot;zola-anchor&quot; href=&quot;#ubuntu&quot; aria-label=&quot;Anchor link for: ubuntu&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;I&#x27;ve used Ubuntu for the longest time. I&#x27;ve used it during my formidable learning years, from 2008 to 2018. Whew that was a decade, just thinking about it! I mostly like it. One of the key differentiating factors among distros is their package management. And APT feels robust.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;pop-os&quot;&gt;Pop-OS&lt;a class=&quot;zola-anchor&quot; href=&quot;#pop-os&quot; aria-label=&quot;Anchor link for: pop-os&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;My usual go-to distro currently. Been using it since circa 2020. Builds on top of Ubuntu, so you get the niceties of the large user base! Feels like a community distro as opposed to Ubuntu (although I believe it&#x27;s also a corporate driven one). But it doesn&#x27;t force snaps down your throat like Ubuntu.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;debian&quot;&gt;Debian&lt;a class=&quot;zola-anchor&quot; href=&quot;#debian&quot; aria-label=&quot;Anchor link for: debian&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;The Mother of all distros! Haha! In seriousness, it&#x27;s the base distro for Ubuntu. And a well know rock-solid one. I generally use it in all my VPS servers whenever I can.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;centos&quot;&gt;CentOS&lt;a class=&quot;zola-anchor&quot; href=&quot;#centos&quot; aria-label=&quot;Anchor link for: centos&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Used to be the most popular server distro until Redhat pulled the cord!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;fedora&quot;&gt;Fedora&lt;a class=&quot;zola-anchor&quot; href=&quot;#fedora&quot; aria-label=&quot;Anchor link for: fedora&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;This was my first Linux distro that I started with and briefly used back in 2007. I believe it was called Fedora Core back then. Then I briefly used in 2018&#x2F;19. During this time, I saw that the package manager was not as stable as Debian&#x27;s APT, and started giving out errors after a few months of tinkering&#x2F;use.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m currently trialling out daily driving Fedora 39, the latest version as of January 2024. I&#x27;m currently learning Linux Kernel module programming, as this will tell how good a developer&#x27;s distro Fedora is!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;overall-reflection&quot;&gt;Overall Reflection&lt;a class=&quot;zola-anchor&quot; href=&quot;#overall-reflection&quot; aria-label=&quot;Anchor link for: overall-reflection&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;I&#x27;ve completely stopped using Windows as my OS back in 2010 and the experience has been a liberating one. One of my favourite aspects about Linux is its hardware compatibility. It sails through on older hardware. Which makes it possible to have setups like &lt;a href=&quot;https:&#x2F;&#x2F;ntn888.github.io&#x2F;blog&#x2F;dev-station&#x2F;&quot;&gt;these&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Although linux powers majority of the servers; it&#x27;s heavily lacking in the desktop market-share. Owing to only about 2% usage! Enthusiasts speak about the &lt;em&gt;Year of the Linux desktop&lt;&#x2F;em&gt;. But as much as I wish it were, I don&#x27;t see it happening anytime soon.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Following the Linux Kernel Module Programming Guide with RISC-V Milkv Duo embedded board</title>
		<published>2024-01-06T13:27:00+00:00</published>
		<updated>2024-01-06T13:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/linux-lkmpg-milkv/" type="text/html"/>
		<id>https://ntn888.github.io/blog/linux-lkmpg-milkv/</id>
		<content type="html">&lt;p&gt;We saw in &lt;a href=&quot;https:&#x2F;&#x2F;ntn888.github.io&#x2F;blog&#x2F;linux-embedded-howto&#x2F;&quot;&gt;this post&lt;&#x2F;a&gt; that &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;sysprog21.github.io&#x2F;lkmpg&#x2F;&quot;&gt;The Linux Kernel Module Programming Guide&lt;&#x2F;a&gt; is a great resource when learning Linux Device Drivers. It however takes a self-compiled route with the modules developed and run directly on the host system. For GPIO examples the Raspberry PI is used.&lt;&#x2F;p&gt;
&lt;p&gt;In this article we shall see how to adopt the guide to learn with the &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;milkv.io&#x2F;duo&quot;&gt;Milk-V Duo&lt;&#x2F;a&gt; board. Here we assume you use the vanilla Buildroot &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;milkv-duo&#x2F;milkv-duo-buildroot&quot;&gt;repo&lt;&#x2F;a&gt; for building the system image.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;adapting-the-makefile&quot;&gt;Adapting the Makefile&lt;a class=&quot;zola-anchor&quot; href=&quot;#adapting-the-makefile&quot; aria-label=&quot;Anchor link for: adapting-the-makefile&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;As mentioned above, the modules are selfcompiled to run locally on the host system. To make them run on our dev board we need to modify the Makefile. The C source file is left untouched.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;Makefile&quot; class=&quot;language-Makefile z-code&quot;&gt;&lt;code class=&quot;language-Makefile&quot; data-lang=&quot;Makefile&quot;&gt;&lt;span class=&quot;z-source z-makefile&quot;&gt;&lt;span class=&quot;z-variable z-other z-makefile&quot;&gt;CC&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-makefile&quot;&gt;=&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-source z-makefile&quot;&gt;&lt;span class=&quot;z-meta z-string z-makefile&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-makefile&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-makefile&quot;&gt;&lt;span class=&quot;z-keyword z-other z-block z-begin z-makefile&quot;&gt;$(&lt;&#x2F;span&gt;CROSS_COMPILE&lt;span class=&quot;z-keyword z-other z-block z-end z-makefile&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;gcc&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;z-variable z-other z-makefile&quot;&gt;obj-m&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-makefile&quot;&gt;:=&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-source z-makefile&quot;&gt;&lt;span class=&quot;z-meta z-string z-makefile&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-makefile&quot;&gt;hello.o&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-variable z-other z-makefile&quot;&gt;KDIR&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-makefile&quot;&gt;:=&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-source z-makefile&quot;&gt;&lt;span class=&quot;z-meta z-string z-makefile&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-makefile&quot;&gt;&#x2F;home&#x2F;&amp;lt;user&amp;gt;&#x2F;milkv&#x2F;milkv-duo-buildroot&#x2F;output&#x2F;build&#x2F;linux-duo-linux-5.10.4&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;z-meta z-function z-makefile&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-makefile&quot;&gt;all&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-makefile&quot;&gt;:&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-function z-arguments z-makefile&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-body z-makefile&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-body z-makefile&quot;&gt;	&lt;span class=&quot;z-source z-shell&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-makefile&quot;&gt;&lt;span class=&quot;z-keyword z-other z-block z-begin z-makefile&quot;&gt;$(&lt;&#x2F;span&gt;MAKE&lt;span class=&quot;z-keyword z-other z-block z-end z-makefile&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;-C&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; &lt;span class=&quot;z-variable z-parameter z-makefile&quot;&gt;&lt;span class=&quot;z-keyword z-other z-block z-begin z-makefile&quot;&gt;$(&lt;&#x2F;span&gt;KDIR&lt;span class=&quot;z-keyword z-other z-block z-end z-makefile&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; M=&lt;span class=&quot;z-variable z-parameter z-makefile&quot;&gt;&lt;span class=&quot;z-keyword z-other z-block z-begin z-makefile&quot;&gt;$(&lt;&#x2F;span&gt;PWD&lt;span class=&quot;z-keyword z-other z-block z-end z-makefile&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-makefile&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-makefile&quot;&gt;clean&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-makefile&quot;&gt;:&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-function z-arguments z-makefile&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-body z-makefile&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-body z-makefile&quot;&gt;	&lt;span class=&quot;z-source z-shell&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-makefile&quot;&gt;&lt;span class=&quot;z-keyword z-other z-block z-begin z-makefile&quot;&gt;$(&lt;&#x2F;span&gt;MAKE&lt;span class=&quot;z-keyword z-other z-block z-end z-makefile&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;-C&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; &lt;span class=&quot;z-variable z-parameter z-makefile&quot;&gt;&lt;span class=&quot;z-keyword z-other z-block z-begin z-makefile&quot;&gt;$(&lt;&#x2F;span&gt;KDIR&lt;span class=&quot;z-keyword z-other z-block z-end z-makefile&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; M=&lt;span class=&quot;z-constant z-character z-escape z-makefile&quot;&gt;$$&lt;&#x2F;span&gt;PWD clean&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Be sure to adapt the &lt;code&gt;KDIR&lt;&#x2F;code&gt; path to suite your system&#x27;s location. Also make note to change &lt;code&gt;hello.o&lt;&#x2F;code&gt; to whatever you named your C source file.&lt;&#x2F;p&gt;
&lt;p&gt;Remember to execute the following environment variables before running make:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;export PATH=&amp;quot;$PATH:&#x2F;home&#x2F;ajit&#x2F;work&#x2F;ldd&#x2F;milkv&#x2F;milkv-duo-buildroot&#x2F;output&#x2F;host&#x2F;bin&amp;quot;

export ARCH=riscv
export CROSS_COMPILE=riscv64-linux-
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;changing-the-gpio-directives&quot;&gt;Changing the GPIO directives&lt;a class=&quot;zola-anchor&quot; href=&quot;#changing-the-gpio-directives&quot; aria-label=&quot;Anchor link for: changing-the-gpio-directives&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In the chapter &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;sysprog21.github.io&#x2F;lkmpg&#x2F;#detecting-button-presses&quot;&gt;#detecting-button-presses&lt;&#x2F;a&gt;, they use the Raspberry PI which is based on Cortex-A architecture. Our RISC-V board uses different GPIO naming scheme, and we need to adapt accordingly...&lt;&#x2F;p&gt;
&lt;p&gt;TODO&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Learning Embedded Linux Driver Development</title>
		<published>2023-12-31T03:27:00+00:00</published>
		<updated>2023-12-31T03:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/linux-embedded-howto/" type="text/html"/>
		<id>https://ntn888.github.io/blog/linux-embedded-howto/</id>
		<content type="html">&lt;p&gt;There are two kinds of developers that become embedded&#x2F;driver developers. One set is from a CS &#x2F; Application developer background that drop down to low-level development. The rest is EE background that turn into developers. Of course both courses have their pros and cons. But I&#x27;d argue comming from a Hardware background has it&#x27;s perks..&lt;&#x2F;p&gt;
&lt;p&gt;Regardless, here&#x27;s a guide to jumping into Linux driver development from the HW background perspective. Its a collection of resources to guide your learning.&lt;&#x2F;p&gt;
&lt;p&gt;The first step is to tackle general Linux user administration.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;linuxcommand.org&#x2F;tlcl.php&quot;&gt;The Linux Command Line&lt;&#x2F;a&gt; is freely available to download. I think getting familiar with the command line is the first major hurdle in learning Linux. This book helps with that and some BASH scripting too. (I&#x27;ve been putting off learning scripting for the longest time!)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;How-Linux-Works-Brian-Ward&#x2F;dp&#x2F;1718500408&quot;&gt;How Linux Works&lt;&#x2F;a&gt; is an amazing succinct guide in general Linux admin&#x2F;usage.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Mastering-Embedded-Linux-Programming-potential&#x2F;dp&#x2F;1789530385&quot;&gt;Mastering Embedded Linux Programming&lt;&#x2F;a&gt; In contrast to what the title implies (misleading) this book deals with setting up a linux system for an embedded target and discusses the workflow for cross-compilation. And a great one at that! Though this book discusses Yocto I recommend Buildroot for beginners.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.linuxfromscratch.org&#x2F;&quot;&gt;Linux From Scratch (LFS)&lt;&#x2F;a&gt; is a free guide on how to compile and build a working linux system step-by-step from scratch! Grab that old laptop&#x2F;machine and follow along! This step is optional but entirely worth it!&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Once you have this under your belt you can start development activities.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Linux-Programming-Interface-System-Handbook&#x2F;dp&#x2F;1593272200&quot;&gt;The Linux Programming Interface&lt;&#x2F;a&gt; Learn POSIX application API here. It&#x27;s a large book; skim on what&#x27;s needed. I recommend learning atleast &lt;em&gt;pthreads&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Linux-Device-Driver-Development-development&#x2F;dp&#x2F;1803240067&quot;&gt;Linux Device Driver Development&lt;&#x2F;a&gt; The crux of our study. Pair it up with &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;sysprog21.github.io&#x2F;lkmpg&#x2F;&quot;&gt;The Linux Kernel Module Programming Guide&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;At this stage you need a good relevant development board to follow along. I recommend the &lt;a href=&quot;https:&#x2F;&#x2F;ntn888.github.io&#x2F;blog&#x2F;linux-milkv-duo&#x2F;&quot;&gt;Milk-V Duo&lt;&#x2F;a&gt; for its breadboard friendly. It supports Buildroot and the documentation is highly embedded Linux focussed.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Milk-V Duo: $5 Embedded Linux board</title>
		<published>2023-12-27T15:27:00+00:00</published>
		<updated>2023-12-27T15:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/linux-milkv-duo/" type="text/html"/>
		<id>https://ntn888.github.io/blog/linux-milkv-duo/</id>
		<content type="html">&lt;p&gt;In my journey of learning Linux Device Drivers, I have since migrated to a new target. I&#x27;ve switched to the &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;milkv.io&#x2F;duo&quot;&gt;Milk-V Duo&lt;&#x2F;a&gt; board. I find that this board has a bigger &#x27;embedded&#x27; focused community than the OrangePI Zero3. The &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;community.milkv.io&#x2F;&quot;&gt;forums&lt;&#x2F;a&gt; are fairly active and people occasionally showcase their driver development projects; which I think are a great learning resource too!&lt;&#x2F;p&gt;
&lt;p&gt;Additionally the board is far cheaper, costing just 5usd, and is breadboard friendly.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;One caveat with buildroot (we need to use a custom &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;milkv-duo&#x2F;milkv-duo-buildroot&quot;&gt;repository&lt;&#x2F;a&gt;) and this board is that the device tree dtb is adopted by the kernel from the uboot sources! ie. There is no separate dts file in the kernel sources. So you must edit the file &lt;code&gt;milkv-duo-buildroot&#x2F;output&#x2F;build&#x2F;uboot-v2021.10_64mb&#x2F;arch&#x2F;riscv&#x2F;dts&#x2F;cv1800b_milkv_duo_sd.dts&lt;&#x2F;code&gt; (after an initial build) then run &lt;code&gt;make uboot-rebuild&lt;&#x2F;code&gt; and &lt;code&gt;make&lt;&#x2F;code&gt; to include custom device tree modifications. Don&#x27;t forget to keep a backup of this file somewhere outside buildroot directory as you will lose this file upon &lt;code&gt;make clean&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Booting a custom device tree file source in buildroot</title>
		<published>2023-12-21T15:27:00+00:00</published>
		<updated>2023-12-21T15:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/buildroot-devicetree/" type="text/html"/>
		<id>https://ntn888.github.io/blog/buildroot-devicetree/</id>
		<content type="html">&lt;p&gt;In the &lt;a href=&quot;https:&#x2F;&#x2F;ntn888.github.io&#x2F;blog&#x2F;buildroot-setup&#x2F;&quot;&gt;previous article&lt;&#x2F;a&gt; we saw how to setup the default system image for Orange PI Zero 3 using buildroot. We got the basic system up and running. Now, when we do Device Driver Development, we will have to modify the device tree source.&lt;&#x2F;p&gt;
&lt;p&gt;The default dt source for our board is in the kernel sources in:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;arch&#x2F;arm64&#x2F;boot&#x2F;dts&#x2F;allwinner&#x2F;sun50i-h616-orangepi-zero3.dts
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this exercise we will modify the model name to something different, &lt;code&gt;OrangePi Zero3-custom&lt;&#x2F;code&gt;. To do this we will create a new dts file in the buildroot directory, include in it the original dts file (noted above), and override the &lt;code&gt;model&lt;&#x2F;code&gt; property.&lt;&#x2F;p&gt;
&lt;p&gt;Now create the following file &lt;code&gt;~&#x2F;buildroot&#x2F;sun50i-h616-orangepi-zero3-custom.dts&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&#x2F;&#x2F; SPDX-License-Identifier: GPL-2.0
#include &amp;quot;&#x2F;home&#x2F;ajit&#x2F;opi&#x2F;buildroot&#x2F;output&#x2F;build&#x2F;linux-custom&#x2F;arch&#x2F;arm64&#x2F;boot&#x2F;dts&#x2F;allwinner&#x2F;sun50i-h616-orangepi-zero3.dts&amp;quot;
&#x2F; {
        model = &amp;quot;OrangePi Zero3-custom&amp;quot;;
        compatible = &amp;quot;xunlong,orangepi-zero3&amp;quot;, &amp;quot;allwinner,sun50i-h616&amp;quot;;

};

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In menuconfig set the value of &lt;code&gt;BR2_LINUX_KERNEL_CUSTOM_DTS_PATH&lt;&#x2F;code&gt; to &lt;code&gt;~&#x2F;buildroot&#x2F;sun50i-h616-orangepi-zero3-custom.dts&lt;&#x2F;code&gt; our custom dts file location. And unset the &lt;code&gt;BR2_LINUX_KERNEL_INTREE_DTS_NAME&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Once that&#x27;s done you&#x27;re ready to do the build. Here we will be doing an incremental build (since we have already built the system earlier).&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;make linux-rebuild
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will (in our case) only compile the dtb file and re-install some modules. To do the sdcard image generation run:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;make
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;There is a caveat I noticed with uboot. You now need to set &lt;code&gt;CONFIG_DEFAULT_FDT_FILE&lt;&#x2F;code&gt; in uboot menuconfig to use this custom dtb. But unfortunately our board include files do not honour this setting, and in boot time, uboot proceeds to fetch the default dtb! The work-around is to set the right dtb file on uboot prompt explained below.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Flash the sdcard and boot.&lt;&#x2F;p&gt;
&lt;p&gt;At uboot prompt provide these commands to boot Linux using our custom dtb.&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;setenv fdtfile sun50i-h616-orangepi-zero3-custom.dtb
boot
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is the workaround that worked for me and in the boot log you can see the custom model that we set: &lt;code&gt;OrangePi Zero3-custom&lt;&#x2F;code&gt;. You may also cat the following file:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;cat &#x2F;sys&#x2F;firmware&#x2F;devicetree&#x2F;base&#x2F;model
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you get any further issues you can also try to manually boot as follows:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;setenv bootargs &amp;quot;root=&#x2F;dev&#x2F;mmcblk1p1 rootfstype=ext4&amp;quot;

ext4load mmc 0:1 ${kernel_addr_r} boot&#x2F;Image
ext4load mmc 0:1 ${fdt_addr_r} boot&#x2F;sun50i-h616-orangepi-zero3-custom.dtb
booti ${kernel_addr_r} - ${fdt_addr_r}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Set-up a cross-compile environment for buildroot Linux system running on Orange PI Zero 3</title>
		<published>2023-12-19T00:27:00+00:00</published>
		<updated>2023-12-19T00:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/buildroot-setup/" type="text/html"/>
		<id>https://ntn888.github.io/blog/buildroot-setup/</id>
		<content type="html">&lt;p&gt;Assuming host system Ubuntu 22.04. Install the pre-requisite packages needed for this lab:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sudo apt install build-essential git autoconf bison flex texinfo help2man gawk libtool-bin libncurses5-dev unzip
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;setting-up-the-tftp-server&quot;&gt;Setting up the TFTP server&lt;a class=&quot;zola-anchor&quot; href=&quot;#setting-up-the-tftp-server&quot; aria-label=&quot;Anchor link for: setting-up-the-tftp-server&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Let’s install a TFTP server on your development workstation:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sudo apt install tftpd-hpa
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then edit the file &lt;code&gt;&#x2F;etc&#x2F;default&#x2F;tftpd-hpa&lt;&#x2F;code&gt; to change this setting:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;TFTP_DIRECTORY=&amp;quot;&#x2F;srv&#x2F;tftp&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now restart the service:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;systemctl restart tftpd-hpa
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;grab-and-compile-buildroot&quot;&gt;Grab and compile buildroot&lt;a class=&quot;zola-anchor&quot; href=&quot;#grab-and-compile-buildroot&quot; aria-label=&quot;Anchor link for: grab-and-compile-buildroot&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;git clone https:&#x2F;&#x2F;git.buildroot.net&#x2F;buildroot
cd buildroot
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Load the default config for Orange PI Zero 3. And build it. Note that we shouldn&#x27;t change the kernel version as it&#x27;s been assigned to a custom version compatible with Orange PI.&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;make orangepi_zero3_defconfig
make
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once the build process is finished you will have an image called &amp;quot;sdcard.img&amp;quot; in the output&#x2F;images&#x2F; directory. Flash this image to your SD card and boot.&lt;&#x2F;p&gt;
&lt;p&gt;On login prompt enter &lt;code&gt;root&lt;&#x2F;code&gt; and no password. TA-DA - and you&#x27;re in your very own custom linux system!&lt;&#x2F;p&gt;
&lt;p&gt;For more details see &lt;em&gt;Using a build system, example with Buildroot&lt;&#x2F;em&gt; chapter in the slides &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;bootlin.com&#x2F;doc&#x2F;training&#x2F;embedded-linux-qemu&#x2F;embedded-linux-qemu-labs.pdf&quot;&gt;bootlin embedded linux qemu slides&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;compiling-a-kernel-module&quot;&gt;Compiling a kernel module&lt;a class=&quot;zola-anchor&quot; href=&quot;#compiling-a-kernel-module&quot; aria-label=&quot;Anchor link for: compiling-a-kernel-module&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Now we&#x27;ll setup the cross-compile variables.&lt;&#x2F;p&gt;
&lt;p&gt;Include the following in your PATH:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;export PATH=&amp;quot;$PATH:~&#x2F;buildroot&#x2F;output&#x2F;host&#x2F;bin&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And set the following variables:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;export ARCH=arm64
export CROSS_COMPILE=aarch64-linux-
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Make a new directory somewhere in your home folder called &lt;code&gt;hello&lt;&#x2F;code&gt;. Inside it create a C file &lt;code&gt;hello.c&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;C&quot; class=&quot;language-C z-code&quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-preprocessor z-include z-c&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-include z-c&quot;&gt;#include&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-other z-lt-gt z-include z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;linux&#x2F;module.h&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;    &lt;span class=&quot;z-comment z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;&#x2F;*&lt;&#x2F;span&gt; Needed by all modules &lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;*&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-preprocessor z-include z-c&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-include z-c&quot;&gt;#include&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-other z-lt-gt z-include z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;linux&#x2F;kernel.h&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;    &lt;span class=&quot;z-comment z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;&#x2F;*&lt;&#x2F;span&gt; Needed for KERN_INFO &lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;*&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;
&lt;span class=&quot;z-storage z-type z-c&quot;&gt;int&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-c&quot;&gt;init_module&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-storage z-type z-c&quot;&gt;void&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;
    &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;printk&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;KERN_INFO &lt;span class=&quot;z-string z-quoted z-double z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Hello World!&lt;span class=&quot;z-constant z-character z-escape z-c&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;

    &lt;span class=&quot;z-keyword z-control z-flow z-return z-c&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-type z-c&quot;&gt;void&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-c&quot;&gt;cleanup_module&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-storage z-type z-c&quot;&gt;void&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;
    &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;printk&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;KERN_INFO &lt;span class=&quot;z-string z-quoted z-double z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Goodbye World.&lt;span class=&quot;z-constant z-character z-escape z-c&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;MODULE_LICENSE&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;GPL&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Create &lt;code&gt;Makefile&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;CC = $(CROSS_COMPILE)gcc

obj-m := hello.o
KDIR := ~&#x2F;buildroot&#x2F;output&#x2F;build&#x2F;linux-custom

all:
        $(MAKE) -C $(KDIR) M=$(PWD)

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Noting to adjust the &lt;code&gt;KDIR&lt;&#x2F;code&gt; according to where you have buildroot. Assuming Homefolder here.&lt;&#x2F;p&gt;
&lt;p&gt;Now run &lt;code&gt;make&lt;&#x2F;code&gt;. You&#x27;ll get a bunch of files as result. We are interested in &lt;code&gt;hello.ko&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;serial-console-setup&quot;&gt;Serial console setup&lt;a class=&quot;zola-anchor&quot; href=&quot;#serial-console-setup&quot; aria-label=&quot;Anchor link for: serial-console-setup&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The board has 3 pins at the top exposing the serial UART. This will act as the serial console to interact with it over the terminal. The following image from the OrangePI website indicates these pins (TX&#x2F;RX).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;opi-zero3.png&quot; alt=&quot;OPI Zero3 Pinouts&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You may link this to a PC using a ftdi chip (available extensively on AliExpress), or like what I do use a Pico-probe which is equipped with a serial-to-usb port! On the host you can use Screen or Minicom to connect.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;transfer-the-compiled-module&quot;&gt;Transfer the compiled module&lt;a class=&quot;zola-anchor&quot; href=&quot;#transfer-the-compiled-module&quot; aria-label=&quot;Anchor link for: transfer-the-compiled-module&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;We need to transfer this file to our board. We&#x27;ll use the tftp service we setup earlier.&lt;&#x2F;p&gt;
&lt;p&gt;First copy the &lt;code&gt;hello.ko&lt;&#x2F;code&gt; file to &lt;code&gt;&#x2F;srv&#x2F;tftp&lt;&#x2F;code&gt; directory. Then in the board&#x27;s prompt:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;cd &#x2F;root
tftp -gr hello.ko &amp;lt;server-ip&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once successfully copied, clear the system log, and load the module:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sudo dmesg -c
insmod hello.ko
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now check for the message, running &lt;code&gt;dmesg&lt;&#x2F;code&gt; again. To remove this module, simply &lt;code&gt;rmmod hello.ko&lt;&#x2F;code&gt;. Check the output again and you&#x27;ll see Goodbye world.&lt;&#x2F;p&gt;
&lt;p&gt;This tests that we have a successful cross-compiler environment working to compile and study device driver development on Orange PI Zero 3 running Linux!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>NodeMCU: The chip powering countless DIY IoT projects, NodeMCU brings the cloud right onto your board</title>
		<published>2023-12-01T00:27:00+00:00</published>
		<updated>2023-12-01T00:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/nodemcu/" type="text/html"/>
		<id>https://ntn888.github.io/blog/nodemcu/</id>
		<content type="html">&lt;h2 id=&quot;introduction-to-nodemcu&quot;&gt;Introduction to NodeMCU&lt;a class=&quot;zola-anchor&quot; href=&quot;#introduction-to-nodemcu&quot; aria-label=&quot;Anchor link for: introduction-to-nodemcu&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In the vast and ever-evolving cosmos of the Internet of Things (IoT), there lies a star that has been steadily rising to prominence - the NodeMCU. It&#x27;s not just a piece of technology; it&#x27;s a gateway to endless possibilities, a canvas for your creativity. Imagine a world where your ideas aren&#x27;t just ideas, but tangible, interactive, and intelligent creations. This is the world NodeMCU invites you to explore.&lt;&#x2F;p&gt;
&lt;p&gt;At its core, NodeMCU represents a fusion of dreams and reality for IoT aficionados and DIY hobbyists. It&#x27;s a testament to how far we&#x27;ve come in the world of embedded systems and how accessible sophisticated technology has become. With its versatile nature and user-friendly approach, NodeMCU is more than just a microcontroller; it&#x27;s a beacon of innovation in the IoT space.&lt;&#x2F;p&gt;
&lt;p&gt;From its humble beginnings to its current status as a cornerstone of IoT projects, NodeMCU has journeyed through an evolution that mirrors the growth of IoT itself. In this comprehensive guide, we&#x27;ll embark on an exciting exploration of NodeMCU - uncovering its key features, capabilities, and why it has become an indispensable tool in the hands of creators and innovators.&lt;&#x2F;p&gt;
&lt;p&gt;Whether you are taking your first steps into the world of embedded electronics or you&#x27;re a seasoned veteran looking to expand your toolkit, NodeMCU offers a world where limitations are set only by your imagination. Let&#x27;s dive into this journey together, discovering how NodeMCU is not just changing the landscape of IoT, but also empowering us to build, innovate, and dream bigger.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;technical-deep-dive-understanding-nodemcu&quot;&gt;Technical Deep-Dive: Understanding NodeMCU&lt;a class=&quot;zola-anchor&quot; href=&quot;#technical-deep-dive-understanding-nodemcu&quot; aria-label=&quot;Anchor link for: technical-deep-dive-understanding-nodemcu&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Welcome to the heart of our guide, where we unravel the intricacies of NodeMCU. This section is more than just technical jargon; it&#x27;s a journey into the core of what makes NodeMCU a standout player in the IoT world. As we dissect its components and functionalities, you&#x27;ll gain a deeper understanding and appreciation for this incredible tool. Let’s dive into the details and uncover the magic behind NodeMCU.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nodemcu-firmware-lua-and-c-programming-language-insights&quot;&gt;NodeMCU Firmware: Lua and C Programming Language Insights&lt;a class=&quot;zola-anchor&quot; href=&quot;#nodemcu-firmware-lua-and-c-programming-language-insights&quot; aria-label=&quot;Anchor link for: nodemcu-firmware-lua-and-c-programming-language-insights&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;NodeMCU is not your ordinary firmware; it&#x27;s a revolutionary approach to programming microcontrollers. At its core, NodeMCU offers a unique blend of flexibility and power, thanks to its dual compatibility with Lua and C programming languages. Lua, known for its simplicity and efficiency, is an interpreter language embedded within NodeMCU. This means you can write Lua scripts directly for the ESP8266, transforming complex ideas into simple, yet powerful code.&lt;&#x2F;p&gt;
&lt;p&gt;But what if you&#x27;re more comfortable with C? That&#x27;s where NodeMCU stands apart. You can use the Arduino IDE, a familiar and beloved tool among developers, to program your ESP8266 with NodeMCU. This dual-language support breaks down barriers, making NodeMCU accessible to a broader range of programmers, from beginners to experts. Whether you&#x27;re scripting in Lua or coding in C, NodeMCU offers a seamless, user-friendly experience, opening up a world of possibilities in IoT development.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;esp-12e-module-and-its-layout&quot;&gt;ESP-12E Module and Its Layout&lt;a class=&quot;zola-anchor&quot; href=&quot;#esp-12e-module-and-its-layout&quot; aria-label=&quot;Anchor link for: esp-12e-module-and-its-layout&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;At the heart of NodeMCU is the ESP-12E module, a powerful and versatile piece of hardware. The ESP-12E is part of the ESP8266 family but stands out with its generous provision of 17 GPIO (General Purpose Input&#x2F;Output) pins. This abundance of pins opens the door to a myriad of functionalities, from controlling LEDs and sensors to communicating with other devices. But it&#x27;s not just about quantity; the quality and flexibility of these GPIO pins make the ESP-12E module incredibly efficient for a wide range of IoT applications.&lt;&#x2F;p&gt;
&lt;p&gt;The layout of the ESP-12E module is a testament to its user-friendly design. Featuring edge castellations, it&#x27;s a breeze to solder onto a PCB, making it ideal for both beginners and seasoned makers. The module also includes an ADC (Analog to Digital Converter) pin and SPI (Serial Peripheral Interface) pins, further enhancing its versatility. Whether you&#x27;re building a simple home automation system or a complex IoT network, the ESP-12E module, with its robust layout and extensive GPIO options, is perfectly equipped to bring your projects to life.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;pinout-and-gpio-pins-explained&quot;&gt;Pinout and GPIO Pins Explained&lt;a class=&quot;zola-anchor&quot; href=&quot;#pinout-and-gpio-pins-explained&quot; aria-label=&quot;Anchor link for: pinout-and-gpio-pins-explained&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Understanding the pinout of the NodeMCU is crucial for unleashing its full potential. Each pin on the NodeMCU serves a specific function, and knowing how to utilize them effectively can significantly enhance your IoT projects. The GPIO pins, for example, are the heroes of the NodeMCU universe. They allow you to interact with a wide array of sensors and actuators, making them the building blocks of any IoT system.&lt;&#x2F;p&gt;
&lt;p&gt;But the NodeMCU&#x27;s functionality extends beyond just GPIO pins. It also includes specialized pins for ADC and SPI, allowing for more complex operations like reading analog sensors or communicating with other microcontrollers. This combination of GPIO, ADC, and SPI pins on the NodeMCU makes it a versatile and powerful tool for any IoT enthusiast. Whether you&#x27;re toggling LEDs, reading sensor data, or sending signals to other devices, the NodeMCU&#x27;s pinout offers the flexibility and power you need to bring your ideas to life.&lt;&#x2F;p&gt;
&lt;p&gt;This section of the guide aims to provide a detailed and educational insight into the technical aspects of NodeMCU. By understanding these fundamentals, you&#x27;ll be better equipped to harness the full potential of NodeMCU in your IoT projects.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;ESP8266-NodeMCU-kit-12-E-pinout-gpio-pin.webp&quot; alt=&quot;pinout&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;setting-up-nodemcu&quot;&gt;Setting Up NodeMCU&lt;a class=&quot;zola-anchor&quot; href=&quot;#setting-up-nodemcu&quot; aria-label=&quot;Anchor link for: setting-up-nodemcu&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Embarking on the NodeMCU journey begins with setting it up correctly. This section is crucial for anyone looking to harness the full potential of NodeMCU in their projects. Whether you&#x27;re a beginner or have some experience, these steps will guide you through the initial setup process, ensuring a smooth and successful start to your NodeMCU adventures.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;initial-steps-installing-arduino-ide-and-configuring-for-nodemcu&quot;&gt;Initial Steps: Installing Arduino IDE and Configuring for NodeMCU&lt;a class=&quot;zola-anchor&quot; href=&quot;#initial-steps-installing-arduino-ide-and-configuring-for-nodemcu&quot; aria-label=&quot;Anchor link for: initial-steps-installing-arduino-ide-and-configuring-for-nodemcu&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Getting started with NodeMCU involves a familiar friend for many developers – the Arduino Integrated Development Environment (IDE). The first step is to ensure you have Arduino IDE installed on your computer. This powerful, user-friendly platform is the gateway to programming your NodeMCU.&lt;&#x2F;p&gt;
&lt;p&gt;Once the Arduino IDE is up and running, it’s time to make it NodeMCU-ready. This involves a simple but crucial step: adding the ESP8266 board manager to the Arduino IDE. By navigating to File -&amp;gt; Preferences, and inserting the URL &lt;code&gt;https:&#x2F;&#x2F;arduino.esp8266.com&#x2F;stable&#x2F;package_esp8266com_index.json&lt;&#x2F;code&gt; into the “Additional Boards Manager URLs” field, you enable the IDE to support NodeMCU programming. This small step is a giant leap in unlocking the programming capabilities of NodeMCU with the comfort and familiarity of Arduino IDE.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;connecting-and-programming-nodemcu-with-arduino-ide&quot;&gt;Connecting and Programming NodeMCU with Arduino IDE&lt;a class=&quot;zola-anchor&quot; href=&quot;#connecting-and-programming-nodemcu-with-arduino-ide&quot; aria-label=&quot;Anchor link for: connecting-and-programming-nodemcu-with-arduino-ide&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;With the Arduino IDE configured, the next step is to connect your NodeMCU to your computer using a micro-USB cable. This simple connection is where the magic begins, turning your computer into a command center for NodeMCU. Once connected, you&#x27;ll select the NodeMCU board under Tools -&amp;gt; Board -&amp;gt; ESP8266 Boards, ensuring that the IDE knows exactly what hardware it&#x27;s communicating with.&lt;&#x2F;p&gt;
&lt;p&gt;Programming the NodeMCU via Arduino IDE is an exhilarating experience. You can write or upload sketches just like you would for an Arduino board. The process involves selecting the right port under Tools -&amp;gt; Port, where your NodeMCU is connected. After writing your code or loading an existing sketch, hitting the upload button brings your code to life on the NodeMCU. It’s a seamless transition from code on screen to action in the real world, bridging the gap between imagination and reality.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;common-issues-and-troubleshooting&quot;&gt;Common Issues and Troubleshooting&lt;a class=&quot;zola-anchor&quot; href=&quot;#common-issues-and-troubleshooting&quot; aria-label=&quot;Anchor link for: common-issues-and-troubleshooting&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;As with any technology, you might encounter some hiccups along the way. Common issues with setting up NodeMCU often include problems with port detection, driver compatibility, or board selection in Arduino IDE. Troubleshooting these problems typically involves ensuring that the correct drivers for the USB to UART bridge (like CP2102) are installed, and that the correct board and port are selected in the Arduino IDE.&lt;&#x2F;p&gt;
&lt;p&gt;Another common issue is the failure of the computer to recognize the NodeMCU board. This can usually be resolved by trying a different USB cable or port, as some cables are charge-only and do not support data transfer. Additionally, ensuring that your NodeMCU board is not physically damaged and that the USB to UART bridge is functioning correctly can help solve connectivity issues. Remember, a little bit of troubleshooting can go a long way in ensuring a smooth experience with NodeMCU.&lt;&#x2F;p&gt;
&lt;p&gt;By following these detailed steps and being aware of common issues, you will be well on your way to successfully setting up your NodeMCU. This setup is your first step into a world where your creative IoT projects come to life.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exploring-nodemcu-components&quot;&gt;Exploring NodeMCU Components&lt;a class=&quot;zola-anchor&quot; href=&quot;#exploring-nodemcu-components&quot; aria-label=&quot;Anchor link for: exploring-nodemcu-components&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;As we delve deeper into the NodeMCU ecosystem, it becomes essential to understand the components that make up this versatile board. This section is dedicated to unraveling the mysteries of the NodeMCU&#x27;s hardware, providing you with the knowledge needed to fully leverage its capabilities. From its onboard controller to its unique features, every component plays a vital role in the functionality and flexibility of NodeMCU.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;breakout-board-features-usb-to-uart-controller-and-on-board-regulators&quot;&gt;Breakout Board Features: USB to UART Controller and On-board Regulators&lt;a class=&quot;zola-anchor&quot; href=&quot;#breakout-board-features-usb-to-uart-controller-and-on-board-regulators&quot; aria-label=&quot;Anchor link for: breakout-board-features-usb-to-uart-controller-and-on-board-regulators&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;One of the standout features of the NodeMCU is its onboard USB to UART (Universal Asynchronous Receiver&#x2F;Transmitter) controller. This component is a game-changer, simplifying the process of uploading code from your computer to the NodeMCU. In many models, the CP2102 IC from Silicon Labs serves as this controller, offering a stable and reliable bridge between your computer&#x27;s USB port and the NodeMCU&#x27;s serial interface. This integration means you don&#x27;t need additional hardware to program your NodeMCU, making it more accessible and user-friendly, especially for beginners.&lt;&#x2F;p&gt;
&lt;p&gt;Alongside the USB to UART controller, the NodeMCU also includes on-board voltage regulators. These regulators are crucial because the ESP8266 chip, which is at the heart of NodeMCU, operates at 3.3V, whereas most computer USB ports supply 5V. The on-board regulator steps down this voltage to a safe level, ensuring that your NodeMCU operates in a stable and secure environment. This feature not only protects the board but also simplifies the power supply, eliminating the need for external voltage regulation.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;understanding-leds-and-gpio-pins&quot;&gt;Understanding LEDs and GPIO Pins&lt;a class=&quot;zola-anchor&quot; href=&quot;#understanding-leds-and-gpio-pins&quot; aria-label=&quot;Anchor link for: understanding-leds-and-gpio-pins&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The NodeMCU board is equipped with two on-board LEDs, which are invaluable for basic diagnostics and for use in your projects. The first LED, typically connected to the GPIO 2 pin, can be programmed to indicate various statuses or actions, such as signaling the completion of a task or the receipt of data. The second LED, usually connected to GPIO 16, offers additional options for feedback and interaction in your projects. These LEDs are active LOW, meaning they turn on when their corresponding GPIO pins are set to a LOW voltage level. This feature allows you to easily test and debug your NodeMCU applications, providing visual feedback directly from the board.&lt;&#x2F;p&gt;
&lt;p&gt;The General Purpose Input&#x2F;Output (GPIO) pins are the bread and butter of the NodeMCU. These pins are what make the NodeMCU so versatile, allowing it to interact with a wide range of sensors, actuators, and other devices. With a generous number of GPIO pins available, you can connect multiple components simultaneously, enabling complex and multifaceted IoT projects. Each GPIO pin can be programmed for various functions, such as digital input, digital output, PWM (Pulse Width Modulation) output, and more. This flexibility opens up a world of possibilities, allowing your NodeMCU to truly become the heart of your IoT ecosystem.&lt;&#x2F;p&gt;
&lt;p&gt;By gaining a thorough understanding of these components, you&#x27;re now equipped to make the most out of your NodeMCU board. Whether it&#x27;s programming the LEDs for basic output or utilizing the GPIO pins for intricate projects, these insights form the foundation of your journey into the fascinating world of NodeMCU and IoT.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;programming-nodemcu&quot;&gt;Programming NodeMCU&lt;a class=&quot;zola-anchor&quot; href=&quot;#programming-nodemcu&quot; aria-label=&quot;Anchor link for: programming-nodemcu&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Programming is where your NodeMCU projects come to life, transforming lines of code into real-world actions and reactions. This section is dedicated to guiding you through the programming aspects of NodeMCU, from writing your first script to exploring advanced programming techniques. Whether you are a beginner or an experienced developer, understanding how to effectively program the NodeMCU is key to unlocking its full potential.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;writing-and-uploading-basic-scripts-e-g-blinking-led-example&quot;&gt;Writing and Uploading Basic Scripts (e.g., Blinking LED Example)&lt;a class=&quot;zola-anchor&quot; href=&quot;#writing-and-uploading-basic-scripts-e-g-blinking-led-example&quot; aria-label=&quot;Anchor link for: writing-and-uploading-basic-scripts-e-g-blinking-led-example&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;A great starting point for programming the NodeMCU is the classic &#x27;Blinking LED&#x27; example. This simple project is not just about turning an LED on and off; it&#x27;s a fundamental step in understanding how to control the NodeMCU&#x27;s GPIO pins through programming. To begin, you&#x27;ll write a script in the Arduino IDE that toggles one of the onboard LEDs. This script will use basic commands to set the GPIO pin as an output, and then to turn the LED on (set the pin LOW) and off (set the pin HIGH) in a loop.&lt;&#x2F;p&gt;
&lt;p&gt;Uploading this script to your NodeMCU is straightforward. With your NodeMCU connected to your computer via a micro-USB cable and the correct board and port selected in the Arduino IDE, simply click the &#x27;Upload&#x27; button. The IDE compiles the script into bytecode, which is then uploaded to the NodeMCU. Once uploaded, the NodeMCU executes the script, and you should see the LED start to blink. This process not only demonstrates the basics of NodeMCU programming but also familiarizes you with the upload procedure and troubleshooting any issues that may arise, such as connection errors or syntax mistakes in your code.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lua-vs-arduino-ide-pros-and-cons&quot;&gt;Lua vs. Arduino IDE: Pros and Cons&lt;a class=&quot;zola-anchor&quot; href=&quot;#lua-vs-arduino-ide-pros-and-cons&quot; aria-label=&quot;Anchor link for: lua-vs-arduino-ide-pros-and-cons&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;NodeMCU offers the flexibility to program in Lua directly or use the Arduino IDE. Each method has its advantages and considerations. Lua, being a lightweight scripting language, is ideal for simple, standalone NodeMCU projects. It allows for quick development and iteration, with scripts being easier to write and modify. However, Lua might have limitations when it comes to more complex applications, especially those requiring extensive libraries and support that are readily available in the Arduino environment.&lt;&#x2F;p&gt;
&lt;p&gt;On the other hand, programming the NodeMCU using the Arduino IDE opens up a familiar environment for those who have worked with Arduino boards. It provides access to a vast library of existing code and community support, making it easier to implement complex functionalities. While the Arduino IDE offers more robust capabilities, it can be slightly more cumbersome for quick, small-scale projects compared to the straightforwardness of Lua scripting. Ultimately, the choice between Lua and Arduino IDE programming depends on your project requirements and personal preferences.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;advanced-programming-tips-and-tricks&quot;&gt;Advanced Programming Tips and Tricks&lt;a class=&quot;zola-anchor&quot; href=&quot;#advanced-programming-tips-and-tricks&quot; aria-label=&quot;Anchor link for: advanced-programming-tips-and-tricks&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;As you become more comfortable with basic NodeMCU programming, you can explore advanced techniques to enhance your projects. This includes mastering the use of interrupts for responsive designs, leveraging WiFi capabilities for IoT connectivity, and optimizing power consumption for battery-operated devices. Understanding how to efficiently manage memory and utilize deep sleep modes can significantly improve the performance and durability of your NodeMCU projects.&lt;&#x2F;p&gt;
&lt;p&gt;Additionally, integrating external sensors and modules expands the functionality of your NodeMCU board. Learning how to interface with different types of sensors (like temperature, humidity, motion sensors) and communication modules (like Bluetooth or Zigbee) opens up a world of possibilities for your IoT projects. Experimenting with these advanced concepts not only broadens the scope of your projects but also deepens your understanding and skills in the realm of embedded systems and IoT.&lt;&#x2F;p&gt;
&lt;p&gt;Through this comprehensive overview of programming NodeMCU, you are now equipped with the knowledge to start creating, experimenting, and innovating. Whether it&#x27;s writing simple scripts or diving into complex IoT applications, the world of NodeMCU programming is rich with opportunities for exploration and creativity.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;real-world-applications-and-projects&quot;&gt;Real-World Applications and Projects&lt;a class=&quot;zola-anchor&quot; href=&quot;#real-world-applications-and-projects&quot; aria-label=&quot;Anchor link for: real-world-applications-and-projects&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Exploring the practical applications of NodeMCU is where the true excitement lies for IoT enthusiasts and hobbyists. This section aims to bridge the gap between theory and real-world application, showcasing how NodeMCU can be utilized in various projects. From simple home automation to complex IoT systems, NodeMCU’s versatility makes it an ideal choice for a wide range of applications.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sample-iot-projects-using-nodemcu&quot;&gt;Sample IoT Projects using NodeMCU&lt;a class=&quot;zola-anchor&quot; href=&quot;#sample-iot-projects-using-nodemcu&quot; aria-label=&quot;Anchor link for: sample-iot-projects-using-nodemcu&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Starting with home automation, a popular application for NodeMCU, you can create projects that control lights, thermostats, or even security systems through the internet. For instance, using NodeMCU, you can develop a system that lets you control your home lighting via a smartphone app. This involves programming the NodeMCU to connect to your Wi-Fi network and receive commands from your phone, which then triggers the connected lights through relay modules. Such a project not only introduces you to the basics of IoT but also provides practical, everyday utility.&lt;&#x2F;p&gt;
&lt;p&gt;Another exciting application is creating a weather station. By connecting various sensors to NodeMCU, such as temperature, humidity, and pressure sensors, you can collect real-time environmental data. This data can be sent to an IoT platform like ThingSpeak or your own server, allowing you to monitor and analyze weather patterns over time. This project not only enhances your understanding of sensor integration but also offers insights into data handling and cloud connectivity in IoT systems.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;community-contributions-and-case-studies&quot;&gt;Community Contributions and Case Studies&lt;a class=&quot;zola-anchor&quot; href=&quot;#community-contributions-and-case-studies&quot; aria-label=&quot;Anchor link for: community-contributions-and-case-studies&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The NodeMCU community is vast and active, with members constantly sharing innovative projects and ideas. Engaging with this community can provide invaluable insights and inspiration for your own projects. For example, many community members have shared their experiences in building smart irrigation systems using NodeMCU, which automatically water plants based on soil moisture levels. These case studies often include detailed instructions, code snippets, and troubleshooting tips, making them a great resource for learning and experimentation.&lt;&#x2F;p&gt;
&lt;p&gt;Another area where community contributions shine is in the development of custom IoT applications, such as pet feeders, smart mirrors, or personalized notification systems. These projects often combine various technologies like web development, database management, and mobile app development with NodeMCU, showcasing its ability to integrate seamlessly into broader technology ecosystems. By exploring these case studies, you not only learn about NodeMCU but also about how it interacts with other technologies to create comprehensive solutions.&lt;&#x2F;p&gt;
&lt;p&gt;This exploration of real-world applications and community projects highlights the practicality and adaptability of NodeMCU in a variety of settings. Whether you are looking to enhance your home, understand the environment, or connect with a global community of innovators, NodeMCU offers a platform to turn your ideas into reality. Through these applications, you&#x27;ll see just how your skills in programming and electronics can have a tangible impact in the world.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;nodemcu-beyond-the-basics&quot;&gt;NodeMCU: Beyond the Basics&lt;a class=&quot;zola-anchor&quot; href=&quot;#nodemcu-beyond-the-basics&quot; aria-label=&quot;Anchor link for: nodemcu-beyond-the-basics&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;After mastering the fundamentals of NodeMCU, it&#x27;s time to push the boundaries and explore its advanced capabilities. This section delves into the more sophisticated aspects of NodeMCU, highlighting how it can be integrated with other technologies and platforms. By expanding your NodeMCU knowledge, you can take your projects from simple applications to complex, interconnected systems that represent the cutting edge of IoT development.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;advanced-modules-and-add-ons&quot;&gt;Advanced Modules and Add-ons&lt;a class=&quot;zola-anchor&quot; href=&quot;#advanced-modules-and-add-ons&quot; aria-label=&quot;Anchor link for: advanced-modules-and-add-ons&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;One of the ways to enhance the capabilities of your NodeMCU is by integrating it with various modules and add-ons. For instance, adding a GPS module can transform your NodeMCU project into a location-aware device, perfect for tracking applications or smart vehicles. When integrating a GPS module, you&#x27;ll delve into serial communication and parsing GPS data, expanding your technical skills and understanding of geolocation technologies.&lt;&#x2F;p&gt;
&lt;p&gt;Another exciting add-on is the incorporation of wireless communication modules, such as Zigbee or Bluetooth Low Energy (BLE). These modules enable your NodeMCU to communicate with other devices wirelessly, opening up possibilities for creating mesh networks, smart home systems, or even IoT hubs. Learning to integrate these modules involves understanding wireless communication protocols and network topology, further broadening your IoT expertise.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;integrating-nodemcu-with-other-iot-platforms&quot;&gt;Integrating NodeMCU with Other IoT Platforms&lt;a class=&quot;zola-anchor&quot; href=&quot;#integrating-nodemcu-with-other-iot-platforms&quot; aria-label=&quot;Anchor link for: integrating-nodemcu-with-other-iot-platforms&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;NodeMCU&#x27;s true potential is unleashed when it&#x27;s integrated with other IoT platforms. For example, connecting NodeMCU with platforms like AWS IoT or Google Cloud IoT enables you to store, process, and analyze the data collected by your NodeMCU device. This integration requires an understanding of cloud services, data security, and network management, providing an excellent opportunity to delve into the world of cloud computing and big data.&lt;&#x2F;p&gt;
&lt;p&gt;Another integration avenue is using NodeMCU with home automation platforms like Home Assistant or OpenHAB. This integration allows you to create sophisticated home automation systems that are customizable and can interact with a wide range of devices. It involves learning about APIs, MQTT protocol, and smart home standards, offering a comprehensive look into the world of smart home technology.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;future-trends-and-developments-in-nodemcu-technology&quot;&gt;Future Trends and Developments in NodeMCU Technology&lt;a class=&quot;zola-anchor&quot; href=&quot;#future-trends-and-developments-in-nodemcu-technology&quot; aria-label=&quot;Anchor link for: future-trends-and-developments-in-nodemcu-technology&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;As IoT continues to evolve, so does NodeMCU. Staying abreast of the latest trends and developments in NodeMCU technology is crucial for any IoT enthusiast. This includes keeping an eye on advancements in firmware, new modules, and emerging IoT protocols that could enhance the capabilities of NodeMCU.&lt;&#x2F;p&gt;
&lt;p&gt;Additionally, the growing focus on AI and machine learning in IoT presents exciting possibilities for NodeMCU projects. Integrating AI algorithms with NodeMCU, for applications like predictive maintenance or environmental monitoring, represents the next frontier in IoT development. This requires a foundational understanding of machine learning concepts and the ability to implement these algorithms in a resource-constrained environment like NodeMCU.&lt;&#x2F;p&gt;
&lt;p&gt;In this section, we&#x27;ve explored the advanced aspects of NodeMCU, from integrating with other technologies to staying updated with future trends. These insights are intended to inspire you to take your NodeMCU projects to new heights, leveraging its full potential to create innovative and impactful IoT solutions.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;As we conclude our comprehensive journey through the world of NodeMCU, let&#x27;s reflect on the rich tapestry of opportunities this versatile tool offers to IoT enthusiasts and hobbyists. From the initial exploration of its technical makeup and firmware options in Section II, where we delved into the intricacies of Lua and C programming, to the practical setup guidance in Section III, ensuring a smooth start to your NodeMCU experience. We journeyed through the crucial hardware components in Section IV, highlighting the significance of onboard controllers and GPIO pins for your projects.&lt;&#x2F;p&gt;
&lt;p&gt;Our adventure then took us into the realms of programming in Section V, where we learned to breathe life into our NodeMCU boards through scripts and advanced programming techniques. Section VI expanded our horizons further, showcasing real-world applications and community-driven projects, illustrating how NodeMCU acts as a cornerstone in various innovative IoT systems. Finally, in Section VII, we ventured beyond the basics to explore advanced modules, integrations with IoT platforms, and emerging trends, positioning NodeMCU at the forefront of IoT development.&lt;&#x2F;p&gt;
&lt;p&gt;Now, armed with this knowledge, the path lies open for you to embark on your own NodeMCU projects. Whether it&#x27;s automating your home, building a personal weather station, or integrating advanced IoT technologies, the potential is limitless. Remember, the NodeMCU is not just a tool; it&#x27;s a canvas for your creativity and a bridge to realizing your IoT dreams.&lt;&#x2F;p&gt;
&lt;p&gt;So, take that first step, experiment with a simple blinking LED project, or dive into more complex integrations. Each project, no matter the size, is a step forward in your IoT journey. And as you progress, stay connected with the vibrant NodeMCU community, drawing inspiration and sharing your experiences. Your journey with NodeMCU is just beginning, and the future is bright with possibilities. Embrace it with enthusiasm, and let your imagination lead the way in this exciting world of IoT and embedded systems.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Why run local LLMs?</title>
		<published>2023-11-30T15:27:00+00:00</published>
		<updated>2023-11-30T15:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/llama-why-local/" type="text/html"/>
		<id>https://ntn888.github.io/blog/llama-why-local/</id>
		<content type="html">&lt;p&gt;Have you ever wished your AI assistant was more flexible? More customized to your specific needs? More under your direct control? As remarkable as large language models like GPT-4 and Bard have been, relying solely on external APIs can leave developers feeling constrained. There&#x27;s a better way – self-hosting your own private AI. &lt;&#x2F;p&gt;
&lt;p&gt;I distinctly remember the first time I used GPT-4. The sheer power and fluidity of its responses blew my mind. But after the initial wonder faded, limitations began to emerge. Requests for complex code would hit computation limits. Queries using sensitive data made me uneasy. And being dependent on a third-party API limited what customizations I could make.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;friendly-chatbot.resized.png&quot; alt=&quot;Friendly chat bot in space&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Like Dorothy realizing her magical Oz was being powered by a man behind a curtain, shifting to a self-hosted large language model lifted the veil for me. Finally I had an AI assistant answering to me alone, trained on my data, living on my infrastructure. The flexibility, control, privacy, cost savings, and custom integrations unlocked have been a revelation. &lt;&#x2F;p&gt;
&lt;p&gt;As AI rapidly becomes essential business infrastructure, more teams are arriving at the same revelation. Self-hosted solutions allow you to mold a private AI assistant to your exact needs, without unpredictable costs or outside entanglements. Read on as we explore the benefits, options, and considerations shifting from rented to owned AI. I may be biased, but I believe you too will prefer having your friendly AI wizard in-house.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;more-flexibility-and-control&quot;&gt;More Flexibility and Control&lt;a class=&quot;zola-anchor&quot; href=&quot;#more-flexibility-and-control&quot; aria-label=&quot;Anchor link for: more-flexibility-and-control&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;When it comes to leveraging AI, flexibility and control are everything. Relying on rigid external APIs can leave your options limited. By self-hosting a large language model, you open new dimensions of customization to tailor it precisely to your goals.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fine-tuning-unlocks-targeted-performance&quot;&gt;Fine-Tuning Unlocks Targeted Performance&lt;a class=&quot;zola-anchor&quot; href=&quot;#fine-tuning-unlocks-targeted-performance&quot; aria-label=&quot;Anchor link for: fine-tuning-unlocks-targeted-performance&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Pre-trained models like GPT-4 and Bard display remarkable breadth, but their general knowledge comes at the cost of precision on specialized tasks. Fine-tuning allows you to customize models by continuing to train them on your own data, steering their intelligence toward your specific needs.&lt;&#x2F;p&gt;
&lt;p&gt;Whether improving code suggestions, analyzing scientific papers, or answering domain-specific questions, additional training refines their relevancy and accuracy. On-premise models give you the power over this enhancement process instead of being limited by a third party. The more tailored to your use cases, the better it performs.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;optimizing-compute-for-variable-demand&quot;&gt;Optimizing Compute for Variable Demand&lt;a class=&quot;zola-anchor&quot; href=&quot;#optimizing-compute-for-variable-demand&quot; aria-label=&quot;Anchor link for: optimizing-compute-for-variable-demand&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Self-hosted AI allows you to scale resources fluidly to meet fluctuating needs. Server capacity can expand seamlessly via the cloud to handle spikes in model queries. When demand decreases, reduce resources accordingly. This saves substantially versus paying for peak API capacity at all times.&lt;&#x2F;p&gt;
&lt;p&gt;The ability to load balance queries across devices and data centers further bolsters flexible distribution of compute. You also retain control to upgrade to new hardware quickly instead of relying on a provider’s refresh cycle, keeping model performance on the cutting edge.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;agility-to-update-experiment-and-improve&quot;&gt;Agility to Update, Experiment and Improve&lt;a class=&quot;zola-anchor&quot; href=&quot;#agility-to-update-experiment-and-improve&quot; aria-label=&quot;Anchor link for: agility-to-update-experiment-and-improve&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;On-premise models empower your team to rapidly iterate experiments and innovations in AI capabilities. Changes don’t require coordination across organizations or account managers. Want to try enhancing prompts or expanding the training dataset? On your own systems, new ideas can be tested straightaway.&lt;&#x2F;p&gt;
&lt;p&gt;Having your AI engine in-house frees you to build additional tools and custom interfaces tailored to your workflows. As new techniques and model architectures emerge, self-hosted AI means you dictate the integration pace rather than being locked into a rigid vendor roadmap. With great power over your AI comes great product responsibility – are you ready?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;enhanced-privacy-and-security&quot;&gt;Enhanced Privacy and Security&lt;a class=&quot;zola-anchor&quot; href=&quot;#enhanced-privacy-and-security&quot; aria-label=&quot;Anchor link for: enhanced-privacy-and-security&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;When relying on external AI systems, privacy and security considerations can quickly spiral into headaches. By retaining direct control over data and models on internal infrastructure, self-hosted LLMs simplify safeguarding information while meeting compliance needs.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sensitive-data-stays-onsite&quot;&gt;Sensitive Data Stays Onsite&lt;a class=&quot;zola-anchor&quot; href=&quot;#sensitive-data-stays-onsite&quot; aria-label=&quot;Anchor link for: sensitive-data-stays-onsite&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Every industry deals with confidential data, whether customer info, financials, medical history or IP. Transmitting this data externally to utilize AI APIs rightly raises alarms for security and compliance teams. Just because insights from the data have business value doesn&#x27;t mean IT oversight should be bypassed.&lt;&#x2F;p&gt;
&lt;p&gt;Self-hosted AI eliminates these concerns by keeping all processing onsite. Data remains within your firewall at all times, visible only to approved internal teams. With proper access controls, even admins running the AI systems can be prevented from directly viewing sensitive information used to train models.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;streamlining-regulatory-and-policy-compliance&quot;&gt;Streamlining Regulatory and Policy Compliance&lt;a class=&quot;zola-anchor&quot; href=&quot;#streamlining-regulatory-and-policy-compliance&quot; aria-label=&quot;Anchor link for: streamlining-regulatory-and-policy-compliance&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;From financial regulations like GDPR to healthcare rules like HIPAA, evolving legal expectations make safe data handling trickier by the year. By retaining data and AI systems in-house instead of relying on cloud services, the barriers to compliance are dramatically reduced.&lt;&#x2F;p&gt;
&lt;p&gt;Your own infrastructure allows auditing and controls tailored to your exact regulatory needs, with less dependence on third-party attestations. Data residency laws also come into play requiring information stay within national borders, easily addressed via on-premise solutions.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cutting-external-dependencies-improves-security-posture&quot;&gt;Cutting External Dependencies Improves Security Posture&lt;a class=&quot;zola-anchor&quot; href=&quot;#cutting-external-dependencies-improves-security-posture&quot; aria-label=&quot;Anchor link for: cutting-external-dependencies-improves-security-posture&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Every external API call or cloud service dependency increases vulnerabilities by expanding the corporate attack surface. Just look at the barrage of stabilizer AI incidents last year! Self-hosted models help prevent such headaches by eliminating external connections associated with AI functions.&lt;&#x2F;p&gt;
&lt;p&gt;Isolation also enables creating something like an &amp;quot;air gap&amp;quot; via machinery only used for model handling, disconnected from wider business networks. Though not bulletproof, minimizing touch points via private AI infrastructure pushes security in the right direction.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lower-long-term-costs&quot;&gt;Lower Long-Term Costs&lt;a class=&quot;zola-anchor&quot; href=&quot;#lower-long-term-costs&quot; aria-label=&quot;Anchor link for: lower-long-term-costs&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;When evaluating the financial implications of AI systems, it&#x27;s essential to take a big picture perspective. Though recognizing ongoing costs, over years self-hosted solutions often prove far more economical than reliance on rental APIs requiring endless subscription fees.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;avoiding-mounting-api-expenses&quot;&gt;Avoiding Mounting API Expenses&lt;a class=&quot;zola-anchor&quot; href=&quot;#avoiding-mounting-api-expenses&quot; aria-label=&quot;Anchor link for: avoiding-mounting-api-expenses&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;It&#x27;s easy to only compare upfront expenses when adopting new technology, failing to account for recurring fees endless draining budgets over time. Leading LLM APIs often run $0.002+ per 1,000 tokens processed. For context, this essay already tallied over 3,400 tokens – costing over $6 at that rate!&lt;&#x2F;p&gt;
&lt;p&gt;While the convenience of instantly available AI is appealing, even moderate enterprise usage adds up to staggering sums. Budget-conscious leaders rightly question chiefly benefiting API shareholder value long-term for functionality becoming a commodity.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;leveraging-existing-infrastructure&quot;&gt;Leveraging Existing Infrastructure&lt;a class=&quot;zola-anchor&quot; href=&quot;#leveraging-existing-infrastructure&quot; aria-label=&quot;Anchor link for: leveraging-existing-infrastructure&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Rather than building from scratch, self-hosted AI can integrate with current on-premise servers and hardware many enterprises already own. Though still representing an investment, extending existing capacity is far cheaper than standalone rental expenses.&lt;&#x2F;p&gt;
&lt;p&gt;Private AI also allows you to dictate upgrade cycles rather than relying on a provider&#x27;s hardware refresh rate. Regular advances in GPU&#x2F;TPU processing mean efficiency gains offsetting growing model sizes. In five years the compute powering innovations today could easily fit on a desktop.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;improved-return-as-models-compound-gains&quot;&gt;Improved Return as Models Compound Gains&lt;a class=&quot;zola-anchor&quot; href=&quot;#improved-return-as-models-compound-gains&quot; aria-label=&quot;Anchor link for: improved-return-as-models-compound-gains&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;A core advantage of LLMs lies in their ability to build upon prior learning. Over months and years of consistent data exposure, even hosted locally their performances continue improving. This means models become an appreciating asset intrinsically delivering multiplying value beyond static rental APIs.&lt;&#x2F;p&gt;
&lt;p&gt;With customer interactions, new products, and technical advances expanding data pools,Compose even longer form content with deeper analysis the accuracy and quality of outputs compound faster on privately controlled infrastructure. Much like wine aging to perfection in your cellar.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;easier-integration-and-customization&quot;&gt;Easier Integration and Customization&lt;a class=&quot;zola-anchor&quot; href=&quot;#easier-integration-and-customization&quot; aria-label=&quot;Anchor link for: easier-integration-and-customization&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Beyond core model functionality, realizing AI&#x27;s full potential requires tailored integration with business systems and processes. Self-hosted infrastructure fosters frictionless customization that rented APIs simply can&#x27;t match.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;streamlining-connections-to-internal-data-apps&quot;&gt;Streamlining Connections to Internal Data &amp;amp; Apps&lt;a class=&quot;zola-anchor&quot; href=&quot;#streamlining-connections-to-internal-data-apps&quot; aria-label=&quot;Anchor link for: streamlining-connections-to-internal-data-apps&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Extracting maximum value from AI necessitates easy interoperability with other stacks powering operations. Self-hosted models co-located on-premise simplify linking to internal databases, analytics tools, CRM and ERP platforms etc. without external touchpoints.&lt;&#x2F;p&gt;
&lt;p&gt;With direct data access, models can programmatically pull the latest info and update training without manual efforts. Code can connect to other apps via API allowing AI to enhance workflows across departments. Avoid integration hassles or changes breaking links to external providers.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;building-custom-interfaces-experiences&quot;&gt;Building Custom Interfaces &amp;amp; Experiences&lt;a class=&quot;zola-anchor&quot; href=&quot;#building-custom-interfaces-experiences&quot; aria-label=&quot;Anchor link for: building-custom-interfaces-experiences&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The client interface heavily impacts perceived AI quality by employees and customers. Rented APIs mean being stuck with vanilla experiences, but self-hosted options empower developing bespoke tools aligned to your brand.&lt;&#x2F;p&gt;
&lt;p&gt;Beyond skins and themes, you can tailor interactions to specific audiences within your organization. Data scientists may prefer Python notebooks while business analysts appreciate no-code web UIs. White label the output for customer facing applications. The sky&#x27;s limit when controlling both model and interface.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;innovating-new-products-services&quot;&gt;Innovating New Products &amp;amp; Services&lt;a class=&quot;zola-anchor&quot; href=&quot;#innovating-new-products-services&quot; aria-label=&quot;Anchor link for: innovating-new-products-services&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Owning the full AI stack fosters launching entirely new solutions. As examples, AI could personalized customer marketing content, analyze warranty claims and highlight areas for engineering improvements, or bootstrap insurance policy document review.&lt;&#x2F;p&gt;
&lt;p&gt;With the flexibility to evolve models and build around their capabilities, you&#x27;re only limited by imagination rather than restrictions imposed by external platforms. Build a strategic advantage by doubling down on proprietary efforts rivals can’t replicate relying on vendors.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;As we&#x27;ve explored across critical areas like flexibility, security, costs, and customization, self-hosting your own large language model for private use provides transformational advantages compared to reliance on external AI rental services.&lt;&#x2F;p&gt;
&lt;p&gt;By retaining direct control over your AI assistant within your own infrastructure, you gain unmatched ability to customize to your specific data, workflows, and evolving needs. Keeping processing on-premise together with the sensitive information used for training also slashes compliance risks and data privacy concerns.&lt;&#x2F;p&gt;
&lt;p&gt;And while upfront investment is required, over the long-term self-hosted models can significantly reduce expenses versus open-ended API subscriptions. All while better leverage of existing systems and multiplying accuracy through continual learning compound benefits.&lt;&#x2F;p&gt;
&lt;p&gt;I encourage you to seriously pursue bringing customized AI capabilities in-house. Start small if needed (See &lt;a href=&quot;https:&#x2F;&#x2F;ntn888.github.io&#x2F;blog&#x2F;llama-howto&#x2F;&quot;&gt;this post&lt;&#x2F;a&gt; for inspiration!), but the long-term dividends across security, costs, and performance make owning your AI absolutely worthwhile. Just be careful as it can become highly addictive once tuned to your goals!&lt;&#x2F;p&gt;
&lt;p&gt;The essential next step is evaluating options matching deployment and training requirements, but with the right vision the loops of constant improvement can truly make a private AI assistant feel like your devoted partner in innovation. Here&#x27;s to a more customized, controlled AI future.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Zephyr-7b-beta: Or how to run a ChatGPT alternative on an 8GB Graphics Card</title>
		<published>2023-11-14T00:27:00+00:00</published>
		<updated>2023-11-14T00:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/llama-howto/" type="text/html"/>
		<id>https://ntn888.github.io/blog/llama-howto/</id>
		<content type="html">&lt;p&gt;Recently we have seen the rise of the small LLMs. As discussed in &lt;a href=&quot;https:&#x2F;&#x2F;ntn888.github.io&#x2F;blog&#x2F;llama2&#x2F;&quot;&gt;this article&lt;&#x2F;a&gt; the &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;huggingface.co&#x2F;TheBloke&#x2F;zephyr-7B-beta-GGUF&quot;&gt;Zephyr-7b-beta&lt;&#x2F;a&gt; model is making ground for it&#x27;s impressive results. Here we shall see how to run the model locally on your system, all you need is a GPU with 8GB VRAM. My &lt;a href=&quot;https:&#x2F;&#x2F;ntn888.github.io&#x2F;blog&#x2F;x99-motherboards&#x2F;&quot;&gt;workstation&lt;&#x2F;a&gt; sports an AMD RX 580 card that is ideally suited for this task! While this guide is targetted towards AMD cards note that you can run it on NVIDIA as well. On my system it runs at speed around 7-9 tokens&#x2F;sec.&lt;&#x2F;p&gt;
&lt;p&gt;We will use the &#x27;Text generation web UI&#x27; &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;oobabooga&#x2F;text-generation-webui&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;oobabooga&#x2F;text-generation-webui&lt;&#x2F;a&gt; as our client. This is the software that helps us to host and use the LLM model.&lt;&#x2F;p&gt;
&lt;p&gt;First we need to install what is called ROCm. This is a library that works on top of the AMD GPU driver. The following steps assume you&#x27;re running POP-OS 22.04. We need to install version 5.6 (as of Nov 2023). The requirement is dictated by &#x27;Text generation web UI&#x27;, so see its documentation for the exact version you need in future. The following has been exctracted from &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;are-we-gfx1100-yet.github.io&#x2F;post&#x2F;a1111-webui&#x2F;#prerequisites&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;# install the amdgpu driver with rocm support
curl -O https:&#x2F;&#x2F;repo.radeon.com&#x2F;amdgpu-install&#x2F;5.6&#x2F;ubuntu&#x2F;jammy&#x2F;amdgpu-install_5.6.50600-1_all.deb
sudo dpkg -i amdgpu-install_5.6.50600-1_all.deb
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now edit the install script at &lt;code&gt;&#x2F;usr&#x2F;bin&#x2F;amdgpu-install&lt;&#x2F;code&gt; via a text editor and add &lt;code&gt;|pop&lt;&#x2F;code&gt; next to &lt;code&gt;ubuntu&lt;&#x2F;code&gt; like so:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;case &amp;quot;$ID&amp;quot; in
ubuntu|linuxmint|debian|pop)
    ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;# opencl might cause issues later, so skip it unless you need it
sudo amdgpu-install --usecase=graphics,rocm --no-dkms

# grant current user the access to gpu devices
sudo usermod -aG video $USER
sudo usermod -aG render $USER

# reboot is needed to make both driver and user group take effect
sudo reboot
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;You may wish to install &lt;code&gt;radeontop&lt;&#x2F;code&gt;, an app that&#x27;ll give various deets of the running status of the GPU. And run it alongside in another terminal while you prompt away.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Once ROCm is installed we can proceed with installing &#x27;Text generation web UI&#x27;.&lt;&#x2F;p&gt;
&lt;p&gt;First we need to set an environment variable:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;export ROCBLAS_TENSILE_LIBPATH=&#x2F;opt&#x2F;rocm&#x2F;lib&#x2F;rocblas&#x2F;library&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;You&#x27;ll have to run the above evertime before you invoke the &#x27;Text generation web UI&#x27; with &lt;code&gt;.&#x2F;start_linux.sh&lt;&#x2F;code&gt; or the app will crash when you load in your model.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Finally:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;git clone https:&#x2F;&#x2F;github.com&#x2F;oobabooga&#x2F;text-generation-webui.git
cd text-generation-webui
.&#x2F;start_linux.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That last command is a convenient script that on first run does the actual installation. It will create the directory &lt;code&gt;installer_files&lt;&#x2F;code&gt;. When prompted for the type of installation enter &lt;code&gt;B&lt;&#x2F;code&gt; for AMD GPU.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;ll download a couple of GBs and take some time.&lt;&#x2F;p&gt;
&lt;p&gt;Once finished open up the displayed link in your browser. You&#x27;ll be greeted with the &#x27;Text generation web UI&#x27; interface.&lt;&#x2F;p&gt;
&lt;p&gt;The settings will be easily overwhelming at first with lots of variables but I&#x27;m going to present here what worked on my 8GB AMD card!&lt;&#x2F;p&gt;
&lt;p&gt;Obviously first we need to download a model. Go to the &lt;code&gt;Model&lt;&#x2F;code&gt; tab and enter &lt;code&gt;TheBloke&#x2F;zephyr-7B-beta-GGUF&lt;&#x2F;code&gt; in the &lt;code&gt;Download Model&lt;&#x2F;code&gt; field. In the second &lt;code&gt;File name&lt;&#x2F;code&gt; box enter: &lt;code&gt;zephyr-7b-beta.Q4_K_M.gguf&lt;&#x2F;code&gt; which is recommended for 8GB cards. You can see details in the HuggingFace card &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;huggingface.co&#x2F;TheBloke&#x2F;zephyr-7B-beta-GGUF&quot;&gt;page&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Once it&#x27;s downloaded push the reload button next to the model name &lt;code&gt;blank&lt;&#x2F;code&gt; on the top and then select the model name. Then set the following options below:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;n-gpu-layers: anything above 35
n_ctx: 8000
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;n-gpu-layers&lt;&#x2F;code&gt; is a parameter you get when loading the GGUF models; which can scale between the GPU and CPU as you see fit! So using this parameter you can select, for example, 32 out of the 35 (the max for our &lt;code&gt;zephyr-7b-beta&lt;&#x2F;code&gt; model) to be offloaded to the GPU by selecting 32 here.&lt;&#x2F;p&gt;
&lt;p&gt;Finally press load. This will take some time. Then goto &lt;code&gt;Parameters&lt;&#x2F;code&gt; tab. Under &lt;code&gt;Generation&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;max_new_tokens: 2000
top_p: 0.95
top_k: 40
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Under &lt;code&gt;Instruction Template&lt;&#x2F;code&gt;: Choose &lt;code&gt;ChatML&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s it for settings.&lt;&#x2F;p&gt;
&lt;p&gt;Now go to &lt;code&gt;Default&lt;&#x2F;code&gt; tab and paste the following prompt:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;lt;|system|&amp;gt;
You are a creative writing assistant
&amp;lt;|user|&amp;gt;
&amp;lt;your prompt here&amp;gt;
&amp;lt;|assistant|&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Substitue it with your prompt and have fun!&lt;&#x2F;p&gt;
&lt;p&gt;Zephyr-7b brings the excitement of a capable model into the hands of affordable 8Gig GPU cards. Very quickly you&#x27;ll be amazed at the results, although there is some telling difference from the present benchmark - GPT-4!&lt;&#x2F;p&gt;
&lt;p&gt;But admittedly it is a fast moving landscape. There&#x27;s new strides being made &lt;em&gt;every single day&lt;&#x2F;em&gt;. And many claim it wouldn&#x27;t be the distant future that a 7b model easily outperfoms the current performance of GPT-4! And I can&#x27;t wait for that day to self-host it on my humble 8Gig card.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;UPDATE: I installed Ubuntu Server 22.04 on the PC and converted it into a server (and access textgen web ui remotely). Ubuntu being fully supported by AMD; you can omit the &lt;code&gt;--no-dkms&lt;&#x2F;code&gt; flag above to install the kernel modules. With this I&#x27;ve seen a significant improvement in responsiveness. It starts spitting out the text almost instantly (similar to my experiences with vast.ai instances) and get a consistently higher tokens&#x2F;s. Therefore I do not recommend a POP! OS system.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Checking out a free opensource ChatGPT alternative: Zephry-7b-Beta</title>
		<published>2023-11-12T22:27:00+00:00</published>
		<updated>2023-11-12T22:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/llama2/" type="text/html"/>
		<id>https://ntn888.github.io/blog/llama2/</id>
		<content type="html">&lt;p&gt;In a previous &lt;a href=&quot;https:&#x2F;&#x2F;ntn888.github.io&#x2F;blog&#x2F;llama&#x2F;&quot;&gt;article&lt;&#x2F;a&gt; we reviewed the free LLM Llama2, the 70b version. This is prohibitively large to run on your local machines as it requires around 48GB of GPU VRAM. I instead tried the 13b version but it was still too large for &lt;a href=&quot;https:&#x2F;&#x2F;ntn888.github.io&#x2F;blog&#x2F;x99-motherboards&#x2F;&quot;&gt;my GPU&lt;&#x2F;a&gt; with only 8Gigs of VRAM. So ran it on my CPU instead and it was painfully slow.. Here we will look at a viable alternative: Zephry-7b-Beta, the latest sensation in the world of natural language processing!&lt;&#x2F;p&gt;
&lt;p&gt;Zephry-7b-Beta is a groundbreaking large language model that has been capturing the attention of the scientific community due to its exceptional abilities in natural language processing, despite being a relatively small model. This innovative language model, developed by the research wing of &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;huggingface.co&#x2F;&quot;&gt;HuggingFace&lt;&#x2F;a&gt;, boasts impressive feats that challenge the traditional notion that larger models are better. Although Zephry-7b-Beta has just over 7 billion parameters, in many benchmarks, outperforms larger models like GPT-3 and BERT-Large, which have more than 175 billion parameters each. This remarkable performance has been attributed to the model&#x27;s unique architecture and training methods, which have allowed it to achieve a balance between accuracy and efficiency, making it an ideal candidate for real-world applications where resource constraints can pose a challenge. As in the case of hosting on a home PC.&lt;&#x2F;p&gt;
&lt;p&gt;It gives out an impressive interactive experience. And I found that it resembled GPT4 more than the Llama 2 model.&lt;&#x2F;p&gt;
&lt;p&gt;I first sought to install it locally as this is reported to run comfortably on 8G GPUs. So I downloaded the prerequisite library ROCm (for driving the AMD GPU), and then installed &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;oobabooga&#x2F;text-generation-webui&quot;&gt;&lt;code&gt;Text generation web UI&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. Downloaded the LLM model from &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;huggingface.co&#x2F;TheBloke&#x2F;zephyr-7B-beta-GGUF&quot;&gt;HuggingFace site&lt;&#x2F;a&gt;. Some of the troubleshooting steps I took can be seen in this &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;oobabooga&#x2F;text-generation-webui&#x2F;issues&#x2F;4558&quot;&gt;thread&lt;&#x2F;a&gt;. But again it was too slow to be usable.. Maybe I&#x27;m doing something wrong&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Then I resorted to hosting on a cloud GPU provider. I made an account at &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;vast.ai&#x2F;&quot;&gt;vast.ai&lt;&#x2F;a&gt; (these folks being the cheapest). I made an RTX A6000 (48GB VRAM) instance with 8G disk space. Downloaded the same model image (the Q5_K_M variant). Then I made parameter choices in &lt;code&gt;Text generation web UI&lt;&#x2F;code&gt; (not necessarily optimum, but sure something to play around with and test):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Set Generation&#x2F;Preset to debug-deterministic&lt;&#x2F;li&gt;
&lt;li&gt;Increase max new tokens to 2000&lt;&#x2F;li&gt;
&lt;li&gt;ChatML for Instruction template&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Also remember to set &lt;code&gt;n-gpu-layers&lt;&#x2F;code&gt; to over 35 for this gguf model when loading it.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are plenty of Youtube videos on how to use &lt;code&gt;Text generation web UI&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;And used the following prompt (copied from the model page and tweaked):&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;lt;|system|&amp;gt;
You are a creative writing assistant
&amp;lt;|user|&amp;gt;
&amp;lt;your prompt here&amp;gt;
&amp;lt;|assistant|&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I have to say.. The results were snappy. And like I said earlier the responses were impressive.&lt;&#x2F;p&gt;
&lt;p&gt;Although I have been using the Default&#x2F;Notebook input method of the &lt;code&gt;Text generation web UI&lt;&#x2F;code&gt;, I&#x27;m looking to study the chat prompt. And see if it gives a more fluid interactive experience.&lt;&#x2F;p&gt;
&lt;p&gt;This has been my log of trying out a free new ChatGPT alternative. Although I didn&#x27;t know why it didn&#x27;t run well on my local system since this is most suited for this task. Let me know what your goto model is these days!&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;I&#x27;ve finally managed to run it. See &lt;a href=&quot;https:&#x2F;&#x2F;ntn888.github.io&#x2F;blog&#x2F;llama-howto&#x2F;&quot;&gt;this post&lt;&#x2F;a&gt; for updated info.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Introduction to AliExpress for the DIY Enthusiast</title>
		<published>2023-11-10T10:27:00+00:00</published>
		<updated>2023-11-10T10:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/aliexpress-intro/" type="text/html"/>
		<id>https://ntn888.github.io/blog/aliexpress-intro/</id>
		<content type="html">&lt;p&gt;Hey there, DIY enthusiasts and crafty creators! If you’ve got a knack for tinkering and love a good deal, let me introduce you to your next favorite haunt: &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.aliexpress.com&#x2F;&quot;&gt;AliExpress&lt;&#x2F;a&gt;. Items are sourced directly from Chinese sellers, and for us Makers this means they originate from Shenzen more often than not. Another contrast with ebay is that all the listings are &lt;em&gt;buy it now&lt;&#x2F;em&gt; only.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;What&#x27;s So Great About AliExpress for DIYers?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;AliExpress is like an infinite toolbox for the DIY enthusiast. It’s crammed with components, from resistors to robotics, at prices that won’t have you eating ramen for a month (unless that’s your project). Need a tiny screw for your drone? A vintage-looking LED for that retro radio? AliExpress has it all, and then some.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Navigating AliExpress&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;AliExpress&#x27;s interface is pretty straightforward. Start with a search for your desired component or tool, and then dive into the rabbit hole of options. Use filters to narrow down to the specifics like price range, free shipping, and more.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Tips and Precautions for the Savvy Shopper&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Read Reviews and Ratings&lt;&#x2F;strong&gt;: These are your compass in the vast sea of products. They can guide you to quality finds and steer you clear of duds.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Check Seller Credentials&lt;&#x2F;strong&gt;: Look for sellers with high ratings and a long history of transactions. They’re generally the ones who have proven their reliability.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Beware of Too-Good-To-Be-True Deals&lt;&#x2F;strong&gt;: If it looks like a steal, it might just be one—literally. So if you find a Raspberry Pi for the price of a real pie, think twice.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Understand the Specs&lt;&#x2F;strong&gt;: Make sure you understand the specifications of what you&#x27;re buying. That servo motor might look like it fits your needs, but double-check the torque and speed ratings.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;strong&gt;The Long Wait: Shipping Timelines on AliExpress&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Here’s the kicker: patience is not just a virtue on AliExpress; it’s a necessity. Shipping can take anywhere from a few weeks to a couple of months. So, if you&#x27;re planning to build that LED cube for a party next week, you might want to look locally instead.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion: Is AliExpress Worth It for DIYers?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In a nutshell, absolutely! AliExpress is a DIY haven. Yes, you’ll wait longer for shipping, and yes, you need to do your homework on what you’re buying. But the variety is unbeatable, the prices are right, and the sense of community in the review sections can be genuinely heartwarming. So, go forth and create – AliExpress has your back.&lt;&#x2F;p&gt;
&lt;p&gt;So, get those creative gears turning and start browsing! With a bit of savvy shopping and some strategic planning, AliExpress can be a goldmine for the DIY electronics hobbyist. Happy inventing!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Mastering the Llama: Unleashing the Power of Self-Hosted AI with Llama GPT</title>
		<published>2023-11-10T03:27:00+00:00</published>
		<updated>2023-11-10T03:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/llama/" type="text/html"/>
		<id>https://ntn888.github.io/blog/llama/</id>
		<content type="html">&lt;p&gt;In the vibrant realm of artificial intelligence and machine learning, the democratization of technology has been a game-changer. The latest buzz in the tech community is about &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;getumbrel&#x2F;llama-gpt&quot;&gt;Llama GPT&lt;&#x2F;a&gt;, a free, open-source alternative to ChatGPT that enthusiasts can self-host. For those of us who relish the control and customization that comes with running software on our own machines, Llama GPT is like a beacon in the AI space.&lt;&#x2F;p&gt;
&lt;p&gt;I recently decided to bring Llama GPT into my personal fold. There’s something incredibly satisfying about hosting such powerful technology locally. Llama GPT offers a range of model sizes to cater to different needs and capacities, and I opted for the 13B version, with a model size of roughly 7GB.&lt;&#x2F;p&gt;
&lt;p&gt;The prerequisite for running Llama GPT on Linux is Docker, which aligns perfectly with the setup on my Intel Xeon E5 2670v3-powered workstation. As I’ve shared in a previous &lt;a href=&quot;https:&#x2F;&#x2F;ntn888.github.io&#x2F;blog&#x2F;x99-motherboards&#x2F;&quot;&gt;blog post&lt;&#x2F;a&gt;, my system sports 12 cores and 24 threads, a configuration that one would presume quite capable of handling a large language model.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;llama-gpt-pc.resized.png&quot; alt=&quot;Llama logo on PC&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;However, my initial enthusiasm met with a challenge. The response times were sluggish, averaging around a minute per response. This was a stark contrast to the snappy interactions I&#x27;ve had with the online ChatGPT.&lt;&#x2F;p&gt;
&lt;p&gt;Quality-wise, the responses from the 13B model of Llama GPT didn&#x27;t quite measure up to the standards set by GPT-4, which wasn&#x27;t entirely surprising. The 13B model is a mid-tier offering, and I hadn&#x27;t sprung for the massive 70B model, which requires a daunting 41GB of system RAM.&lt;&#x2F;p&gt;
&lt;p&gt;In search of a benchmark, I stumbled upon a free &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;stablediffusion.fr&#x2F;llama2&quot;&gt;online version&lt;&#x2F;a&gt; of the 70B model. However, this service appeared to have a cap on the number of words per interaction, which made a head-to-head comparison with GPT-4 challenging.&lt;&#x2F;p&gt;
&lt;p&gt;This experience got me thinking about the trade-offs between self-hosted and cloud-based AI models. Self-hosting offers several advantages, like data privacy, no API costs, and the freedom to tweak the system to your liking. But it also comes with its own set of challenges, such as the need for significant computational resources and the potential for slower response times, as I learned firsthand.&lt;&#x2F;p&gt;
&lt;p&gt;To give you a better idea, running a 13B model like Llama GPT is no small feat. It requires not only a powerful processor but also a substantial amount of RAM. While my Xeon processor is no slouch, AI model inference speed depends heavily on parallel processing capabilities, something that&#x27;s inherently optimized in cloud-based solutions like ChatGPT, which run on specialized hardware designed for high-performance computing tasks.&lt;&#x2F;p&gt;
&lt;p&gt;Furthermore, the sheer size of these models and the resources they require to run smoothly means that self-hosting is often not as cost-effective or energy-efficient as using a cloud service. Cloud providers can leverage economies of scale, deploying thousands of optimized processors to serve millions of users, which individual self-hosters simply can&#x27;t match.&lt;&#x2F;p&gt;
&lt;p&gt;Despite these hurdles, the allure of a self-hosted AI model remains. For hobbyists and tinkerers, it&#x27;s an exciting prospect to have your own AI that you can interrogate and interact with on your terms, without sending data across the internet. It&#x27;s a sandbox for experimentation and learning that aligns with the ethos of DIY and hands-on discovery.&lt;&#x2F;p&gt;
&lt;p&gt;But it&#x27;s essential to manage expectations. As of now, self-hosted AI models like Llama GPT serve more as educational tools and proofs of concept rather than competitors to established cloud-based services. They offer a glimpse into the inner workings of language models and allow enthusiasts to experiment with AI on their terms.&lt;&#x2F;p&gt;
&lt;p&gt;To wrap up, while my experiments with Llama GPT may not have delivered the speed and quality of ChatGPT, they&#x27;ve provided invaluable insights into the capabilities and limitations of self-hosting large-scale AI models. For those in the embedded development and IoT community, it&#x27;s a reminder of the exciting possibilities and the practical considerations that come with the territory of cutting-edge tech. It’s a balancing act between the thrill of self-hosting and the performance of cloud-based services—a decision each of us in the community will weigh based on our individual needs and curiosity.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>First project in RIOT-OS: OLED</title>
		<published>2023-11-10T01:27:00+00:00</published>
		<updated>2023-11-10T01:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/riot-oled/" type="text/html"/>
		<id>https://ntn888.github.io/blog/riot-oled/</id>
		<content type="html">&lt;p&gt;Today, we&#x27;re diving into a nifty project that&#x27;s as exciting as it is educational. We&#x27;re going to use the STM32F103C8 &amp;quot;Blue Pill&amp;quot; microcontroller and Riot-OS to drive an SSD1306 I2C OLED module – and trust me, it&#x27;s going to be a blast!&lt;&#x2F;p&gt;
&lt;p&gt;First off, for those new to the playground, let&#x27;s give a quick intro to our main characters. The STM32F103C8, affectionately known as the &amp;quot;Blue Pill,&amp;quot; is a seriously cost-effective microcontroller that packs a punch with an ARM Cortex-M3 processor. Then there&#x27;s Riot-OS, an open-source operating system that&#x27;s optimized for IoT devices. It&#x27;s like the life of the party for microcontrollers, giving them the software needed to interact with the world. And the SSD1306 is a tiny OLED display that’s so easy to get along with; it communicates over I2C, which means we can have a nice little chat with just a couple of wires.&lt;&#x2F;p&gt;
&lt;p&gt;So, let&#x27;s get to the meat and potatoes.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Materials Needed:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;STM32F103C8 &amp;quot;Blue Pill&amp;quot; microcontroller&lt;&#x2F;li&gt;
&lt;li&gt;SSD1306 I2C OLED display&lt;&#x2F;li&gt;
&lt;li&gt;Connecting wires&lt;&#x2F;li&gt;
&lt;li&gt;USB to Serial converter for programming&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Step 1: Setting Up the Environment&lt;&#x2F;strong&gt;
Before we start, ensure you have a programming environment set up for the STM32F103C8. You&#x27;ll need the ARM GCC compiler and OpenOCD for flashing. For Riot-OS, clone the repository from GitHub and get the build environment ready.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Step 2: Wiring Up&lt;&#x2F;strong&gt;
Connect your SSD1306 display to the Blue Pill. The display needs four connections:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;VCC to 3.3V&lt;&#x2F;li&gt;
&lt;li&gt;GND to GND&lt;&#x2F;li&gt;
&lt;li&gt;SCL to B6 (or whichever I2C clock pin you prefer)&lt;&#x2F;li&gt;
&lt;li&gt;SDA to B7 (or your chosen I2C data pin)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Step 3: Bootstrapping Riot-OS&lt;&#x2F;strong&gt;
Navigate to the Riot-OS base directory and create a new project for our Blue Pill. You can find a board configuration for the Blue Pill in Riot&#x27;s boards directory if you don&#x27;t feel like starting from scratch.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Step 4: Writing The Code&lt;&#x2F;strong&gt;
Here&#x27;s a simple skeleton to start with in your &lt;code&gt;main.c&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c z-code&quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-preprocessor z-include z-c&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-include z-c&quot;&gt;#include&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-other z-lt-gt z-include z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;stdio.h&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-preprocessor z-include z-c&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-include z-c&quot;&gt;#include&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-include z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;xtimer.h&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-preprocessor z-include z-c&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-include z-c&quot;&gt;#include&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-include z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;periph_conf.h&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-preprocessor z-include z-c&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-include z-c&quot;&gt;#include&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-include z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;periph&#x2F;i2c.h&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-preprocessor z-include z-c&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-include z-c&quot;&gt;#include&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-include z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;ssd1306.h&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-preprocessor z-include z-c&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-include z-c&quot;&gt;#include&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-include z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;ssd1306_params.h&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;
&lt;span class=&quot;z-storage z-type z-c&quot;&gt;int&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-c&quot;&gt;main&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-storage z-type z-c&quot;&gt;void&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;
    &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-support z-function z-C99 z-c&quot;&gt;puts&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;STM32 + SSD1306 OLED screen with RIOT&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;

    &lt;span class=&quot;z-comment z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;&#x2F;*&lt;&#x2F;span&gt; Initialize the OLED display &lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;*&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    ssd1306_t dev&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;ssd1306_init&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;dev&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;ssd1306_params&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;!=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-support z-function z-C99 z-c&quot;&gt;puts&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Initialization failed&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-keyword z-control z-flow z-return z-c&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;ssd1306_set_contrast&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;dev&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-hexadecimal z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-numeric z-base z-c&quot;&gt;0x&lt;&#x2F;span&gt;FF&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-double-slash z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Max contrast
&lt;&#x2F;span&gt;    &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;ssd1306_display_on&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;dev&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-c&quot;&gt;true&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;

    &lt;span class=&quot;z-comment z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;&#x2F;*&lt;&#x2F;span&gt; Display some text on the screen &lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;*&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;ssd1306_write_string&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;dev&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Hello, IoT World!&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;

    &lt;span class=&quot;z-keyword z-control z-c&quot;&gt;while&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-comment z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;&#x2F;*&lt;&#x2F;span&gt; You could add some code here to update the display &lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;*&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;xtimer_sleep&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

    &lt;span class=&quot;z-keyword z-control z-flow z-return z-c&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Step 5: Building and Flashing&lt;&#x2F;strong&gt;
To compile and flash your code to the Blue Pill, use the following commands from your project&#x27;s directory:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; class=&quot;language-shell z-code&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;make BOARD=bluepill flash
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Assuming all goes well, you should see your &amp;quot;Hello, IoT World!&amp;quot; message on the display.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;blue-pill_riot_oled.resized.png&quot; alt=&quot;Printout OLED result&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Step 6: Experimenting&lt;&#x2F;strong&gt;
Now that you&#x27;ve got the basics down, why not play around with the display? Riot-OS has a rich set of libraries for graphics, so you can draw shapes, display sensor data, or even create a mini game on your OLED.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Step 7: Debugging&lt;&#x2F;strong&gt;
If you run into any issues, remember: debugging is half the fun in embedded systems. Check your connections, ensure the I2C addresses match, and use the &lt;code&gt;make term&lt;&#x2F;code&gt; command to peek into the logs.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Wrapping Up&lt;&#x2F;strong&gt;
You&#x27;ve just made a microcontroller communicate with an OLED display, and that&#x27;s pretty darn cool. The Blue Pill and Riot-OS are like peanut butter and jelly – they just work beautifully together.&lt;&#x2F;p&gt;
&lt;p&gt;Remember, the key to mastery is experimentation. So, tweak the contrast, flip the display, scroll text, and see what your Blue Pill can do. With the SSD1306, your Blue Pill isn’t just crunching numbers; it’s showing off its results with style.&lt;&#x2F;p&gt;
&lt;p&gt;And there you have it, folks – a simple, yet thrilling journey through embedded development with a dash of IoT. Keep tinkering, keep learning, and most importantly, keep having fun. Until next time, may your connections be stable and your code bug-free!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Building an affordable electronics lab for hobbyists</title>
		<published>2023-11-09T20:27:00+00:00</published>
		<updated>2023-11-09T20:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/building-lab/" type="text/html"/>
		<id>https://ntn888.github.io/blog/building-lab/</id>
		<content type="html">&lt;p&gt;Hey fellow tinkerers and circuit wizards!&lt;&#x2F;p&gt;
&lt;p&gt;In this post, we&#x27;re diving into one of the most exhilarating journeys you can embark on from the comfort of your own home — building your very own electronics lab! And guess what? You don&#x27;t need a treasure chest to set it up. With a few savvy picks from AliExpress.com, you can get the essentials without breaking the bank. Let&#x27;s get charged up and start this electrifying adventure!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;electronics_lab.jpg&quot; alt=&quot;example project image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Laying the Foundation with an Electronics Starter Kit&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;First up, the heart of your lab: an electronics starter kit. This isn&#x27;t just a box of components; it&#x27;s the seed from which countless projects will grow. AliExpress has a plethora of options, but look for a kit that&#x27;s brimming with resistors, capacitors, LEDs, and transistors. Don&#x27;t skimp on variety here — the more components, the merrier. Make sure it includes a breadboard, jumper wires, and maybe even a small project book to spark your creativity.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;The Multimeter: Swiss Army Knife of Embedded Hobbyists&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We evaluated various options in &lt;a href=&quot;https:&#x2F;&#x2F;ntn888.github.io&#x2F;blog&#x2F;multimeters&#x2F;&quot;&gt;this post&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;The Power to Innovate: Basic Lab Power Supply&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Next, we need a trusty sidekick: a basic lab power supply. You don&#x27;t need a high-end model for starter projects. A simple adjustable power supply with a range of 0-30 volts and 0-5 amps should suffice. This will let you power almost any project you dream up. Some supplies come with nifty features like current limiting, short circuit protection, and digital displays — these are nice-to-have features that can prevent your projects from going up in smoke.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Crucial Beats: The Cheap Signal Generator&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Now, let&#x27;s talk about setting the tempo with a signal generator. For beginners and budget-conscious builders, a simple function generator from AliExpress will do the trick. Look for one that can dish out square, sine, and triangular waves. Frequency range is key; make sure it can go up to at least 1MHz. This little gizmo is like the metronome for your circuits, essential for testing filters, amplifiers, and so much more.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Microcontrollers: The Brains of the Operation&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Microcontrollers are where things get really juicy. They&#x27;re the brains of your lab, the tiny maestros conducting your electronic symphonies. You don&#x27;t need the latest and greatest; a few noteworthy contenders can be had for a song. The classics like Arduino Uno or Nano are always a good start (if you go the Arduino route)— user-friendly for beginners and versatile enough for advanced projects. But in this blog we aren&#x27;t inclined towards Arduino.. See &lt;a href=&quot;https:&#x2F;&#x2F;ntn888.github.io&#x2F;blog&#x2F;mcu-selection-guide&#x2F;&quot;&gt;this post&lt;&#x2F;a&gt; for further breakdown.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Storing Your Electronic Treasures&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Organization is key to a functioning lab. You can snag component organizers from AliExpress for less than the cost of a fancy coffee. Keep those resistors, capacitors, and tiny ICs in check, and you&#x27;ll save yourself from the headache of hunting for a 10k resistor in a mountain of electronic confetti.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Soldering: The Alchemy of Electronics&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;No lab is complete without a decent soldering iron. You don&#x27;t need a station that could solder a satellite; a basic adjustable temperature iron will serve you well. And a tip on tips: always use a chisel tip; no matter how small the component. Fine tips are not useful since they don&#x27;t act as a good heat reservoir. For SOIC&#x2F;SMD soldering lookup on &lt;em&gt;drag soldering&lt;&#x2F;em&gt;. And dont forget the flux.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Illumination: Because You Can&#x27;t Solder What You Can&#x27;t See&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Don&#x27;t forget about lighting! A well-lit workspace is crucial. AliExpress offers a variety of LED desk lamps that won&#x27;t cast a shadow over your budget. Consider one with a magnifying glass; it&#x27;s like having an eagle-eyed assistant.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Learning Resources: Knowledge is Power&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Lastly, the internet is an ocean of resources, but a couple of well-chosen books can be your anchors. Get on Amazon, look for beginner&#x27;s guides or project books that resonate with your interests, whether it&#x27;s robotics, home automation, or something else that gets your electrons excited. A few free copy-left books to learn circuit theory was discussed &lt;a href=&quot;https:&#x2F;&#x2F;ntn888.github.io&#x2F;blog&#x2F;analog-filters-primer&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Safety First!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Before I sign off, a word to the wise: safety is paramount. Always double-check connections before powering up, never work on a live circuit, and invest in a pair of safety goggles. Your future self will thank you.&lt;&#x2F;p&gt;
&lt;p&gt;Building an electronics lab is like piecing together your very own technical wonderland. It&#x27;s a place where imagination meets reality, where learning meets doing, and where the only limit is the scope of your curiosity. And the best part? It doesn&#x27;t have to cost an arm and a leg. With these tips and AliExpress as your marketplace, you&#x27;re all set to wire up your world.&lt;&#x2F;p&gt;
&lt;p&gt;Stay charged, my friends, and happy building!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Lutris: The Linux Gaming Hero</title>
		<published>2023-11-09T17:27:00+00:00</published>
		<updated>2023-11-09T17:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/linux-gaming/" type="text/html"/>
		<id>https://ntn888.github.io/blog/linux-gaming/</id>
		<content type="html">&lt;p&gt;Hey there, fellow tech enthusiasts! Today, I&#x27;m taking a little detour from our usual DIY projects to dive into the exciting world of Linux gaming. Yeah, you heard me right – gaming on Linux is a thing, and it&#x27;s not just for tech wizards in their secret lairs. Diving into the realm of Linux gaming, we often find ourselves tangled in a web of emulators, Wine dependencies, and a barrage of terminal commands that can intimidate even the most ardent of enthusiasts. Enter &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;lutris.net&#x2F;&quot;&gt;Lutris&lt;&#x2F;a&gt;, the unsung hero of Linux gaming that has been quietly revolutionizing our gaming experiences over the past few years.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;lutis_gaming.resized.png&quot; alt=&quot;Tux gaming&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Now, if you&#x27;re like me, you might have witnessed the evolution of tooling and development environments in the embedded world. Well, the same winds of change have been blowing in the gaming sphere, especially for our Linux buddies. In the last decade, the progress has been nothing short of remarkable.&lt;&#x2F;p&gt;
&lt;p&gt;Gone are the days when Linux was just a powerhouse for servers and a playground for developers. It&#x27;s the dawning of a new era, where Linux doesn&#x27;t just mean business; it&#x27;s serious about play, too. Enter Lutris, a game changer (pun intended!) that&#x27;s been turbocharging the Linux gaming scene in recent years.&lt;&#x2F;p&gt;
&lt;p&gt;Lutris, in its essence, is an optimizer&#x27;s dream. It transforms the often labyrinthine task of game management into a streamlined, unified process. With Lutris, you&#x27;re not just running games; you&#x27;re curating an entire library with a tool that&#x27;s as versatile as a Swiss Army knife.&lt;&#x2F;p&gt;
&lt;p&gt;The beauty of Lutris lies in its simplicity. Installation scripts, courtesy of the community&#x27;s collective wisdom, are your roadmap to hassle-free gaming. These scripts are like the secret sauce that makes a good dish great—they handle the complexities of configuration so you can focus on what matters: the game itself.&lt;&#x2F;p&gt;
&lt;p&gt;So, what&#x27;s the deal with Lutris? Well, it&#x27;s a game manager, sure, but it&#x27;s also a treasure trove for tweaking and optimizing your gaming experience. It supports a plethora of games, including those Windows titles that never thought they&#x27;d see the light of a Linux desktop. With Lutris, you can manage game installations, customize settings, and even sync your game library across different platforms.&lt;&#x2F;p&gt;
&lt;p&gt;The underlying engine - &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.protondb.com&#x2F;&quot;&gt;Proton&lt;&#x2F;a&gt; stands as a crucial element in the realm of Linux gaming compatibility, developed by Valve Corporation. It functions as a compatibility layer, enabling the seamless execution of Windows games on the Linux operating system. Leveraging the power of Vulkan and other technologies, Proton strives to overcome the historical barrier between Windows-exclusive titles and the Linux platform. Under constant development, it incorporates optimizations and improvements to enhance compatibility with a wide array of games. With its integration into the Steam client, Proton has significantly expanded the gaming library accessible to Linux users, contributing to the ongoing efforts to establish Linux as a viable gaming platform. Its serious approach to delivering compatibility aligns with the industry&#x27;s shift towards broader inclusivity and accessibility in gaming.&lt;&#x2F;p&gt;
&lt;p&gt;From a technical standpoint, Lutris leverages compatibility layers like Wine and Proton to bridge the gap between Linux and Windows game libraries. It&#x27;s like having a translator that enables games written for one platform to speak the language of another. This technical wizardry is crucial for expanding the gaming catalog on Linux.&lt;&#x2F;p&gt;
&lt;p&gt;Now, let&#x27;s address the elephant in the room – running pirated games on Linux. In my experience Lutris does a better work of running these than the native Windows OS! Lutris has a handy &lt;em&gt;Install from EXE&lt;&#x2F;em&gt; option that&#x27;s handy just for this case. You just have to mount the download (if required) and point Lutris to the Setup executable. Easy! I use a separately partitioned instance of PoPOS and have lutris installed on it for my gaming needs. This is a way to declutter from my main PoPOS install for my dev environment needs. As installing games tend to be time intensive, I can leave the gaming partition alone when I upgrade&#x2F;reinstall the workstation one.&lt;&#x2F;p&gt;
&lt;p&gt;There you go! An overview of Lutris and its significant contribution to elevating the gaming experience on Linux. It’s a testament to what the open-source community can achieve, and a beacon for gamers looking to Linux as a viable gaming platform.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Unveiling the Swiss Army Knife of Embedded Hobbyists: The Multimeter</title>
		<published>2023-11-09T14:27:00+00:00</published>
		<updated>2023-11-09T14:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/multimeters/" type="text/html"/>
		<id>https://ntn888.github.io/blog/multimeters/</id>
		<content type="html">&lt;p&gt;Are you ready to embark on an exciting adventure through the unknown territories of electronic measurement? If so, get your toolkit handy and prepare to experience an unforgettable journey as we dive deep into the mysterious world of multimeters! In this tantalizing guide, we&#x27;ll explore a myriad of intriguing features, ground-breaking techniques, captivating personal experiences... and, of course, how they all fit together in making electronic measurements fun and hassle-free for both amateur enthusiasts and expert technicians alike. So buckle up, strap on your thinking cap, because it&#x27;s time to discover the true potential of our multimeter pals!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;multimeter_using.jpeg&quot; alt=&quot;Using a multimeter&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;key-features-and-specifications-of-multimeters&quot;&gt;Key Features and Specifications of Multimeters&lt;a class=&quot;zola-anchor&quot; href=&quot;#key-features-and-specifications-of-multimeters&quot; aria-label=&quot;Anchor link for: key-features-and-specifications-of-multimeters&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Now let&#x27;s discuss those vital functions you will find on a multimeter: Voltage mode measures AC or DC voltage (in volts) while Resistance (Ohm) measurement provides the basic information about electrical components in a circuit... but there’s more! Did you know that these devices can also measure other interesting parameters like capacitance, frequency, and even determine if two conductive points touch each other, thanks to its inductive range and continuity checker function? Fascinating, right?! ✨ Each feature has its significance - trust us on this one! We encourage you not only to understand their meaning but also how they operate with different types of components and setups.&lt;&#x2F;p&gt;
&lt;p&gt;Understanding the various measurements and features that a multimeter offers goes beyond technical knowledge – it enhances problem-solving abilities as well! Plus, knowing all this adds depth to your hobby&#x2F; profession and showcases competency at the workplace (impressive bonus points there!) Remember, these little guys are far more capable than we realize initially. So let&#x27;s unleash their full potential together!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;types-of-multimeters-from-analog-to-digital-modes&quot;&gt;Types of Multimeters: From Analog to Digital Modes&lt;a class=&quot;zola-anchor&quot; href=&quot;#types-of-multimeters-from-analog-to-digital-modes&quot; aria-label=&quot;Anchor link for: types-of-multimeters-from-analog-to-digital-modes&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s start with our trusty companion - the Analog Multimeter (or as your grandparents called them, &#x27;Old Skool Dudes&#x27;). These bad boys operate using needle and dial displays which some purists claim to provide a more analog sense (hmm... we thought they were just being picky). Despite that eccentricity, these veterans offer good readings at an affordable cost. The major drawback is they are relatively less precise due to user calibration error. However, they still remain popular for simple diagnostics and testing tasks.&lt;&#x2F;p&gt;
&lt;p&gt;In contrast stands our high-tech warrior - the Digital Multimeter (AKA &#x27;Smarty Pants Meter&#x27;), featuring easy-to-read LCD screens offering exact results! Thanks to its advanced circuitry, these digital beasts provide unmatched accuracy and a plethora of additional features including data storage, auto shutdown, overload protection... need I say more? 😍 It’s almost like having a personal assistant! Remember though, although they have cool bells &amp;amp; whistles, learning how to operate them takes time due to their intricate technology. But hey, who said getting smarter wasn&#x27;t worth some extra effort? &lt;&#x2F;p&gt;
&lt;h2 id=&quot;safety-measures-when-using-multimeters&quot;&gt;Safety Measures When Using Multimeters&lt;a class=&quot;zola-anchor&quot; href=&quot;#safety-measures-when-using-multimeters&quot; aria-label=&quot;Anchor link for: safety-measures-when-using-multimeters&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;re delving deeper into multimeter safety measures: everything from tips for dealing with live electricity to proper handling techniques and personal protective equipment (PPE) recommendations. Trust us, you don&#x27;t want to skimp on these crucial aspects! Remember when mamma said &#x27;safety first?!&#x27; Well, she was right all along.&lt;&#x2F;p&gt;
&lt;p&gt;When we say live electricity, we mean the type of power source you might find running through electrical wiring in your house or car - let&#x27;s call it Mr. High-Voltagie. It packs a serious punch and if not handled correctly can lead to some nasty surprises like shocks, fires, or even death (scary, right?). Therefore, always unplug the device you want to measure before connecting your meter... just think of it as polite electricity etiquette. 😄&lt;&#x2F;p&gt;
&lt;p&gt;As for proper handling techniques, one key rule to remember is NEVER TOUCH THE PROBE TIPS! Always touch the metal parts (cause who likes getting zapped anyways?). Another important reminder - never leave the probes connected to the power source while not in use because it could short circuit your equipment. Sounds complex, right? But trust us, with practice and attention, you&#x27;ll become an expert multimeter handler in no time! &lt;&#x2F;p&gt;
&lt;h2 id=&quot;common-use-cases-for-multimeters-auto-repair-renewable-energy-more&quot;&gt;Common Use Cases for Multimeters: Auto Repair, Renewable Energy, &amp;amp; More!&lt;a class=&quot;zola-anchor&quot; href=&quot;#common-use-cases-for-multimeters-auto-repair-renewable-energy-more&quot; aria-label=&quot;Anchor link for: common-use-cases-for-multimeters-auto-repair-renewable-energy-more&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;How about trying self-diagnosis during auto maintenance? I bet that&#x27;ll impress your mechanic (just don&#x27;t tell them, though). Multimeters come in handy for troubleshooting engine issues, electrical problems, and so much more. It’s like having a mini toolbox that tells you exactly what&#x27;s going wrong under the hood!&lt;&#x2F;p&gt;
&lt;p&gt;Another interesting use case? Renewable energy systems (e.g., solar panels) depend heavily on multimeters for maintenance and optimization. Ever thought about working towards saving Mother Earth while mastering new skills at the same time? There you go - your chance!&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s not forget those living off-grid or experimenters playing with alternative energy sources; trusty old multimeter can be a game-changer here, too. Monitoring power consumption, voltage fluctuation... it becomes so much easier and safer than trying to read your appliances by the light they emit (although I admit, that was a funny experiment!).&lt;&#x2F;p&gt;
&lt;p&gt;Remember folks - every use case brings unique challenges and opportunities; embrace them all, expand your skillset, grow as an electronic problem solver. The sky&#x27;s the limit when you&#x27;re armed with such a versatile tool like a multimeter!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tips-for-choosing-your-perfect-multimeter-features-cost-accuracy-matters&quot;&gt;Tips for Choosing Your Perfect Multimeter - Features, Cost, Accuracy Matters!&lt;a class=&quot;zola-anchor&quot; href=&quot;#tips-for-choosing-your-perfect-multimeter-features-cost-accuracy-matters&quot; aria-label=&quot;Anchor link for: tips-for-choosing-your-perfect-multimeter-features-cost-accuracy-matters&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Firstly, let’s talk about safety measures. Safety glasses on, mateys! If a device can detect voltages from zero to more than sixty volts while also telling you the amount of amps passing through - it should be at the top of your list, trust us. Why? Well, because playing with dangerous current levels without adequate protection is not cool... it&#x27;s downright reckless. ☠️⏱&lt;&#x2F;p&gt;
&lt;p&gt;Secondly, let’s consider cost factors. Some folks might opt for cheaper alternatives, believing they won&#x27;t use their multimeters much after initial setup. But guess what? Quality doesn’t come cheap! Spend a bit more on a sturdy tool that offers better reliability over time; it saves money in the long run and peace of mind (totally worth it, right?).&lt;&#x2F;p&gt;
&lt;p&gt;As for accuracy... if your readings don&#x27;t add up properly, well then things might get messy - think explosive experiments gone awry. Accuracy determines how precise those readings will be! Remember: no margin for error here, chummers! Look out for instruments capable of +&#x2F;- 0.5% tolerance rating; they provide you with high precision measurements needed during troubleshooting tasks or lab work - a real lifesaver when accuracy is crucial! 🔍💖&lt;&#x2F;p&gt;
&lt;p&gt;And finally, my hearty mates - never underestimate personal preferences! Everyone has their own preferred &#x27;kitchen gear&#x27;. You should feel at home using your multimeter; so look for one with user-friendly interface and design tailored to your hand preference or specific needs... after all, happy tools = happy you!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;popular-examples&quot;&gt;Popular Examples:&lt;a class=&quot;zola-anchor&quot; href=&quot;#popular-examples&quot; aria-label=&quot;Anchor link for: popular-examples&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Neoteck Pocket Digital Multimeter:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Compact and Affordable:&lt;&#x2F;em&gt; The Neoteck Pocket Multimeter packs essential features into a budget-friendly package, making it ideal for beginners and hobbyists looking for a reliable yet economical option.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;vi.aliexpress.com&#x2F;item&#x2F;1005005781615711.html&quot;&gt;Aneng DM850 Digital Multimeter&lt;&#x2F;a&gt;:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Budget-Friendly Excellence:&lt;&#x2F;em&gt; With accurate readings, essential functionalities, and a user-friendly design, it stands out as an excellent choice for hobbyists and beginners seeking reliability without breaking the bank.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Etekcity Digital Multimeter MSR-R500:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Budget-Friendly Precision:&lt;&#x2F;em&gt; With a focus on simplicity and accuracy, the Etekcity MSR-R500 is a cost-effective choice for those seeking basic functionalities without breaking the bank.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;AstroAI Digital Multimeter TRMS 6000 Counts:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Versatility on a Budget:&lt;&#x2F;em&gt; The AstroAI TRMS Multimeter provides an impressive range of features at an economical price point, catering to hobbyists who need reliability without splurging.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Tekpower TP8268 AC&#x2F;DC Auto&#x2F;Manual Range Digital Multimeter:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Affordable Auto-Range Functionality:&lt;&#x2F;em&gt; The Tekpower TP8268 offers auto-range capabilities without sacrificing affordability, making it a practical choice for users who want convenience on a budget.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;final-thoughts-unlock-the-potential-of-electronic-measurements&quot;&gt;Final Thoughts - Unlock the Potential of Electronic Measurements!&lt;a class=&quot;zola-anchor&quot; href=&quot;#final-thoughts-unlock-the-potential-of-electronic-measurements&quot; aria-label=&quot;Anchor link for: final-thoughts-unlock-the-potential-of-electronic-measurements&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Well now, we&#x27;ve reached the end of our marvelous multimeter adventure - how about one last hooray? 🎉✨ This wonderful world of electronic measurement surely holds more secrets waiting to be unraveled by you! With each key feature explored in detail and tips given on choosing the perfect meter for your specific needs, embarking on these explorations with a trusty multimeter is no longer a daunting task. Remember folks, knowing where your voltage or current values stand can save time during troubleshooting or help you understand more about different circuits - truly powerful stuff!&lt;&#x2F;p&gt;
&lt;p&gt;So what’s next? It&#x27;s simple: put your newfound knowledge into practice. You could start by conducting exciting DIY projects or even just trying to maintain and monitor everyday gadgets at home or work... imagine showing off to friends how precise their phone charger is performing, wouldn’t that be an ego boost?!&lt;&#x2F;p&gt;
&lt;p&gt;Here’s a little nugget of advice: invest in quality multi-meters since they&#x27;re more durable and offer better reliability over time. After all, good tools inspire creative problem-solving! And who knows? Maybe your name will someday be etched amongst tech legends who changed the world through their brilliant inventions.&lt;&#x2F;p&gt;
&lt;p&gt;Alrighty then adventurers, gear up for even more exciting embedded electronics encounters here on this blog. It&#x27;s been a blast exploring with you so far and we can&#x27;t wait to continue this adventure together! Onward to our next exciting chapter - stay safe, experiment, learn!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Building a Frugal Gaming PC</title>
		<published>2023-11-08T11:27:00+00:00</published>
		<updated>2023-11-08T11:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/x99-motherboards/" type="text/html"/>
		<id>https://ntn888.github.io/blog/x99-motherboards/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;Motherboards: The Refurbished x99 AliExpress Special&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Here we will talk about a new obsession of mine - refurbished LGA 2011v3 socket motherboards; paired up with used Intel E5 1600&#x2F;2700 series processor forms the basis for a cheap gaming system. These are sold in AliExpress as a [motherboard, CPU, RAM] combo for upwards of USD80 depending on the manufacturer.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s good information about these boards on the Russian site: &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;xeon-e5450.ru&#x2F;&quot;&gt;https:&#x2F;&#x2F;xeon-e5450.ru&#x2F;&lt;&#x2F;a&gt;. Just use &lt;em&gt;Translate Web Pages&lt;&#x2F;em&gt; plugin for your browser to auto-translate.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s also the Miyconst &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;miyconst&#x2F;Mi899&#x2F;blob&#x2F;master&#x2F;src&#x2F;Mi899&#x2F;README.md&quot;&gt;Youtube Channel&lt;&#x2F;a&gt; that provides good information.&lt;&#x2F;p&gt;
&lt;p&gt;When I purchased, I personally went for the QIYIDA AliExpress seller (the product had tons of good reviews). And received the &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;xeon-e5450.ru&#x2F;socket-2011-3&#x2F;x99h&#x2F;&quot;&gt;x99h v1.41 board&lt;&#x2F;a&gt;. According to Miyconst this is a poor board. Mainly due to having apparently only single DDR RAM channel.&lt;&#x2F;p&gt;
&lt;p&gt;I also noticed that the motherboard doesn&#x27;t support &lt;em&gt;Suspend&lt;&#x2F;em&gt; functionality. In the &lt;strong&gt;AHCI&lt;&#x2F;strong&gt; options in BIOS, &lt;em&gt;Suspend&lt;&#x2F;em&gt; value is permanently set to &lt;em&gt;Disabled&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The one &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.aliexpress.com&#x2F;item&#x2F;1005004519470412.html&quot;&gt;I purchased&lt;&#x2F;a&gt; came with the following combo:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;x99h v1.41 board (QIYIDA)&lt;&#x2F;li&gt;
&lt;li&gt;Intel Xeon E5 2670v3 processor (used)&lt;&#x2F;li&gt;
&lt;li&gt;16G (2x 8G) RAM QIYIDA brand (refurbished)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It was priced at $110 on Jan 2023.&lt;&#x2F;p&gt;
&lt;p&gt;From my personal experience, I&#x27;d advice to do thorough checks (using the sources provided above) and not just rely on AliExpress rankings&#x2F;ratings. I regret my purchase as I cannot put my PC to sleep (a functionality I heavily rely on).&lt;&#x2F;p&gt;
&lt;p&gt;The whole ecosystem is possible because of the enormous market of the used Xeon chips. The 2670v3 sells on Ali for a grand total of $7! &lt;del&gt;But I recommend buying as a combo for a piece of mind due to any compatiblity issues.&lt;&#x2F;del&gt; See UPDATE below.&lt;&#x2F;p&gt;
&lt;p&gt;Last comes our most important component: A Graphics card. Ali has us covered in this regard as well! For around $80 you can get a Radeon RX580 8G! Unbeatable! I believe you can go with the AliExpress reviews on this one.&lt;&#x2F;p&gt;
&lt;p&gt;On the bright side though (going with the Xeon 2670v3 processor, which has 12 cores 24 threads), it&#x27;s refreshing to see the &lt;em&gt;System Monitor&lt;&#x2F;em&gt; report the 24 threads available on the system!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;xeon-monitor-24-threads.png&quot; alt=&quot;System Monitor screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;UPDATE (31&#x2F;12&#x2F;23): On second thought, actually getting the parts separately instead of the MB&#x2F;CPU&#x2F;RAM Combo is a better idea. Thanks to the information available on &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;xeon-e5450.ru&#x2F;&quot;&gt;https:&#x2F;&#x2F;xeon-e5450.ru&#x2F;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;First search Ali for &lt;code&gt;x99&lt;&#x2F;code&gt; and pick for a good (popular) motherboard. Then head to xeon-e5450.ru and see for compatible RAM. They provide links for matching RAM. If available, going with server RAM is safer and cheaper! And finally check for compatible CPU. I believe the 2011-3 chip Xeon E5 2670v3 is always matched.&lt;&#x2F;p&gt;
&lt;p&gt;Using the above information I have since upgraded my RAM to 32GB ECC Server version and now use the machine as a Linux kernel compilation cruncher! It compliles the full kernel for an embedded system typically under 10mins.&lt;&#x2F;p&gt;
&lt;p&gt;Highly Recommended!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>nRF52840 board (Nice!Nano clones)</title>
		<published>2023-11-07T20:27:00+00:00</published>
		<updated>2023-11-07T20:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/nrf-clones/" type="text/html"/>
		<id>https://ntn888.github.io/blog/nrf-clones/</id>
		<content type="html">&lt;p&gt;These Chinese Nicenano V2 clones have started popping up on AliExpress. This is great news for us low-power-wireless nerds; As this widens our choice for ready made boards..&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Nordic hasn&#x27;t actually been welcoming towards hobbyists and this has resulted in scarcity of ready-made newbie friendly boards for prototyping (as opposed to esp32 or the ST&#x27;s bluepill). Which has been a real game stopper for home IOT projects. We&#x27;ve discussed two possible boards in &lt;a href=&quot;https:&#x2F;&#x2F;ntn888.github.io&#x2F;blog&#x2F;micro-bit-breakout&#x2F;&quot;&gt;this post&lt;&#x2F;a&gt;. Here is a new viable option.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;aliexpress.com&#x2F;item&#x2F;1005006035267231.html&quot;&gt;NRF52840 Development Board Supermini Compatible With Nice!Nano V2.0&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;nrf_clone_pic.resized.png&quot; alt=&quot;Main board pics&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;nrf_clone_pinout.resized.png&quot; alt=&quot;Board pinouts&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Features:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Mini-sized (breadboard friendly)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Built-in LiPo battery charger&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Supports charger boost jumper (100mA to 300mA) on the back side&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Unfortunately the SWD debug pins are not broken out as headers, but as pads underneath. We&#x27;d have to directly solder some wires onto this. I haven&#x27;t checked them out personally, but they may be shipping with a bootloader for simply flashing purposes.&lt;&#x2F;p&gt;
&lt;p&gt;There is a known issue with higher leak current than the original micro board. This one is reported to have a deep sleep current consumption of 700mA! (&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;redd.it&#x2F;16q5b2c&quot;&gt;reddit&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;p&gt;For more details and the workaround of the issue please follow the link to &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;joric&#x2F;nrfmicro&#x2F;wiki&#x2F;Alternatives#supermini-nrf52840&quot;&gt;this site&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;As the maker and IoT communities continue to grow, it&#x27;s exciting to see how this clone will contribute to the world of embedded systems and innovation. Whether you&#x27;re a seasoned developer or just starting your journey, the Nicenano V2 clone is worth exploring for your next project.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Best microcontroller for Beginners</title>
		<published>2023-11-05T18:27:00+00:00</published>
		<updated>2023-11-05T18:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/begin-embedded/" type="text/html"/>
		<id>https://ntn888.github.io/blog/begin-embedded/</id>
		<content type="html">&lt;p&gt;One of the most asked questions on r&#x2F;embedded Reddit is &amp;quot;How do I get started in embedded electronics?&amp;quot; or &amp;quot;What is the best microcontroller for beginners?&amp;quot;. This post will aim to address that.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;ve seen my &lt;em&gt;About&lt;&#x2F;em&gt; page in this blog, I&#x27;ve discussed a possible set of microcontrollers to keep in his&#x2F;her skillset as a hobbyiest. Here we will elaborate.&lt;&#x2F;p&gt;
&lt;p&gt;There are wide range of microcontrollers, here are some popular microcontrollers that are great choices for beginners:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Arduino:&lt;&#x2F;strong&gt; Arduino is widely considered one of the best options for beginners. It offers a user-friendly, open-source platform with a simple programming environment. The Arduino community is large and supportive, and there are numerous tutorials and projects available online. The Arduino Uno and Arduino Nano are excellent starter boards.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Raspberry Pi Pico:&lt;&#x2F;strong&gt; The Raspberry Pi Pico is a microcontroller board from the Raspberry Pi Foundation. It&#x27;s based on the RP2040 microcontroller and is excellent for beginners. It supports the MicroPython programming language, which is easy to learn and use. The Pico is affordable and has plenty of online resources.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Mbed platform:&lt;&#x2F;strong&gt; Then there is also the Mbed platform, developed by Arm, a solid choice for those who want to get into more professional-grade microcontroller programming. Mbed provides a free online IDE and supports a wide range of development boards.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Micro:bit:&lt;&#x2F;strong&gt; The BBC Micro:bit is designed for education and is an excellent choice for beginners, especially in a classroom setting. It has a user-friendly block-based programming environment but can also be programmed in Python and JavaScript. It&#x27;s ideal for teaching programming and electronics concepts.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Many take the Arduino route. Although this may be a good idea; in this blog we&#x27;re not concerned with Arduino; these are heavy frameworks. Simple, plain and close to metal frameworks are more performant and more importantly - exciting.&lt;&#x2F;p&gt;
&lt;p&gt;Hence my suggestion is to begin with the widely available and inexpensive &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20190428082446&#x2F;http:&#x2F;&#x2F;wiki.stm32duino.com&#x2F;index.php?title=Blue_Pill&quot;&gt;blue-pill board&lt;&#x2F;a&gt;. It is powered by the ST&#x27;s ARM Cortex-M3 stm32f103c8; A chip that is widely used in the industry. It&#x27;s got enough RAM and flash to run your initial projects while you pick up some embedded skills.&lt;&#x2F;p&gt;
&lt;p&gt;Pairing it up with this book: &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;BEGINNING-STM32-DEVELOPING-LIBOPENCM3-Paperback&#x2F;dp&#x2F;1484245970&quot;&gt;Beginning STM32&lt;&#x2F;a&gt;, will give you a great start with step-by-step hand-holding. This book uses the &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;libopencm3&#x2F;libopencm3&quot;&gt;libopenCM3&lt;&#x2F;a&gt; HAL (that&#x27;s Hardware Abstraction Layer) framework. In my opinion this framework is far superior to the ST&#x27;s default cube HAL which is a botched mess.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;begin_stm32.jpg&quot; alt=&quot;Begining STM32 cover&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;To complement your microcontroller board and to do projects, you will need a set of commonly used electronic components. Fortunately one may find many &lt;em&gt;electronic starter-kits&lt;&#x2F;em&gt; on AliExpress that will suffice for a beginner hobbyist.&lt;&#x2F;p&gt;
&lt;p&gt;Finally you need a multimeter. Again Ali has you covered here. Note that the accuracy of the multimeter is denoted in &lt;em&gt;counts&lt;&#x2F;em&gt;. 4000 counts would probably be about right for hobbyist use; but the more the better.. See &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;instrumentationtools.com&#x2F;multimeter-digits-counts&#x2F;&quot;&gt;here&lt;&#x2F;a&gt; for an explanation. See &lt;a href=&quot;https:&#x2F;&#x2F;ntn888.github.io&#x2F;blog&#x2F;multimeters&#x2F;&quot;&gt;here&lt;&#x2F;a&gt; for a breakdown of various options.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ntn888.github.io&#x2F;blog&#x2F;building-lab&#x2F;&quot;&gt;This post&lt;&#x2F;a&gt; works through building an economical home lab.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Comparison of SSG frameworks</title>
		<published>2023-11-05T15:27:00+00:00</published>
		<updated>2023-11-05T15:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/ssg-comparison/" type="text/html"/>
		<id>https://ntn888.github.io/blog/ssg-comparison/</id>
		<content type="html">&lt;p&gt;Static site generators (SSGs) have gained popularity in recent years as a way to create fast, secure, and easily maintainable websites. In this article, we will compare some popular static site generator software options, highlighting their features, use cases, and benefits.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-a-static-site-generator&quot;&gt;What is a Static Site Generator?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-a-static-site-generator&quot; aria-label=&quot;Anchor link for: what-is-a-static-site-generator&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;A static site generator is a tool that takes content, typically in the form of text files or data, and templates, and generates a complete website composed of HTML, CSS, and JavaScript files. Unlike dynamic websites, static sites do not rely on server-side processing or a database to generate pages. This simplicity results in faster loading times, better security, and easy scalability.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-jekyll&quot;&gt;1. Jekyll&lt;a class=&quot;zola-anchor&quot; href=&quot;#1-jekyll&quot; aria-label=&quot;Anchor link for: 1-jekyll&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Key Features:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Written in Ruby.&lt;&#x2F;li&gt;
&lt;li&gt;Great for personal blogs and simple websites.&lt;&#x2F;li&gt;
&lt;li&gt;Extensible through plugins.&lt;&#x2F;li&gt;
&lt;li&gt;GitHub Pages integration.&lt;&#x2F;li&gt;
&lt;li&gt;Markdown and Liquid templating support.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Straightforward to set up.&lt;&#x2F;li&gt;
&lt;li&gt;Ideal for bloggers and developers familiar with Ruby.&lt;&#x2F;li&gt;
&lt;li&gt;GitHub Pages, Git integration.&lt;&#x2F;li&gt;
&lt;li&gt;Large community and extensive documentation.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Limited support for complex, database-driven sites.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-hugo&quot;&gt;2. Hugo&lt;a class=&quot;zola-anchor&quot; href=&quot;#2-hugo&quot; aria-label=&quot;Anchor link for: 2-hugo&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Key Features:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Written in Go.&lt;&#x2F;li&gt;
&lt;li&gt;Blazing fast build times.&lt;&#x2F;li&gt;
&lt;li&gt;Highly customizable.&lt;&#x2F;li&gt;
&lt;li&gt;Supports content in multiple formats.&lt;&#x2F;li&gt;
&lt;li&gt;Theming system for design flexibility.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Exceptional speed in building sites.&lt;&#x2F;li&gt;
&lt;li&gt;Robust theming and templating.&lt;&#x2F;li&gt;
&lt;li&gt;Ideal for technical documentation and blogs.&lt;&#x2F;li&gt;
&lt;li&gt;Active and growing community.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Limited dynamic functionality without external services.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;3-gatsby&quot;&gt;3. Gatsby&lt;a class=&quot;zola-anchor&quot; href=&quot;#3-gatsby&quot; aria-label=&quot;Anchor link for: 3-gatsby&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Key Features:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;React-based.&lt;&#x2F;li&gt;
&lt;li&gt;Rich plugin ecosystem.&lt;&#x2F;li&gt;
&lt;li&gt;Integrates with various data sources.&lt;&#x2F;li&gt;
&lt;li&gt;Progressive Web App (PWA) support.&lt;&#x2F;li&gt;
&lt;li&gt;Excellent performance and SEO capabilities.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Combines the power of React with static site generation.&lt;&#x2F;li&gt;
&lt;li&gt;Versatile, can be used for a wide range of projects.&lt;&#x2F;li&gt;
&lt;li&gt;Extensive plugin library.&lt;&#x2F;li&gt;
&lt;li&gt;SEO-friendly and fast load times.&lt;&#x2F;li&gt;
&lt;li&gt;Real-time data updates using GraphQL.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Steeper learning curve for beginners.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;4-hexo&quot;&gt;4. Hexo&lt;a class=&quot;zola-anchor&quot; href=&quot;#4-hexo&quot; aria-label=&quot;Anchor link for: 4-hexo&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Key Features:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Written in Node.js.&lt;&#x2F;li&gt;
&lt;li&gt;Great for bloggers and developers.&lt;&#x2F;li&gt;
&lt;li&gt;Easy theming and plugin system.&lt;&#x2F;li&gt;
&lt;li&gt;Markdown and EJS templating support.&lt;&#x2F;li&gt;
&lt;li&gt;Speedy build times.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Simple and quick to set up.&lt;&#x2F;li&gt;
&lt;li&gt;Node.js ecosystem and npm packages.&lt;&#x2F;li&gt;
&lt;li&gt;Ideal for personal blogs.&lt;&#x2F;li&gt;
&lt;li&gt;Support for deploying to various hosting platforms.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Smaller community compared to some other options.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;5-eleventy-11ty&quot;&gt;5. Eleventy (11ty)&lt;a class=&quot;zola-anchor&quot; href=&quot;#5-eleventy-11ty&quot; aria-label=&quot;Anchor link for: 5-eleventy-11ty&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Key Features:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Written in JavaScript.&lt;&#x2F;li&gt;
&lt;li&gt;Highly flexible and configurable.&lt;&#x2F;li&gt;
&lt;li&gt;Supports multiple template languages.&lt;&#x2F;li&gt;
&lt;li&gt;Easy integration with various data sources.&lt;&#x2F;li&gt;
&lt;li&gt;Robust performance.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;No boilerplate code, minimal configuration.&lt;&#x2F;li&gt;
&lt;li&gt;Versatile, suitable for many types of projects.&lt;&#x2F;li&gt;
&lt;li&gt;Comprehensive documentation.&lt;&#x2F;li&gt;
&lt;li&gt;Strong performance and flexibility.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Smaller community compared to older SSGs.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;choosing-the-right-ssg&quot;&gt;Choosing the Right SSG&lt;a class=&quot;zola-anchor&quot; href=&quot;#choosing-the-right-ssg&quot; aria-label=&quot;Anchor link for: choosing-the-right-ssg&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The choice of the best static site generator depends on your project&#x27;s requirements and your familiarity with the underlying technologies. Each SSG has its unique strengths, and you should consider factors like build speed, content sources, theming capabilities, and the size of the community when making your decision.&lt;&#x2F;p&gt;
&lt;p&gt;This site as pointed out &lt;a href=&quot;https:&#x2F;&#x2F;ntn888.github.io&#x2F;blog&#x2F;zola-switch&#x2F;&quot;&gt;before&lt;&#x2F;a&gt; uses the Zola SSG framework. Which was separately reviewed in &lt;a href=&quot;https:&#x2F;&#x2F;ntn888.github.io&#x2F;blog&#x2F;zola-review&#x2F;&quot;&gt;this post&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In conclusion, static site generators offer a compelling solution for web developers looking to build fast, secure, and easily maintainable websites. Whether you&#x27;re a blogger, technical writer, or a developer working on a project, there&#x27;s an SSG that can fit your needs. Choose the one that aligns with your project&#x27;s goals, and you&#x27;ll enjoy the benefits of static site generation.&lt;&#x2F;p&gt;
&lt;p&gt;Besides writing in markdown, with git commiting, gives a streamlined blogging experience, where you get to solely focus on the &lt;em&gt;content&lt;&#x2F;em&gt;. And on the other hand, this ecosystem of tools you use, makes you feel like a true hacker which adds to the experience and promotes delivering more content. Which for me personally has been a key motivating factor to maintain this blog.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Review of Zola</title>
		<published>2023-11-05T06:27:00+00:00</published>
		<updated>2023-11-05T06:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/zola-review/" type="text/html"/>
		<id>https://ntn888.github.io/blog/zola-review/</id>
		<content type="html">&lt;p&gt;As revealed in the previous &lt;a href=&quot;https:&#x2F;&#x2F;ntn888.github.io&#x2F;blog&#x2F;zola-switch&#x2F;&quot;&gt;post&lt;&#x2F;a&gt; this site is now migrated into the Zola SSG management system. Zola is based on rust and boasts performance. What really caught my eye though is the numerous readymade &lt;em&gt;light-weight&lt;&#x2F;em&gt; themes available for it. Which is a refreshing change from the heavy theme this site used previously in the Jekyll framework. With its simplicity and performance, Zola has gained recognition among developers and content creators as a powerful tool for creating websites with minimal effort.&lt;&#x2F;p&gt;
&lt;p&gt;Its key features are speed and efficiency; flexible theming; built-in shortcodes; taxonomies and sections.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Some of it&#x27;s other pros are:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Rust Powered:&lt;&#x2F;strong&gt; The use of Rust makes Zola incredibly fast and robust, ensuring that your site will be blazingly quick and reliable.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Simple Setup:&lt;&#x2F;strong&gt; Zola is easy to set up and use, making it a great choice for both newcomers to static site generation and experienced developers.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Great Documentation:&lt;&#x2F;strong&gt; Zola provides extensive documentation that covers all aspects of the tool, making it accessible and user-friendly.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Active Development:&lt;&#x2F;strong&gt; The Zola project is actively maintained, with regular updates and improvements, ensuring it stays up to date with modern web development trends.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Community and Support:&lt;&#x2F;strong&gt; Zola has an active community and forum, offering support and assistance to users.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Limited theme options:&lt;&#x2F;strong&gt; Zola has a limited number of pre-built themes available. On the other hand most of the options here are lightweight (which is my preference).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Learning Curve:&lt;&#x2F;strong&gt; Zola is known to have a steeper learning curve, but in my experience it is on par with other SSGs such as Jekyll.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Zola is an impressive static site generator that combines the power of Rust with user-friendliness, resulting in a tool that&#x27;s efficient and flexible. Its speed, extensibility, and built-in features make it an excellent choice for developers and content creators looking to build modern, performant static websites. While it may not have the largest ecosystem, Zola&#x27;s strengths more than make up for it.&lt;&#x2F;p&gt;
&lt;p&gt;Many people now prefer Zola for thier SSG blog; and it&#x27;s a current trend to migrate to it.. Read more about Zola on their website: &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;&quot;&gt;https:&#x2F;&#x2F;www.getzola.org&#x2F;&lt;&#x2F;a&gt;. Various deployment methods are discussed on &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;deployment&#x2F;overview&#x2F;&quot;&gt;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;deployment&#x2F;overview&#x2F;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Switched site to Zola SSG</title>
		<published>2023-11-03T00:27:00+00:00</published>
		<updated>2023-11-03T00:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/zola-switch/" type="text/html"/>
		<id>https://ntn888.github.io/blog/zola-switch/</id>
		<content type="html">&lt;p&gt;This blog site has now switched to the Zola static site generator framework. Previously it was based on Jekyll (the default github pages framework). Zola is based on Rust and is more lightweight. The look of the new site is also more lightweight.&lt;&#x2F;p&gt;
&lt;p&gt;This article will also serve as a trigger for testing on-push deployment and test the auto site generation!&lt;&#x2F;p&gt;
&lt;p&gt;In other news I&#x27;m looking to learning a web development framework. Specifically the LAMP stack... I&#x27;ll log any update here if notable.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Deploying an IPv6 based seedbox</title>
		<published>2023-09-16T00:27:00+00:00</published>
		<updated>2023-09-16T00:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/ipv6-box/" type="text/html"/>
		<id>https://ntn888.github.io/blog/ipv6-box/</id>
		<content type="html">&lt;p&gt;With VPS that run purely IPv6 stack being cheaper (for example &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;my.hostbrr.com&#x2F;order&#x2F;main&#x2F;index&#x2F;storage&quot;&gt;HostBRR offerings&lt;&#x2F;a&gt;); I&#x27;m doing a write-up on how to setup a seedbox running IPv6.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Please keep in mind, you need to have IPv6 connectivity on your home computer&#x2F;internet to access your services on the VPS. To check if you do head over to &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;ip6.biz&#x2F;&quot;&gt;https:&#x2F;&#x2F;ip6.biz&#x2F;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Install docker and docker compose on your machine first. Once this is done we can then setup our services.&lt;&#x2F;p&gt;
&lt;p&gt;Due to some of the docker image registry sources operating in ipv4 environment, they will be unreachable from our ip6 only box! We have to manually provision a method to make the interconnection work. This is only temporary though, only till we pull our images. After that we will revert to ip6 only operation.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;change-nameservers&quot;&gt;Change Nameservers&lt;a class=&quot;zola-anchor&quot; href=&quot;#change-nameservers&quot; aria-label=&quot;Anchor link for: change-nameservers&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;To achieve this translation, we will need to adjust our nameservers as follows (courtesy &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;nat64.net&#x2F;&quot;&gt;https:&#x2F;&#x2F;nat64.net&#x2F;&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;nameserver 2a01:4f9:c010:3f02::1
nameserver 2a00:1098:2c::1
nameserver 2a00:1098:2b::1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Although this is not as straight forward as it seems. The file &lt;code&gt;&#x2F;etc&#x2F;resolv.conf&lt;&#x2F;code&gt; cannot be edited by hand as it will be update to any network changes. Attempting to use the package &lt;code&gt;resolvconf&lt;&#x2F;code&gt; deemed fruitless for me. So I resorted to the &lt;em&gt;trick&lt;&#x2F;em&gt; method of editing this file:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sudo apt install e2fsprogs -y # install needed package
cd ~
cp &#x2F;etc&#x2F;resolv.conf . # Make a backup of the original file
sudo rm -f &#x2F;etc&#x2F;resolv.conf
sudo vim &#x2F;etc&#x2F;resolv.conf # insert the above file contents as nameservers
sudo chattr +i &#x2F;etc&#x2F;resolv.conf
sudo systemctl restart networking
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now setup your services as needed. Docker can access and pull from any generic registries.&lt;&#x2F;p&gt;
&lt;p&gt;Once the docker pulls are done:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sudo chattr -i &#x2F;etc&#x2F;resolv.conf
sudo cp ~&#x2F;resolv.conf &#x2F;etc&#x2F;resolv.conf
sudo systemctl restart networking
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now our box is back to IPv6 only state.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;One downside with this system is that you can&#x27;t implement auto update of docker images using watchtower. Since once again some of the docker registeries are inaccessible.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;enable-ipv6-in-docker&quot;&gt;Enable IPv6 in Docker&lt;a class=&quot;zola-anchor&quot; href=&quot;#enable-ipv6-in-docker&quot; aria-label=&quot;Anchor link for: enable-ipv6-in-docker&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;One last concern is that you need to enable IPv6 networking in docker so that the containers can reach the outside world. This is explained in &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;config&#x2F;daemon&#x2F;ipv6&#x2F;&quot;&gt;Enable IPv6 support&lt;&#x2F;a&gt;. Basically you have to edit the file &lt;code&gt;&#x2F;etc&#x2F;docker&#x2F;daemon.json&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Once that&#x27;s done you need to create a new IPv6 network and use that with your containers. Here&#x27;s a sample compose file to run the qBittorrent image:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;version: &amp;quot;3&amp;quot;
services:
  qbittorrent:
    image: ghcr.io&#x2F;hotio&#x2F;qbittorrent
    container_name: qbittorrent
    networks:
      - ip6net		# &amp;lt;---- add the container to the network
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc&#x2F;UTC
      - WEBUI_PORT=8080
    volumes:
      - &#x2F;home&#x2F;ajit&#x2F;.config&#x2F;appdata&#x2F;qbtorrent:&#x2F;config
      - &#x2F;home&#x2F;ajit&#x2F;downloads:&#x2F;downloads
    ports:
      - 8080:8080
      - 6881:6881
      - 6881:6881&#x2F;udp
    restart: unless-stopped

networks:
  ip6net:
    enable_ipv6: true
    ipam:
      config:
        - subnet: 2001:0DB8::&#x2F;112

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Building a Developer&#x27;s Workstation</title>
		<published>2023-05-23T00:27:00+00:00</published>
		<updated>2023-05-23T00:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/dev-station/" type="text/html"/>
		<id>https://ntn888.github.io/blog/dev-station/</id>
		<content type="html">&lt;p&gt;In this article we will see how we build a developer&#x27;s workstation that has good overall performance and suitably compact in size.&lt;&#x2F;p&gt;
&lt;p&gt;Our first decision is the OS. I may be a &lt;em&gt;little&lt;&#x2F;em&gt; biased here. But you may have guessed that Linux is our choice of OS. As discussed in [this article]({% post_url &#x2F;update&#x2F;2023-05-11-debian_testing %}), Debian is unsuitable as a daily driver. We choose it&#x27;s derivative &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;system76.com&#x2F;pop&quot;&gt;POP! OS&lt;&#x2F;a&gt; as our OS. It is a quite popular distro that is well maintained.&lt;&#x2F;p&gt;
&lt;p&gt;Hardware wise our goto is the ex-lease HP Elitedesk 800 G2 mini desktop. Although it comes in several revisions, my recommendation is to go for the G2 version (running the 6th Gen core-i5) which I think is a good compromise between cost and performance&#x2F;efficiency. I believe the G4 revision is the current one as of Q2 2023, which can be purchased new direct from HP site.&lt;&#x2F;p&gt;
&lt;p&gt;The good thing about buying an ex-lease item (other than low cost) is that you repurpose it which would have otherwise ended up straight in a landfill. And you help out the planet which is a win-win. In addition to this, Linux loves these ex-lease systems. Being a few years old and bieng in the field for a while, linux has mature drivers for it&#x27;s chipsets and peripherals.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;These HP&#x2F;DELL branded office desktops are very durable systems that they pose great value even as second hand ex-lease systems. That&#x27;s one thing that I observed in my stint as a repair tech at a refurbished computer store.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.ebay.com&#x2F;sch&#x2F;i.html?_nkw=hp+elitedesk+800+g2+mini+desktop&amp;amp;_sacat=171957&amp;amp;mkcid=1&amp;amp;mkrid=711-53200-19255-0&amp;amp;siteid=0&amp;amp;campid=5338988127&amp;amp;customid=g2mini&amp;amp;toolid=10001&amp;amp;mkevt=1&quot;&gt;Here&#x27;s a referral link to ebay&lt;&#x2F;a&gt; if you are interested to purchase this. This gets me a small commission at no extra cost to you!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;installing-software&quot;&gt;Installing Software&lt;a class=&quot;zola-anchor&quot; href=&quot;#installing-software&quot; aria-label=&quot;Anchor link for: installing-software&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The absolute first thing you must install in a fresh install of &lt;em&gt;POP! OS&lt;&#x2F;em&gt; (or any distro for that matter) is &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;ohmyz.sh&#x2F;&quot;&gt;Oh My Zsh&lt;&#x2F;a&gt;. It genuinely is your terminal on steroids. It will spruce up your terminal to a whole another level. Some of it&#x27;s features include:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Predictive Completion&lt;&#x2F;li&gt;
&lt;li&gt;Enhanced Tab completion&lt;&#x2F;li&gt;
&lt;li&gt;Syntax highlighting (right in the shell!)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;dev.to&#x2F;kumareth&#x2F;a-beginner-s-guide-for-setting-up-autocomplete-on-ohmyzsh-hyper-with-plugins-themes-47f2&quot;&gt;This article&lt;&#x2F;a&gt; has a guide on how to install it and a couple plugins to get the above functionality.&lt;&#x2F;p&gt;
&lt;p&gt;Next comes the decision on a text editor. If you&#x27;d like to go the vim route, I highly recommend taking a look at [Doom Emacs]({% post_url &#x2F;update&#x2F;2022-11-16-doom %}). It&#x27;s &lt;em&gt;emacs&lt;&#x2F;em&gt; but with vim keybindings. Or you could go with the ever popular VS Code.&lt;&#x2F;p&gt;
&lt;p&gt;Finally you need to install your development environment for the framework that you use, be it web dev (node&#x2F;PHP&#x2F;Python etc backend) or for embedded (Zephyr in our case). If you&#x27;d like to dive into Zephyr development, take a look of my &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;simplycreate.online&#x2F;zephyr-guide&#x2F;&quot;&gt;Zephyr Guide&lt;&#x2F;a&gt;.&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;academy.nordicsemi.com&#x2F;courses&#x2F;nrf-connect-sdk-fundamentals&#x2F;&quot;&gt;Nordic dev academy&lt;&#x2F;a&gt; also has a great intro.&lt;&#x2F;p&gt;
&lt;p&gt;Have fun hackin&#x27;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Go nuclear!</title>
		<published>2023-05-21T00:27:00+00:00</published>
		<updated>2023-05-21T00:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/green-energy/" type="text/html"/>
		<id>https://ntn888.github.io/blog/green-energy/</id>
		<content type="html">&lt;p&gt;Although this discussion is not related to &lt;em&gt;embedded systems&lt;&#x2F;em&gt; at all, I think it&#x27;s quite relevant to the current times with the energy prices sky-rocketting.&lt;&#x2F;p&gt;
&lt;p&gt;When it comes to switching to Green Energy, I believe going &lt;em&gt;nuclear&lt;&#x2F;em&gt; is the answer. Here&#x27;s why.&lt;&#x2F;p&gt;
&lt;p&gt;Solar and wind are trickle sources. That is they are sensitive to seasonal variations. They can be great as a complementary secondary source. Otherwise as primary source they&#x27;ll require large battery storages, which will be unfavourable towards the overall carbon footprint and the prohibitting expense.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ve had feasible nuclear fission technology for nearly a century, and promises of &lt;em&gt;electricity too cheap to meter&lt;&#x2F;em&gt; almost 80 years ago... Only 10% of the world&#x27;s total electric generation is powered by nuclear today (With France exclusively being the pioneers at over 70%). Why is the adoption so slow?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;world-electricity-production-2022.png&quot; alt=&quot;electric production breakdown&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;ll probably have to do with the precedence set by nuclear technology in the global stage. Think &lt;em&gt;atomic bombings&lt;&#x2F;em&gt; of World War II. It had set such a bitter mood among the public that even decades later is hard to rid of. There is also the accidents of Chernobyl and Fukushima to blame. And the latter is rather recent (2011).&lt;&#x2F;p&gt;
&lt;p&gt;The technology has come a long way... And with Molten Salt Reactors, Thorium fuel is used for abundant power and are categorised as intrinsically safe&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;With soaring world temperatures and energy costs there&#x27;s never been more urgency in switching to &lt;em&gt;green energy&lt;&#x2F;em&gt;. And I think it is when you commit and deploy the technology, you get into a feedback cycle where you incrementally improve. That&#x27;s when the money pours in for research and the technology matures. And when countries gain energy independance it could take a chunk off the current world&#x27;s problems...&lt;&#x2F;p&gt;
&lt;p&gt;With all the push with solar and wind energy lately, I wish there was more enthusiasm about Nuclear power. What do you think about Nuclear power generation?&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;world-nuclear.org&#x2F;information-library&#x2F;current-and-future-generation&#x2F;molten-salt-reactors.aspx&quot;&gt;Molten Salt Reactors&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>My experience with drop-ship warehousing</title>
		<published>2023-05-17T00:27:00+00:00</published>
		<updated>2023-05-17T00:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/drop-ship/" type="text/html"/>
		<id>https://ntn888.github.io/blog/drop-ship/</id>
		<content type="html">&lt;p&gt;I had an idea to pakcage, ship and store these &lt;a href=&quot;https:&#x2F;&#x2F;ntn888.github.io&#x2F;blog&#x2F;xt-zb1-bl702&#x2F;&quot;&gt;bl702 devkits&lt;&#x2F;a&gt; into a US warehouse ready to locally distribute them. This is the story of how I failed misarably at it. Basically I purchased a &lt;em&gt;lot&lt;&#x2F;em&gt; of 100 pieces of these devkits to be stored into a warehouse to be shipped locally in the US. Although this never translated into sales; it did have many hurdles.&lt;&#x2F;p&gt;
&lt;p&gt;First was in purchasing itself. Basically I couldn&#x27;t purchase from the ALL FAMILIAR Aliexpress. Because I had to locally ship it into the ligistic company&#x27;s site in China; I could only ship to an international address. So Aliexpress was out of the question. For Chinese Domestic purchase, the supplier had a store in Taobao. This is fully in Chinese interface. Obviously.&lt;&#x2F;p&gt;
&lt;p&gt;Trying to register on the PC via the web portal did not succeed due to geographical blocks by Taobao. I did manage to register on the mobile app however. But unlike on the browser there&#x27;s no way to easily translate for example with the Google translate plugin. What I had to do instead painstakingly, point another phone with Google lens!&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s one hurdle overcome. I had to fill in the local logistical company&#x27;s address and all the details holding up on the other phone.&lt;&#x2F;p&gt;
&lt;p&gt;It took two days for the goods to reach the logistic&#x27;s warehouse in China. They arrived in a box packaged with the 100 units.&lt;&#x2F;p&gt;
&lt;p&gt;Now the logistics company I went with was called &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.nextsmartship.com&#x2F;&quot;&gt;Nextsmartship&lt;&#x2F;a&gt;. My experience was largely positive with them. There was a another caveat here. When using this logistics company, it is way cheaper to prepackage into individual ready-to-mail packages here in the Chinese warehouse than to ship in bulk first and parcel them for courier there. It worked out to be $0.99 per piece here.&lt;&#x2F;p&gt;
&lt;p&gt;So it would be ideal to pre-package them into appropriate package unit sizes before cargo-ing to the US: for example 1pc, 5pc and 10pc units. I also think they did a very good job of safely packaging them into individual pieces.&lt;&#x2F;p&gt;
&lt;p&gt;At the time I dealt with them, they did not have automated integration with 3rd party sites (such as woo-commerce which I used). So once you make a sale on your site you had to manually message them (on Whatsapp). But this never happened in my instance.&lt;&#x2F;p&gt;
&lt;p&gt;As you see, I think one of the requirements of selling products on your own hosted site, to even gain some exposure, you&#x27;d have to be listed on Google merchant. This is the list of shopping products you&#x27;d get when a buyer clicks on the &lt;em&gt;Shopping&lt;&#x2F;em&gt; tab on the Google search page.&lt;&#x2F;p&gt;
&lt;p&gt;I didn&#x27;t realise at the time, but you&#x27;d need a complete site with &amp;quot;Privacy Policy&amp;quot;&#x2F;&amp;quot;Returns Policy&amp;quot; etc to get approved in Google Merchant. Google outright dismisses your site for &lt;em&gt;misrepresentation&lt;&#x2F;em&gt; for this. I mis-took it for selling my products that was aimed at the Chinese market... So I never bothered to probe further on this. And the whole thing went down the drain.&lt;&#x2F;p&gt;
&lt;p&gt;However at this point, I myself started to get frustrated with this devkit&#x27;s SDK: it&#x27;s lack of documentation and more importantly the everchanging updates to the SDK that breaks backwards compatibility. As I have pointed out earlier I moved on to the Nordic nRF chips. Due to lack of hobbiest sized boards (think bluepill). I put together the &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ntn888&#x2F;833iot&quot;&gt;833iot&lt;&#x2F;a&gt; for a self-contained module based off nRF52833 sold in Alibaba. Due to previous failures I never attempted to sell them.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;wSONlPv.png&quot; alt=&quot;833iot pcb&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Even though low-power wireless and &lt;code&gt;Thread&lt;&#x2F;code&gt; are increasingly becoming popular, the hobbiest market is still flooded with the power-hungry WiFi chips. This protocol is so inappropriate for microcontrollers!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Basic commands for Network Troubleshooting</title>
		<published>2023-05-16T00:27:00+00:00</published>
		<updated>2023-05-16T00:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/net-commands/" type="text/html"/>
		<id>https://ntn888.github.io/blog/net-commands/</id>
		<content type="html">&lt;p&gt;In this post we will look at a couple commands most used for network troubleshooting.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ping&quot;&gt;ping&lt;a class=&quot;zola-anchor&quot; href=&quot;#ping&quot; aria-label=&quot;Anchor link for: ping&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;ping&lt;&#x2F;code&gt; is the most simplest network command that everyone is familiar with. You can use it to check if a node (or device) is connected and running. Note however, that if this feature has been disabled on the node it will not respond to pings!&lt;&#x2F;p&gt;
&lt;p&gt;The command takes the following format:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;ping &amp;lt;target_ip&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;traceroute&quot;&gt;traceroute&lt;a class=&quot;zola-anchor&quot; href=&quot;#traceroute&quot; aria-label=&quot;Anchor link for: traceroute&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;traceroute&lt;&#x2F;code&gt; is a more fancy command. It gives us the &lt;code&gt;ping&lt;&#x2F;code&gt; results of each hop (eg routers) along the packet&#x27;s path. So it can be used to deduce where in the network the packet is failing. The command takes the following format:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;traceroute &amp;lt;target_ip&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For example it can be used to troubleshoot problems with our selfhosted email [scenario]({% post_url &#x2F;update&#x2F;2022-12-27-postfix_mail %}). By running the command aimed at the Google&#x27;s mail servers (for example) from our box, we can deduce if the email is failing whithin the VPS provider&#x27;s network. Which would mean the provider has blocked &lt;code&gt;port 25&lt;&#x2F;code&gt;. In this case we would get the following behaviour.&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;# traceroute -n -T -p 25 gmail-smtp-in.l.google.com
traceroute to gmail-smtp-in.l.google.com (173.194.204.27), 30 hops max, 60 byte packets
1 192.210.145.2 0.033 ms 0.012 ms 0.011 ms
2 * * *
3 * * *
4 * * *
5 * * *
.
.
.
30 * * *
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Since there is no reponse from the very next node it is likely failing within the provider&#x27;s network and we can say that the provider is actively blocking it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;nc&quot;&gt;nc&lt;a class=&quot;zola-anchor&quot; href=&quot;#nc&quot; aria-label=&quot;Anchor link for: nc&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This one is called netcat. And it can be used to pass messages between the computers through network sockets. If you work on building an IoT device you will find this command incredibly useful.&lt;&#x2F;p&gt;
&lt;p&gt;You can run it in server and client mode. To run it in server mode:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;nc -l &amp;lt;port&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To runt it in client mode:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;echo &amp;quot;hello there&amp;quot; | nc &amp;lt;remote-ip&amp;gt; &amp;lt;remote-port&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You get the idea. If you omit the pipe command and run only the &lt;code&gt;nc&lt;&#x2F;code&gt; command, you&#x27;ll get an interactvie prompt. Much like a telnet session!&lt;&#x2F;p&gt;
&lt;p&gt;As you can see this is a great way to set up makeshift listening servers on a specific port for IoT devices ad clients to connect to and debug the communication.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>My experience with Debian Testing</title>
		<published>2023-05-11T00:27:00+00:00</published>
		<updated>2023-05-11T00:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/debian-testing/" type="text/html"/>
		<id>https://ntn888.github.io/blog/debian-testing/</id>
		<content type="html">&lt;p&gt;I&#x27;m a big proponent of Linux [Or GNU&#x2F;Linux to be technically correct]. I like the idea of how the entire system is just a collection of individual functioning pieces of software.&lt;&#x2F;p&gt;
&lt;p&gt;Their motto is &lt;em&gt;Do one thing and do it well&lt;&#x2F;em&gt;. I think this is a great mantra for successful engineering altogether. That is, break down the task into simple manageable tasks and implement and integrate them!&lt;&#x2F;p&gt;
&lt;p&gt;Although it&#x27;s not as popular in desktops and personal computer markets, it unanimously powers the web. A good portion of servers run linux. This is no surprise considering the reliability and flexibility of the Linux OS. To probe further, the popularity of the humble Wordpress platform drives the need for Linux web servers, as Wordpress is run on top the old school LAMP stack (Where &lt;em&gt;L&lt;&#x2F;em&gt; denotes the Linux part).&lt;&#x2F;p&gt;
&lt;p&gt;Among Linux servers, Debian is one of the most popular&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. The mainline Debian distribution is considered to be the hallmark of stability. That&#x27;s great. But it comes with a downside... It&#x27;s software repository is not the most upto-date. Usually you&#x27;d be pulling in updates that are lagging around two years behind the current status. So it seems Debian is not so great for powering a daily driver personal workstation.&lt;&#x2F;p&gt;
&lt;p&gt;Enter Debian Testing. Debian has two other stable stuatus of releases: &lt;code&gt;Unstable&lt;&#x2F;code&gt; and &lt;code&gt;Testing&lt;&#x2F;code&gt;. Unstable was too unstable for me. &lt;code&gt;Testing&lt;&#x2F;code&gt; seemed like a good middle-ground. You can read more about &lt;code&gt;Testing&lt;&#x2F;code&gt; &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;wiki.debian.org&#x2F;DebianTesting&quot;&gt;here&lt;&#x2F;a&gt;. One of the pre-requisites is that the package to make it into &lt;code&gt;Testing&lt;&#x2F;code&gt; must have been in Unstable for atleast two days.&lt;&#x2F;p&gt;
&lt;p&gt;One major problem with these &lt;code&gt;Unstable&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;Testing&lt;&#x2F;code&gt; releases is that they tend to unexpectedly break software when updating. But there are ways to fortify testing. We do this with an application called &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;linuxmint&#x2F;timeshift&quot;&gt;Timeshift&lt;&#x2F;a&gt;. As the name implies, we can backup the hard drive contents and revert the system to a previous state following an undesired outcome.&lt;&#x2F;p&gt;
&lt;p&gt;Note that &lt;code&gt;Timeshift&lt;&#x2F;code&gt; requires the partition to be formatted in &lt;code&gt;btrfs&lt;&#x2F;code&gt; type and that too in the right naming scheme. The following Youtube video has instructions on installing &lt;code&gt;Debian Testing&lt;&#x2F;code&gt; this proper way with &lt;code&gt;Timeshift&lt;&#x2F;code&gt; enabled if you want to try it out.&lt;&#x2F;p&gt;
&lt;div &gt;
    &lt;iframe
        src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;IdqkjpsyUNg&quot;
        webkitallowfullscreen
        mozallowfullscreen
        allowfullscreen&gt;
    &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;In my experience it wasn&#x27;t good enough. I found myself reaching too often to the Timeshift backups, from things breaking after an update. Very often I had the problem of installed applications going missing.&lt;&#x2F;p&gt;
&lt;p&gt;Hence I just use POP-OS. It comes from the Debian lineage, so we have familarity there especially with the package manager &lt;code&gt;apt&lt;&#x2F;code&gt;. It&#x27;s a very popular desktop based distribution. However I&#x27;m not found of it&#x27;s &lt;code&gt;Cosmic&lt;&#x2F;code&gt; Desktop. I find it a butchered up version of GNOME desktop. To install the GNOME desktop I just have to run &lt;code&gt;sudo apt install gnome-session&lt;&#x2F;code&gt;. I run trusty Debian for servers and VPSs (like we did in the other post about Servarr as a Docker host!).&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;w3techs.com&#x2F;technologies&#x2F;details&#x2F;os-linux&quot;&gt;https:&#x2F;&#x2F;w3techs.com&#x2F;technologies&#x2F;details&#x2F;os-linux&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>DIY NAS</title>
		<published>2023-05-10T00:27:00+00:00</published>
		<updated>2023-05-10T00:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/diy-nas/" type="text/html"/>
		<id>https://ntn888.github.io/blog/diy-nas/</id>
		<content type="html">&lt;p&gt;Apart from having a local collection, the main advantage of an automated servarr (sonarr&#x2F;radarr) setup is the possiblilty of auto-populating a &lt;em&gt;list&lt;&#x2F;em&gt; of titles based on a certain criteria. For example: all &#x27;Marvel&#x27; films. In this article we will see how to build such a setup.&lt;&#x2F;p&gt;
&lt;p&gt;I think running a DIY NAS is a great hobby. This is an excellent exercise in selfhosting linux servers with the aim of maintaining them. And servarr for that matter is reasonably complex to integrate; you&#x27;ll get a good feel of building docker services that will open the door to many other selfhosted services!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;considerations-for-our-setup&quot;&gt;Considerations for our setup&lt;a class=&quot;zola-anchor&quot; href=&quot;#considerations-for-our-setup&quot; aria-label=&quot;Anchor link for: considerations-for-our-setup&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;h3 id=&quot;arm-sbc-vs-x86-powered-machine&quot;&gt;Arm SBC vs x86 powered machine&lt;a class=&quot;zola-anchor&quot; href=&quot;#arm-sbc-vs-x86-powered-machine&quot; aria-label=&quot;Anchor link for: arm-sbc-vs-x86-powered-machine&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;This is the primary decision in our DIY NAS build. While SBC&#x27;s are more power efficient and compact, I prefer go with a second hand ex-lease SFF(small form-factor) machine. While this is usually cheaper; you also get a sturdy casing to house your hard drives. They can take a max of 2 storage HDDs. If you want to hold more you can explore other options such as tower PCs. Take a look at &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;forums.serverbuilds.net&#x2F;t&#x2F;guide-nas-killer-6-0-ddr4-is-finally-cheap&#x2F;13956&quot;&gt;NAS Killer builds&lt;&#x2F;a&gt; over at serverbuilds.net.&lt;&#x2F;p&gt;
&lt;p&gt;The used SFF machines come in great discounts on ebay seasonally (as low as $50), get one with 8G of memory and atleast a 4th-gen core-i5 processor. You wouldn&#x27;t need a powerful machine for you NAS. But if you&#x27;re streaming your media outside of your local network, plex&#x2F;emby will have to do transcoding which will take up CPU resource.&lt;&#x2F;p&gt;
&lt;p&gt;You have lots of choices here too... Dell Optiplex 3020 to HP Elitedesk G1&#x2F;G2 and so on.&lt;&#x2F;p&gt;
&lt;p&gt;-&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.ebay.com&#x2F;sch&#x2F;i.html?_nkw=hp+elitedesk+800+g1+sff&amp;amp;_sacat=171957&amp;amp;mkcid=1&amp;amp;mkrid=711-53200-19255-0&amp;amp;siteid=0&amp;amp;campid=5338988127&amp;amp;customid=hpg1&amp;amp;toolid=10001&amp;amp;mkevt=1&quot;&gt;HP Elitedesk 800 G1&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;-&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.ebay.com&#x2F;sch&#x2F;i.html?_nkw=hp+elitedesk+800+g2+sff&amp;amp;_sacat=171957&amp;amp;LH_TitleDesc=0&amp;amp;_odkw=hp+elitedesk+800+g1+sff&amp;amp;_osacat=171957&amp;amp;mkcid=1&amp;amp;mkrid=711-53200-19255-0&amp;amp;siteid=0&amp;amp;campid=5338988127&amp;amp;customid=hpg2&amp;amp;toolid=10001&amp;amp;mkevt=1&quot;&gt;HP Elitedesk 800 G2&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;-&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.ebay.com&#x2F;sch&#x2F;i.html?_nkw=dell+optiplex+3020+sff&amp;amp;_sacat=171957&amp;amp;LH_TitleDesc=0&amp;amp;_odkw=hp+elitedesk+800+g2+sff&amp;amp;_osacat=171957&amp;amp;mkcid=1&amp;amp;mkrid=711-53200-19255-0&amp;amp;siteid=0&amp;amp;campid=5338988127&amp;amp;customid=dellsff&amp;amp;toolid=10001&amp;amp;mkevt=1&quot;&gt;Dell Optiplex 3020&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I personally use the first one...
(Note that the above are affiliate links to ebay, where I get a small commission if you purchase through them)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;os&quot;&gt;OS&lt;a class=&quot;zola-anchor&quot; href=&quot;#os&quot; aria-label=&quot;Anchor link for: os&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Off the shelf (eg. freeNAS) vs plain Debian. Going with freeNAS we get the advantage of preconfigured easy RAID setup, but for our simple setup we won&#x27;t use any RAID. Maybe just one or two HDDs (as our case supports) joined with the &lt;em&gt;Logical Volume Manager (LVM)&lt;&#x2F;em&gt; filesystem.
The advantage of going with plain Debian in my opnion (other than flexibility) is that you don&#x27;t have to put up with pesky UIs for tasks that can be easily achieved via the terminal. Be warned though, since we are managing a headless Linux system remotely this will be a lot of terminal commands through SSH session.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;setting-up-services&quot;&gt;Setting up Services&lt;a class=&quot;zola-anchor&quot; href=&quot;#setting-up-services&quot; aria-label=&quot;Anchor link for: setting-up-services&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;In my setup I have a 2.5&amp;quot; HDD for the boot Debian drive, and a separate 3.5&amp;quot; 4TB HDD for data storage, which like mentioned above expandable with LVM. This drive will be mounted to &lt;code&gt;&#x2F;mnt&#x2F;main&lt;&#x2F;code&gt; (I named the drive as &lt;code&gt;main&lt;&#x2F;code&gt; in the LVM). You will see reference to this drive path below when we configure our services.&lt;&#x2F;p&gt;
&lt;p&gt;Makesure you set an identifiable hostname to your Debian install, and to access it via this name you will have to install &lt;code&gt;avahi-daemon&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; apt install avahi-daemon&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;At this point you can detach from keyboard and access you machine remotely... Using SSH: &lt;code&gt;ssh &amp;lt;user&amp;gt;@&amp;lt;your_hostname&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Next install &lt;code&gt;docker&lt;&#x2F;code&gt; and &lt;code&gt;docker-compose&lt;&#x2F;code&gt;. Using the guides &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;ddev.readthedocs.io&#x2F;en&#x2F;stable&#x2F;users&#x2F;install&#x2F;docker-installation&#x2F;&quot;&gt;here&lt;&#x2F;a&gt; and &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;compose&#x2F;install&#x2F;linux&#x2F;#install-using-the-repository&quot;&gt;here&lt;&#x2F;a&gt; respectively. There&#x27;s instructions on those guides to setup the relevant repositories for Debian.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dockstarter&quot;&gt;DockStarter&lt;a class=&quot;zola-anchor&quot; href=&quot;#dockstarter&quot; aria-label=&quot;Anchor link for: dockstarter&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;If you are new to Docker services, a great place to start is the aptly named DockStarter. It is an application with settings preconfigured and the Docker commands have been made under-the-hood. You just make selections through the menulist wizard to enable&#x2F;disable services. And it comes with a vast majority of services too. See &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;GhostWriters&#x2F;DockSTARTer&#x2F;tree&#x2F;master&#x2F;compose&#x2F;.apps&quot;&gt;here&lt;&#x2F;a&gt;. It does cover most use cases of a Sonarr&#x2F;Radarr setup!&lt;&#x2F;p&gt;
&lt;p&gt;In my opnion, DockStarter is great to understanding the mechanics of how Docker works without first getting bogged down with configuration details. Once you have understood this concept I encourage you to move on.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do keep in mind DockStarter is a well polished piece of software, which is still handy for simple one-container deployments... In our case we have a whole host of containers interacting with each other, which is difficult to deploy even with DockStarter.&lt;&#x2F;p&gt;
&lt;p&gt;See &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;trash-guides.info&#x2F;Hardlinks&#x2F;How-to-setup-for&#x2F;Dockstarter&#x2F;&quot;&gt;here&lt;&#x2F;a&gt; if you want to setup Servarr using DockStarter. This site has good information for all kinds of Servarr installs, so you could always refer here no matter which route you take!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Here we will be looking at plain docker-compose method of setting up services. The first course of action is to prepare our data drive.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;preparing-the-drive&quot;&gt;Preparing the drive&lt;a class=&quot;zola-anchor&quot; href=&quot;#preparing-the-drive&quot; aria-label=&quot;Anchor link for: preparing-the-drive&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;First we need to identify the disk ID. Run &lt;code&gt;sudo fdisk -l | grep -i &#x2F;dev&#x2F;sd&lt;&#x2F;code&gt;; in my instance for example:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Disk &#x2F;dev&#x2F;sdc: 3.64 TiB, 4000787030016 bytes, 7814037168 sectors &amp;lt;=== my 4T drive!
&#x2F;dev&#x2F;sdc1   2048 7814037134 7814035087  3.6T Linux filesystem
Disk &#x2F;dev&#x2F;sdb: 1.82 TiB, 2000398934016 bytes, 3907029168 sectors
&#x2F;dev&#x2F;sdb1   2048 3907029134 3907027087  1.8T Linux filesystem
Disk &#x2F;dev&#x2F;sda: 149.05 GiB, 160041885696 bytes, 312581808 sectors
&#x2F;dev&#x2F;sda1       2048   1050623   1048576   512M EFI System
&#x2F;dev&#x2F;sda2    1050624 310579199 309528576 147.6G Linux filesystem
&#x2F;dev&#x2F;sda3  310579200 312580095   2000896   977M Linux swap
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can see above that &lt;code&gt;dev&#x2F;sdc&lt;&#x2F;code&gt; is our drive! Continue to follow instructions on formatting the drive &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.linuxtechi.com&#x2F;how-to-create-lvm-partition-in-linux&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Finally add this line to &lt;code&gt;&#x2F;etc&#x2F;fstab&lt;&#x2F;code&gt; to enable automount:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&#x2F;dev&#x2F;vgmain&#x2F;lvmain      &#x2F;mnt&#x2F;main ext4    defaults,user 0 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that you will need to create the &lt;code&gt;main&lt;&#x2F;code&gt; directory in &lt;code&gt;&#x2F;mnt&lt;&#x2F;code&gt;. And note that I named my volume group, &lt;code&gt;vgmain&lt;&#x2F;code&gt; and the logical volume &lt;code&gt;lvmain&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Once we have formatted the drive and have made provisions to auto-mount it; the last step is to create the directory structre that will hold our data.&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;media
├── torrents
│  ├── movies
│  ├── music
│  └── tv
├── usenet
│  ├── movies
│  ├── music
│  └── tv
└── medialibrary
   ├── movies
   ├── music
   └── tv
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Run the following commands to create the above structure:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-support z-function z-cd z-shell&quot;&gt;cd&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; &#x2F;mnt&#x2F;main&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; media&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-support z-function z-cd z-shell&quot;&gt;cd&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; media&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;p&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-expansion z-brace z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-expansion z-brace z-begin z-shell&quot;&gt;{&lt;&#x2F;span&gt;torrents&lt;span class=&quot;z-punctuation z-separator z-shell&quot;&gt;,&lt;&#x2F;span&gt;usenet&lt;span class=&quot;z-punctuation z-separator z-shell&quot;&gt;,&lt;&#x2F;span&gt;medialibrary&lt;span class=&quot;z-punctuation z-section z-expansion z-brace z-end z-shell&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&#x2F;&lt;span class=&quot;z-meta z-group z-expansion z-brace z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-expansion z-brace z-begin z-shell&quot;&gt;{&lt;&#x2F;span&gt;movies&lt;span class=&quot;z-punctuation z-separator z-shell&quot;&gt;,&lt;&#x2F;span&gt;tv&lt;span class=&quot;z-punctuation z-section z-expansion z-brace z-end z-shell&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;download-source&quot;&gt;Download source&lt;a class=&quot;zola-anchor&quot; href=&quot;#download-source&quot; aria-label=&quot;Anchor link for: download-source&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Before we proceed, we have one more decision to make, regarding our download method to acquire content. There are three options:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Torrent&lt;&#x2F;li&gt;
&lt;li&gt;Usenet&lt;&#x2F;li&gt;
&lt;li&gt;Debrid&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We wont use torrents. Despite it being free, it&#x27;s a network hog.&lt;&#x2F;p&gt;
&lt;p&gt;Debrid is a service that consolidates numerous hosting services under a single service. Thereby you can download in premium from all supported hoster just by logging into Real-Debrid. They now also have the option of direct downloading a cached torrent source. This is what makes it possible to use it in the servarr setup. To use it you need to enable the services &lt;code&gt;jackett&lt;&#x2F;code&gt; and &lt;code&gt;rdt-client&lt;&#x2F;code&gt; below in the &#x27;downloaders&#x27; section.&lt;&#x2F;p&gt;
&lt;p&gt;Here we will use &lt;em&gt;usenet&lt;&#x2F;em&gt; as our download source. More instructions on setting up usenet is presented in [this article]({% post_url &#x2F;bl&#x2F;2022-02-23-basic-gpio %}). To use this we have enabled &lt;code&gt;nzbget&lt;&#x2F;code&gt; as our downloader below.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;docker-compose-config&quot;&gt;docker-compose config&lt;a class=&quot;zola-anchor&quot; href=&quot;#docker-compose-config&quot; aria-label=&quot;Anchor link for: docker-compose-config&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Make a new directory called &lt;code&gt;servarr&lt;&#x2F;code&gt; in your home directory to house the docker-compose config. This file will gather the configurations of all the services into one file. Once you have made this file you just have to execute &lt;code&gt;sudo docker compose up -d&lt;&#x2F;code&gt; within this directory in your bash shell. And after a few minutes the services will be accessible from their specified ports from the server&#x27;s IP address. Here&#x27;s my &lt;code&gt;docker-compose.yml&lt;&#x2F;code&gt; placed inside of that directory:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; class=&quot;language-yaml z-code&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;version&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-yaml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;2.1&lt;span class=&quot;z-punctuation z-definition z-string z-end z-yaml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;services&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;organizr&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;image&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;linuxserver&#x2F;organizr&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;container_name&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;organizr&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;environment&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;PUID=1000&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;PGID=1000&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;TZ=Europe&#x2F;London&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;volumes&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&#x2F;mnt&#x2F;main&#x2F;config&#x2F;Organizr:&#x2F;config&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;ports&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;80:80&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;restart&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;unless-stopped&lt;&#x2F;span&gt;

  &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;filebrowser&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;image&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;hurlenko&#x2F;filebrowser&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;environment&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;PUID=1000&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;PGID=1000&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;TZ=Europe&#x2F;London&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;ports&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;443:8080&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;volumes&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&#x2F;mnt&#x2F;main:&#x2F;data&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&#x2F;mnt&#x2F;main&#x2F;config&#x2F;fb:&#x2F;config&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;restart&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;always&lt;&#x2F;span&gt;

  &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;syncthing&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;image&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;syncthing&#x2F;syncthing&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;container_name&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;syncthing&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;hostname&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;mediasrv&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;environment&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;PUID=1000&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;PGID=1000&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;volumes&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&#x2F;mnt&#x2F;main&#x2F;media:&#x2F;var&#x2F;syncthing&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;ports&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;8384:8384&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;22000:22000&#x2F;tcp&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;22000:22000&#x2F;udp&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;restart&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;unless-stopped&lt;&#x2F;span&gt;
    
    
    
  &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;radarr&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;container_name&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;radarr&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;image&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;ghcr.io&#x2F;hotio&#x2F;radarr:latest&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;restart&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;unless-stopped&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;logging&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;driver&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;json-file&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;ports&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;7878:7878&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;environment&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;PUID=1000&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;PGID=1000&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;TZ=Europe&#x2F;London&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;volumes&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&#x2F;etc&#x2F;localtime:&#x2F;etc&#x2F;localtime:ro&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&#x2F;mnt&#x2F;main&#x2F;config&#x2F;radarr:&#x2F;config&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&#x2F;mnt&#x2F;main&#x2F;media:&#x2F;data&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;sonarr&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;container_name&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;sonarr&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;image&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;ghcr.io&#x2F;hotio&#x2F;sonarr:latest&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;restart&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;unless-stopped&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;logging&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;driver&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;json-file&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;ports&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;8989:8989&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;environment&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;PUID=1000&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;PGID=1000&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;TZ=Europe&#x2F;London&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;volumes&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&#x2F;etc&#x2F;localtime:&#x2F;etc&#x2F;localtime:ro&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&#x2F;mnt&#x2F;main&#x2F;config&#x2F;sonarr:&#x2F;config&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&#x2F;mnt&#x2F;main&#x2F;media:&#x2F;data&lt;&#x2F;span&gt;

  &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;lidarr&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;image&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;lscr.io&#x2F;linuxserver&#x2F;lidarr&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;container_name&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;lidarr&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;environment&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;PUID=1000&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;PGID=1000&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;TZ=Europe&#x2F;London&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;volumes&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&#x2F;mnt&#x2F;main&#x2F;config&#x2F;lidarr:&#x2F;config&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&#x2F;mnt&#x2F;main&#x2F;media:&#x2F;data&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;ports&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;8686:8686&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;restart&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;unless-stopped&lt;&#x2F;span&gt;
    
&lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt; downloaders  =========================================================================
&lt;&#x2F;span&gt;

&lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;  jackett:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;    image: ghcr.io&#x2F;linuxserver&#x2F;jackett
&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;    container_name: jackett
&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;    environment:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;      - PUID=1000
&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;      - PGID=1000
&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;      - TZ=Europe&#x2F;London
&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;      - AUTO_UPDATE=true #optional
&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;      #- RUN_OPTS=&amp;lt;run options here&amp;gt; #optional
&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;    volumes:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;      - &#x2F;mnt&#x2F;main&#x2F;config&#x2F;jackett:&#x2F;config
&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;      - &#x2F;dev&#x2F;null:&#x2F;downloads
&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;    ports:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;      - 9117:9117
&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;    restart: unless-stopped
&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;  rdtclient:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;    container_name: rdtclient
&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;    environment:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;      - PUID=1000
&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;      - PGID=1000
&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;      - TZ=Europe&#x2F;London
&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;    volumes:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;        - &amp;#39;&#x2F;mnt&#x2F;main&#x2F;media&#x2F;torrents&#x2F;downloads:&#x2F;data&#x2F;downloads&amp;#39;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;        - &amp;#39;&#x2F;mnt&#x2F;main&#x2F;config&#x2F;rdt-client&#x2F;:&#x2F;data&#x2F;db&amp;#39;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;    image: rogerfar&#x2F;rdtclient
&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;    restart: always
&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;    logging:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;        driver: json-file
&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;        options:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;            max-size: 10m
&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;    ports:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;        - &amp;#39;6500:6500&amp;#39;
&lt;&#x2F;span&gt;      &lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;      &lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;  bittorrent:
&lt;&#x2F;span&gt;      &lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;    image: ghcr.io&#x2F;linuxserver&#x2F;qbittorrent
&lt;&#x2F;span&gt;      &lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;    container_name: qbittorrent
&lt;&#x2F;span&gt;      &lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;    environment:
&lt;&#x2F;span&gt;      &lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;      - PUID=1000
&lt;&#x2F;span&gt;      &lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;      - PGID=1000
&lt;&#x2F;span&gt;      &lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;      - TZ=Europe&#x2F;London
&lt;&#x2F;span&gt;      &lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;      - WEBUI_PORT=8080
&lt;&#x2F;span&gt;      &lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;    volumes:
&lt;&#x2F;span&gt;      &lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;      - &#x2F;mnt&#x2F;main&#x2F;config&#x2F;qbittorrent:&#x2F;config
&lt;&#x2F;span&gt;      &lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;      - &#x2F;mnt&#x2F;main&#x2F;media&#x2F;torrents:&#x2F;data&#x2F;torrents:rw
&lt;&#x2F;span&gt;      &lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;    ports:
&lt;&#x2F;span&gt;      &lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;      - 6881:6881
&lt;&#x2F;span&gt;      &lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;      - 6881:6881&#x2F;udp
&lt;&#x2F;span&gt;      &lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;      - 8080:8080
&lt;&#x2F;span&gt;      &lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;    restart: unless-stopped
&lt;&#x2F;span&gt;      &lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;  &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;nzbget&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;container_name&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;nzbget&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;image&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;ghcr.io&#x2F;linuxserver&#x2F;nzbget&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;restart&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;unless-stopped&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;logging&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;driver&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;json-file&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;ports&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;6789:6789&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;environment&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;PUID=1000&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;PGID=1000&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;TZ=Europe&#x2F;London&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;volumes&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&#x2F;etc&#x2F;localtime:&#x2F;etc&#x2F;localtime:ro&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&#x2F;mnt&#x2F;main&#x2F;config&#x2F;nzbget:&#x2F;config&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&#x2F;mnt&#x2F;main&#x2F;media&#x2F;usenet:&#x2F;data&#x2F;usenet:rw&lt;&#x2F;span&gt;


&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;networks&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;default&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;external&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;name&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;mynet&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note the ports. You need them to access the individual services. For example to access Radarr point to &lt;code&gt;http:&#x2F;&#x2F;&amp;lt;your_server&amp;gt;:7878&lt;&#x2F;code&gt;. On the default port (80) we have configured Organizr. Which is a bookmarker to other services to easily access them. Read more about this &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;docs.organizr.app&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;. Note that in the config above, I have added &lt;code&gt;filebrowser&lt;&#x2F;code&gt; and &lt;code&gt;syncthing&lt;&#x2F;code&gt; services in case they become handy.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;configuring-downloader&quot;&gt;Configuring Downloader&lt;a class=&quot;zola-anchor&quot; href=&quot;#configuring-downloader&quot; aria-label=&quot;Anchor link for: configuring-downloader&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;See above in &lt;a href=&quot;https:&#x2F;&#x2F;ntn888.github.io&#x2F;blog&#x2F;diy-nas&#x2F;#download-source&quot;&gt;Download source&lt;&#x2F;a&gt; for more information on this.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;configuring-radarr&quot;&gt;Configuring Radarr&lt;a class=&quot;zola-anchor&quot; href=&quot;#configuring-radarr&quot; aria-label=&quot;Anchor link for: configuring-radarr&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;See the separate post [Configuring Radarr]({% post_url &#x2F;bl&#x2F;2022-02-23-basic-gpio %}) on how to do this. &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;trash-guides.info&#x2F;Radarr&#x2F;&quot;&gt;Trash Guides&lt;&#x2F;a&gt; is very handy. &lt;a href=&quot;https:&#x2F;&#x2F;ntn888.github.io&#x2F;blog&#x2F;radarr-profiles&#x2F;&quot;&gt;Here&#x27;s&lt;&#x2F;a&gt; a post on setting up Radarr quality profiles, so that you pull those juicy, efficient, balanced x265 encodes.&lt;&#x2F;p&gt;
&lt;p&gt;Repeat the same steps with Sonarr as well to configure it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;media-streamer&quot;&gt;Media Streamer&lt;a class=&quot;zola-anchor&quot; href=&quot;#media-streamer&quot; aria-label=&quot;Anchor link for: media-streamer&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The one thing missing in the above config is the media streamer app. This is the service that let&#x27;s you directly play content from your browser! Due to it&#x27;s independant nature from the other apps I decided to keep this in a separate file. So we can easily bring up or down our servarr services together independent of the streaming service.&lt;&#x2F;p&gt;
&lt;p&gt;You can choose from three vendors:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Plex&lt;&#x2F;li&gt;
&lt;li&gt;Emby&lt;&#x2F;li&gt;
&lt;li&gt;Jellyfin&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We will choose Emby. So in your home folder again create a new directory and name it &lt;code&gt;emby&lt;&#x2F;code&gt;. Inside it put the following file &lt;code&gt;docker-compose.yml&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; class=&quot;language-yaml z-code&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;version&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-yaml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;3.2&lt;span class=&quot;z-punctuation z-definition z-string z-end z-yaml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;services&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;emby&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;image&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;emby&#x2F;embyserver&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;container_name&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;emby1&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;network_mode&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;host&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt; Enable DLNA and Wake-on-Lan
&lt;&#x2F;span&gt;      &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;environment&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;UID=1000&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;GID=1000&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;TZ=Europe&#x2F;London&lt;&#x2F;span&gt;
          &lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;- UMASK_SET=022 #optional
&lt;&#x2F;span&gt;      &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;volumes&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&#x2F;mnt&#x2F;main&#x2F;config&#x2F;Emby:&#x2F;config&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&#x2F;mnt&#x2F;main&#x2F;media&#x2F;medialibrary&#x2F;tv:&#x2F;data&#x2F;tvshows&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&#x2F;mnt&#x2F;main&#x2F;media&#x2F;medialibrary&#x2F;movies:&#x2F;data&#x2F;movies&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&#x2F;mnt&#x2F;main&#x2F;media&#x2F;medialibrary&#x2F;music:&#x2F;data&#x2F;music&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;ports&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;8096:8096&lt;&#x2F;span&gt;
          &lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt;- 8920:8920 #optional for secure connections
&lt;&#x2F;span&gt;      &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;restart&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;unless-stopped&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;setting-up-monitoring&quot;&gt;Setting up Monitoring&lt;a class=&quot;zola-anchor&quot; href=&quot;#setting-up-monitoring&quot; aria-label=&quot;Anchor link for: setting-up-monitoring&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Last but not least we can set up beautiful graphs and charts on server monitoring. We use Graphana with Prometheus to achieve this. Here&#x27;s the &lt;code&gt;docker-compose.yml&lt;&#x2F;code&gt; for monitoring tools:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; class=&quot;language-yaml z-code&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-line z-number-sign z-yaml&quot;&gt;#&lt;&#x2F;span&gt; System Monitoring =========================================================================
&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;prometheus&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;image&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;prom&#x2F;prometheus&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;container_name&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;prometheus&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;environment&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;PUID=1000&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;PGID=1000&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;TZ=Europe&#x2F;London&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;UMASK_SET=022&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;volumes&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&#x2F;mnt&#x2F;main&#x2F;config&#x2F;Prometheus&#x2F;prometheus.yml:&#x2F;etc&#x2F;prometheus&#x2F;prometheus.yml&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;ports&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;9292:9090&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;restart&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;unless-stopped&lt;&#x2F;span&gt;

  &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;node-exporter&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;image&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;quay.io&#x2F;prometheus&#x2F;node-exporter:latest&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;container_name&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;node-exporter&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;network_mode&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;host&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;environment&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;PUID=1000&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;PGID=1000&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;TZ=Europe&#x2F;London&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;UMASK_SET=022&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;volumes&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&#x2F;:&#x2F;host:ro,rslave&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;restart&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;unless-stopped&lt;&#x2F;span&gt;
      
      
    
  &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;grafana&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;image&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;grafana&#x2F;grafana&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;container_name&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;grafana&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;environment&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;PUID=1000&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;PGID=1000&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;TZ=Europe&#x2F;London&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;UMASK_SET=022&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;GF_SECURITY_ALLOW_EMBEDDING=true&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;ports&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;3000:3000&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;restart&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;unless-stopped&lt;&#x2F;span&gt;


&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;networks&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;default&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;external&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;name&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;mynet&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that you need to place a file under &lt;code&gt;&#x2F;mnt&#x2F;main&#x2F;config&#x2F;Prometheus&#x2F;prometheus.yml&lt;&#x2F;code&gt; with the following contents:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;global:
  scrape_interval: 5s
  external_labels:
    monitor: &amp;#39;node&amp;#39;
scrape_configs:
  - job_name: &amp;#39;prometheus&amp;#39;
    static_configs:
      - targets: [&amp;#39;192.168.1.169:9292&amp;#39;] ## IP Address of the localhost
  - job_name: &amp;#39;node-exporter&amp;#39;
    static_configs:
      - targets: [&amp;#39;192.168.1.169:9100&amp;#39;] ## IP Address of the localhost

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Remember to change the IP address above to match the one of your server! To configure the GUI watch one of the many Youtube videos on &lt;em&gt;&amp;quot;server monitor with graphana and prometheus&amp;quot;&lt;&#x2F;em&gt;. Here&#x27;s a snapshot of my Graphana view:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;graphana_dash.png&quot; alt=&quot;my grpahana snapshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Project: Gravity Detector</title>
		<published>2023-05-06T00:27:00+00:00</published>
		<updated>2023-05-06T00:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/project-gravity-detector/" type="text/html"/>
		<id>https://ntn888.github.io/blog/project-gravity-detector/</id>
		<content type="html">&lt;p&gt;Here we will hookup a MPU6050 accelerometer&#x2F;gyro sensor to our micro:bit to detect the orientation of the board.&lt;&#x2F;p&gt;
&lt;p&gt;The microbit comes with an onboard accelerometer; but for the purpose of learning the procedure we will attach an external sensor to the board. The microbit also conveniently features a 5x5 LED Matrix, which we will use as a display to indicate direction. Basically we will imitate the effect of a dot on the display to flow towards the direction of gravity.&lt;&#x2F;p&gt;
&lt;p&gt;Given this is our first proper project with Zephyr, this will serve as an exercise of project bring-up and its structural nature.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;We begin by cloning (or copying) the basic &lt;code&gt;hello world&lt;&#x2F;code&gt; project. Which will be our minimal starting point.&lt;&#x2F;p&gt;
&lt;p&gt;Hardware wise we attach the microbit to the breakout board and then attach it and the sensor to the breadboard. Then simply wire as follows:
&lt;img src=&quot;&#x2F;img&#x2F;mpu6050conn.png&quot; alt=&quot;mpu6050 wiring diagram&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We will communicate with the sensor via I^2^C bus. The actual driver file for the MPU6050 is already provided with the Zephyr sources! But we will need to provide an overlay file to reflect our custom wiring (which is the main exercise of using an external sensor). And remember to activate the modules in &lt;code&gt;prj.conf&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;zephyr_root&amp;gt;&#x2F;applications&#x2F;mpu6050&#x2F;boards&#x2F;bbc_microbit_v2.overlay&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&amp;amp;pinctrl {
	i2c1_default: i2c1_default {
		group1 {
			psels = &amp;lt;NRF_PSEL(TWIM_SDA, 1, 0)&amp;gt;,
				&amp;lt;NRF_PSEL(TWIM_SCL, 0, 26)&amp;gt;;
		};
	};

	i2c1_sleep: i2c1_sleep {
		group1 {
			psels = &amp;lt;NRF_PSEL(TWIM_SDA, 1, 0)&amp;gt;,
				&amp;lt;NRF_PSEL(TWIM_SCL, 0, 26)&amp;gt;;
			low-power-enable;
		};
	};
};


&amp;amp;i2c1 {
	compatible = &amp;quot;nordic,nrf-twim&amp;quot;;
	status = &amp;quot;okay&amp;quot;;
	clock-frequency = &amp;lt;I2C_BITRATE_FAST&amp;gt;;

	pinctrl-0 = &amp;lt;&amp;amp;i2c1_default&amp;gt;;
	pinctrl-1 = &amp;lt;&amp;amp;i2c1_sleep&amp;gt;;
	pinctrl-names = &amp;quot;default&amp;quot;, &amp;quot;sleep&amp;quot;;
	&#x2F;*sda-pin = &amp;lt;34&amp;gt;;
	scl-pin = &amp;lt;35&amp;gt;;*&#x2F;
	mpu6050@68 {
		compatible = &amp;quot;invensense,mpu6050&amp;quot;;
		reg = &amp;lt;0x68&amp;gt;;
		status = &amp;quot;okay&amp;quot;;
		int-gpios = &amp;lt;&amp;amp;gpio0 2 GPIO_ACTIVE_HIGH&amp;gt;;
	};
};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;prj.conf&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;CONFIG_I2C=y
CONFIG_SENSOR=y
CONFIG_MPU6050_TRIGGER_NONE=y
CONFIG_CBPRINTF_FP_SUPPORT=y

CONFIG_DISPLAY=y
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The basic overall application structure is as follows:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;.
├── boards
│   └── bbc_microbit_v2.overlay
├── CMakeLists.txt
├── prj.conf
└── src
    └── main.c

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;communication-with-sensor&quot;&gt;Communication with sensor&lt;a class=&quot;zola-anchor&quot; href=&quot;#communication-with-sensor&quot; aria-label=&quot;Anchor link for: communication-with-sensor&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In our first iteration we will achieve basic interaction with the sensor module.&lt;&#x2F;p&gt;
&lt;p&gt;Luckily there is a sample application in the Zephyr: &lt;code&gt;&amp;lt;zephyr_root&amp;gt;&#x2F;zephyr&#x2F;samples&#x2F;sensor&#x2F;mpu6050&#x2F;&lt;&#x2F;code&gt; directory from which we will copy the main.c contents:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c z-code&quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-preprocessor z-include z-c&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-include z-c&quot;&gt;#include&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-other z-lt-gt z-include z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;zephyr&#x2F;kernel.h&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-preprocessor z-include z-c&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-include z-c&quot;&gt;#include&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-other z-lt-gt z-include z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;zephyr&#x2F;device.h&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-preprocessor z-include z-c&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-include z-c&quot;&gt;#include&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-other z-lt-gt z-include z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;zephyr&#x2F;drivers&#x2F;sensor.h&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-preprocessor z-include z-c&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-include z-c&quot;&gt;#include&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-other z-lt-gt z-include z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;stdio.h&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;
&lt;span class=&quot;z-storage z-modifier z-c&quot;&gt;static&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-c&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-c&quot;&gt;char&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-c&quot;&gt;now_str&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-storage z-type z-c&quot;&gt;void&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;
	&lt;span class=&quot;z-storage z-modifier z-c&quot;&gt;static&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-c&quot;&gt;char&lt;&#x2F;span&gt; buf&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;16&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;&#x2F;*&lt;&#x2F;span&gt; ...HH:MM:SS.MMM &lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;*&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-support z-type z-stdint z-c&quot;&gt;uint32_t&lt;&#x2F;span&gt; now &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;k_uptime_get_32&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-storage z-type z-c&quot;&gt;unsigned&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-c&quot;&gt;int&lt;&#x2F;span&gt; ms &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; now &lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;%&lt;&#x2F;span&gt; MSEC_PER_SEC&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-storage z-type z-c&quot;&gt;unsigned&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-c&quot;&gt;int&lt;&#x2F;span&gt; s&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-storage z-type z-c&quot;&gt;unsigned&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-c&quot;&gt;int&lt;&#x2F;span&gt; min&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-storage z-type z-c&quot;&gt;unsigned&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-c&quot;&gt;int&lt;&#x2F;span&gt; h&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;

	now &lt;span class=&quot;z-keyword z-operator z-assignment z-augmented z-c&quot;&gt;&#x2F;=&lt;&#x2F;span&gt; MSEC_PER_SEC&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	s &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; now &lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;%&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;60&lt;span class=&quot;z-storage z-type z-numeric z-c&quot;&gt;U&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	now &lt;span class=&quot;z-keyword z-operator z-assignment z-augmented z-c&quot;&gt;&#x2F;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;60&lt;span class=&quot;z-storage z-type z-numeric z-c&quot;&gt;U&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	min &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; now &lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;%&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;60&lt;span class=&quot;z-storage z-type z-numeric z-c&quot;&gt;U&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	now &lt;span class=&quot;z-keyword z-operator z-assignment z-augmented z-c&quot;&gt;&#x2F;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;60&lt;span class=&quot;z-storage z-type z-numeric z-c&quot;&gt;U&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	h &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; now&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;

	&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-support z-function z-C99 z-c&quot;&gt;snprintf&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;buf&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-word z-c&quot;&gt;sizeof&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;buf&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-other z-placeholder z-c&quot;&gt;%u&lt;&#x2F;span&gt;:&lt;span class=&quot;z-constant z-other z-placeholder z-c&quot;&gt;%02u&lt;&#x2F;span&gt;:&lt;span class=&quot;z-constant z-other z-placeholder z-c&quot;&gt;%02u&lt;&#x2F;span&gt;.&lt;span class=&quot;z-constant z-other z-placeholder z-c&quot;&gt;%03u&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt;
		 h&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; min&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; s&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; ms&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-keyword z-control z-flow z-return z-c&quot;&gt;return&lt;&#x2F;span&gt; buf&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-modifier z-c&quot;&gt;static&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-c&quot;&gt;int&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-c&quot;&gt;process_mpu6050&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-c&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-c&quot;&gt;struct&lt;&#x2F;span&gt; device &lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-c&quot;&gt;dev&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;
	&lt;span class=&quot;z-storage z-type z-c&quot;&gt;struct&lt;&#x2F;span&gt; sensor_value temperature&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-storage z-type z-c&quot;&gt;struct&lt;&#x2F;span&gt; sensor_value accel&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;3&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-storage z-type z-c&quot;&gt;struct&lt;&#x2F;span&gt; sensor_value gyro&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;3&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-storage z-type z-c&quot;&gt;int&lt;&#x2F;span&gt; rc &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;sensor_sample_fetch&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;dev&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;

	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;rc &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;==&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
		rc &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;sensor_channel_get&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;dev&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; SENSOR_CHAN_ACCEL_XYZ&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt;
					accel&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;rc &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;==&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
		rc &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;sensor_channel_get&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;dev&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; SENSOR_CHAN_GYRO_XYZ&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt;
					gyro&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;rc &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;==&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
		rc &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;sensor_channel_get&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;dev&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; SENSOR_CHAN_AMBIENT_TEMP&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt;
					&lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;temperature&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;rc &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;==&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-support z-function z-C99 z-c&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;[&lt;span class=&quot;z-constant z-other z-placeholder z-c&quot;&gt;%s&lt;&#x2F;span&gt;]:&lt;span class=&quot;z-constant z-other z-placeholder z-c&quot;&gt;%g&lt;&#x2F;span&gt; Cel&lt;span class=&quot;z-constant z-character z-escape z-c&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
		       &lt;span class=&quot;z-string z-quoted z-double z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;  accel &lt;span class=&quot;z-constant z-other z-placeholder z-c&quot;&gt;%f&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-placeholder z-c&quot;&gt;%f&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-placeholder z-c&quot;&gt;%f&lt;&#x2F;span&gt; m&#x2F;s&#x2F;s&lt;span class=&quot;z-constant z-character z-escape z-c&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
		       &lt;span class=&quot;z-string z-quoted z-double z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;  gyro  &lt;span class=&quot;z-constant z-other z-placeholder z-c&quot;&gt;%f&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-placeholder z-c&quot;&gt;%f&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-placeholder z-c&quot;&gt;%f&lt;&#x2F;span&gt; rad&#x2F;s&lt;span class=&quot;z-constant z-character z-escape z-c&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt;
		       &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;now_str&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt;
		       &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;sensor_value_to_double&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;temperature&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt;
		       &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;sensor_value_to_double&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;accel&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt;
		       &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;sensor_value_to_double&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;accel&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt;
		       &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;sensor_value_to_double&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;accel&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt;
		       &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;sensor_value_to_double&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;gyro&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt;
		       &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;sensor_value_to_double&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;gyro&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt;
		       &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;sensor_value_to_double&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;gyro&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-c&quot;&gt;else&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-support z-function z-C99 z-c&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;sample fetch&#x2F;get failed: &lt;span class=&quot;z-constant z-other z-placeholder z-c&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-character z-escape z-c&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; rc&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

	&lt;span class=&quot;z-keyword z-control z-flow z-return z-c&quot;&gt;return&lt;&#x2F;span&gt; rc&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;z-meta z-preprocessor z-c&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-c&quot;&gt;#ifdef&lt;&#x2F;span&gt; CONFIG_MPU6050_TRIGGER
&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-c&quot;&gt;static&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-c&quot;&gt;struct&lt;&#x2F;span&gt; sensor_trigger trigger&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-modifier z-c&quot;&gt;static&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-c&quot;&gt;void&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-c&quot;&gt;handle_mpu6050_drdy&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-c&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-c&quot;&gt;struct&lt;&#x2F;span&gt; device &lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-c&quot;&gt;dev&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt;
				&lt;span class=&quot;z-storage z-modifier z-c&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-c&quot;&gt;struct&lt;&#x2F;span&gt; sensor_trigger &lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-c&quot;&gt;trig&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;
	&lt;span class=&quot;z-storage z-type z-c&quot;&gt;int&lt;&#x2F;span&gt; rc &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;process_mpu6050&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;dev&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;

	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;rc &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;!=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-support z-function z-C99 z-c&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;cancelling trigger due to failure: &lt;span class=&quot;z-constant z-other z-placeholder z-c&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-character z-escape z-c&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; rc&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-c&quot;&gt;void&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;sensor_trigger_set&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;dev&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; trig&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-c&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-keyword z-control z-flow z-return z-c&quot;&gt;return&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-preprocessor z-c&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-c&quot;&gt;#endif&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;&#x2F;*&lt;&#x2F;span&gt; CONFIG_MPU6050_TRIGGER &lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;*&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-type z-c&quot;&gt;int&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-c&quot;&gt;main&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-storage z-type z-c&quot;&gt;void&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;
	&lt;span class=&quot;z-storage z-modifier z-c&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-c&quot;&gt;struct&lt;&#x2F;span&gt; device &lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-c&quot;&gt;const&lt;&#x2F;span&gt; mpu6050 &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;DEVICE_DT_GET_ONE&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;invensense_mpu6050&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;

	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;device_is_ready&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;mpu6050&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-support z-function z-C99 z-c&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Device &lt;span class=&quot;z-constant z-other z-placeholder z-c&quot;&gt;%s&lt;&#x2F;span&gt; is not ready&lt;span class=&quot;z-constant z-character z-escape z-c&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; mpu6050&lt;span class=&quot;z-punctuation z-accessor z-c&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;name&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-keyword z-control z-flow z-return z-c&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;z-meta z-preprocessor z-c&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-c&quot;&gt;#ifdef&lt;&#x2F;span&gt; CONFIG_MPU6050_TRIGGER
&lt;&#x2F;span&gt;	trigger &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-c&quot;&gt;struct&lt;&#x2F;span&gt; sensor_trigger&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-punctuation z-accessor z-c&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-member z-c&quot;&gt;type&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; SENSOR_TRIG_DATA_READY&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-punctuation z-accessor z-c&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-member z-c&quot;&gt;chan&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; SENSOR_CHAN_ALL&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;sensor_trigger_set&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;mpu6050&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;trigger&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt;
			       handle_mpu6050_drdy&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-support z-function z-C99 z-c&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Cannot configure trigger&lt;span class=&quot;z-constant z-character z-escape z-c&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-keyword z-control z-flow z-return z-c&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;printk&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Configured for triggered sampling.&lt;span class=&quot;z-constant z-character z-escape z-c&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-preprocessor z-c&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-c&quot;&gt;#endif&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;while&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;IS_ENABLED&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;CONFIG_MPU6050_TRIGGER&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-storage z-type z-c&quot;&gt;int&lt;&#x2F;span&gt; rc &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;process_mpu6050&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;mpu6050&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;

		&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;rc &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;!=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
			&lt;span class=&quot;z-keyword z-control z-flow z-break z-c&quot;&gt;break&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;k_sleep&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;K_SECONDS&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

	&lt;span class=&quot;z-comment z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;&#x2F;*&lt;&#x2F;span&gt; triggered runs with its own thread after exit &lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;*&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-keyword z-control z-flow z-return z-c&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The output on the Zephyr serial console:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;*** Booting Zephyr OS build zephyr-v3.3.0-3014-ge59e65dc75e4 ***
[0:00:00.008]:19.9182 Cel
  accel 0.351947 -0.275334 10.371681 m&#x2F;s&#x2F;s
  gyro  -0.021583 -0.014655 -0.006794 rad&#x2F;s
[0:00:02.019]:19.8712 Cel
  accel 0.272938 -0.150835 10.292672 m&#x2F;s&#x2F;s
  gyro  -0.019584 -0.009592 -0.012124 rad&#x2F;s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;output-via-led-matrix&quot;&gt;Output via LED Matrix&lt;a class=&quot;zola-anchor&quot; href=&quot;#output-via-led-matrix&quot; aria-label=&quot;Anchor link for: output-via-led-matrix&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Now that we have confirmed successful communication with the module, we will strip off code related to console logging. And introduce the following function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c z-code&quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-storage z-type z-c&quot;&gt;void&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-c&quot;&gt;update_mydisplay&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-storage z-type z-c&quot;&gt;double&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-c&quot;&gt;y&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-c&quot;&gt;double&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-c&quot;&gt;z&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-c&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-c&quot;&gt;struct&lt;&#x2F;span&gt; device &lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-c&quot;&gt;dev&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;
	&lt;span class=&quot;z-comment z-line z-double-slash z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; makeup buf here
&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;&#x2F;*&lt;&#x2F;span&gt;	buf[0] = PIXEL_MASK(1, 0, 1, 0, 1);
	buf[1] = PIXEL_MASK(1, 1, 0, 0, 1);
	buf[2] = PIXEL_MASK(1, 0, 1, 0, 1);
	buf[3] = PIXEL_MASK(1, 0, 0, 1, 1);
	buf[4] = PIXEL_MASK(1, 0, 1, 0, 1);
&lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;*&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-support z-type z-stdint z-c&quot;&gt;uint8_t&lt;&#x2F;span&gt; tbuf&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;5&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;5&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-storage z-type z-c&quot;&gt;int&lt;&#x2F;span&gt; i&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; j&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; ii&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; jj&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; ret&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;

	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;i &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt; i &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;5&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt; i&lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;++&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;j &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt; j &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;5&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt; j&lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;++&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
			tbuf&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;i&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;j&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;

	&lt;span class=&quot;z-comment z-line z-double-slash z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; work the dot here
&lt;&#x2F;span&gt;	jj &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;-&lt;&#x2F;span&gt; y&lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;10&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;5&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	ii &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; z&lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;10&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;5&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;

	&lt;span class=&quot;z-comment z-line z-double-slash z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; assign ceiling values to trap the dot into display!
&lt;&#x2F;span&gt;	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;ii &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;4&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
		ii &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;4&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;jj &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;4&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
		jj &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;4&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;ii &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
		ii &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;jj &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
		jj &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;

	tbuf&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;ii&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;jj&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;i &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt; i &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;5&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt; i&lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;++&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
		buf&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;i&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	
	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;i &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt; i &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;5&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt; i&lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;++&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;j &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt; j &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;5&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt; j&lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;++&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
			buf&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;i&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-augmented z-c&quot;&gt;|=&lt;&#x2F;span&gt; tbuf&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;i&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;j&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
			&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;j &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;4&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
				buf&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;i&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-augmented z-c&quot;&gt;&amp;lt;&amp;lt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

	ret &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;display_set_brightness&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;dev&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-hexadecimal z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-numeric z-base z-c&quot;&gt;0x&lt;&#x2F;span&gt;7F&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;ret &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;printk&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;display_set_brightness failed: &lt;span class=&quot;z-constant z-other z-placeholder z-c&quot;&gt;%u&lt;&#x2F;span&gt;&#x2F;&lt;span class=&quot;z-constant z-other z-placeholder z-c&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-character z-escape z-c&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt;
			&lt;span class=&quot;z-support z-constant z-c&quot;&gt;__LINE__&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; ret&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
	ret &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;display_write&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;dev&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;buf_desc&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; buf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;ret &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;printk&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;display_write failed: &lt;span class=&quot;z-constant z-other z-placeholder z-c&quot;&gt;%u&lt;&#x2F;span&gt;&#x2F;&lt;span class=&quot;z-constant z-other z-placeholder z-c&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-character z-escape z-c&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt;
			&lt;span class=&quot;z-support z-constant z-c&quot;&gt;__LINE__&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; ret&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

	ret &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;display_blanking_off&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;dev&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;ret &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;printk&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;display_blanking_off failed: &lt;span class=&quot;z-constant z-other z-placeholder z-c&quot;&gt;%u&lt;&#x2F;span&gt;&#x2F;&lt;span class=&quot;z-constant z-other z-placeholder z-c&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-character z-escape z-c&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt;
			&lt;span class=&quot;z-support z-constant z-c&quot;&gt;__LINE__&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; ret&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the code above, we use an intermediate 2d array to represent the LED Matrix to flexibly refer to our indicating dot. This &lt;em&gt;dot&lt;&#x2F;em&gt; will move towards the direction of flowing gravity. Now our sensor is 3-dimensional but we only consider 2 axes for the 2d array. By means of trial-and-error, this works out to be the x and z axis of the sensor, which is passed to this function.&lt;&#x2F;p&gt;
&lt;p&gt;Since our final LED Matrix data is single dimensional 5bit array; we need to populate this data by means of our temporary 2d array. We do this by bitwise shifting to the left while cycling through each row and copy it through.&lt;&#x2F;p&gt;
&lt;p&gt;And we need to periodically call this function after processing sensor data. Here&#x27;s the updated main.c:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c z-code&quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-preprocessor z-include z-c&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-include z-c&quot;&gt;#include&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-other z-lt-gt z-include z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;zephyr&#x2F;kernel.h&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-preprocessor z-include z-c&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-include z-c&quot;&gt;#include&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-other z-lt-gt z-include z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;zephyr&#x2F;device.h&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-preprocessor z-include z-c&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-include z-c&quot;&gt;#include&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-other z-lt-gt z-include z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;zephyr&#x2F;drivers&#x2F;display.h&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-preprocessor z-include z-c&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-include z-c&quot;&gt;#include&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-other z-lt-gt z-include z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;zephyr&#x2F;drivers&#x2F;sensor.h&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-preprocessor z-include z-c&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-include z-c&quot;&gt;#include&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-other z-lt-gt z-include z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;stdio.h&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-preprocessor z-macro z-c&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-define z-c&quot;&gt;#define&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-preprocessor z-macro z-c&quot;&gt; &lt;span class=&quot;z-entity z-name z-function z-preprocessor z-c&quot;&gt;PIXEL_BIT&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-preprocessor z-macro z-parameters z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-c&quot;&gt;idx&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-c&quot;&gt;val&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-preprocessor z-macro z-c&quot;&gt;  &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;val &lt;span class=&quot;z-keyword z-operator z-ternary z-c&quot;&gt;?&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;BIT&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;idx&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-ternary z-c&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-preprocessor z-macro z-c&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-define z-c&quot;&gt;#define&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-preprocessor z-macro z-c&quot;&gt; &lt;span class=&quot;z-entity z-name z-function z-preprocessor z-c&quot;&gt;PIXEL_MASK&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-preprocessor z-macro z-parameters z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-variadic z-c&quot;&gt;...&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-preprocessor z-macro z-c&quot;&gt;      &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;FOR_EACH_IDX&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;PIXEL_BIT&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;|&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; __VA_ARGS__&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-modifier z-c&quot;&gt;static&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-c&quot;&gt;struct&lt;&#x2F;span&gt; display_capabilities caps&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-storage z-modifier z-c&quot;&gt;static&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-stdint z-c&quot;&gt;uint8_t&lt;&#x2F;span&gt; buf&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;5&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-storage z-modifier z-c&quot;&gt;static&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-c&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-c&quot;&gt;struct&lt;&#x2F;span&gt; display_buffer_descriptor buf_desc &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-punctuation z-accessor z-c&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-member z-c&quot;&gt;buf_size&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-word z-c&quot;&gt;sizeof&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;buf&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-punctuation z-accessor z-c&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-member z-c&quot;&gt;width&lt;&#x2F;span&gt;    &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;5&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-punctuation z-accessor z-c&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-member z-c&quot;&gt;height&lt;&#x2F;span&gt;   &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;5&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-punctuation z-accessor z-c&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-member z-c&quot;&gt;pitch&lt;&#x2F;span&gt;    &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;8&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-type z-c&quot;&gt;void&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-c&quot;&gt;update_mydisplay&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-storage z-type z-c&quot;&gt;double&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-c&quot;&gt;y&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-c&quot;&gt;double&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-c&quot;&gt;z&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-c&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-c&quot;&gt;struct&lt;&#x2F;span&gt; device &lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-c&quot;&gt;dev&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;
	&lt;span class=&quot;z-comment z-line z-double-slash z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; makeup buf here
&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;&#x2F;*&lt;&#x2F;span&gt;	buf[0] = PIXEL_MASK(1, 0, 1, 0, 1);
	buf[1] = PIXEL_MASK(1, 1, 0, 0, 1);
	buf[2] = PIXEL_MASK(1, 0, 1, 0, 1);
	buf[3] = PIXEL_MASK(1, 0, 0, 1, 1);
	buf[4] = PIXEL_MASK(1, 0, 1, 0, 1);
&lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;*&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-support z-type z-stdint z-c&quot;&gt;uint8_t&lt;&#x2F;span&gt; tbuf&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;5&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;5&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-storage z-type z-c&quot;&gt;int&lt;&#x2F;span&gt; i&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; j&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; ii&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; jj&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; ret&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;

	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;i &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt; i &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;5&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt; i&lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;++&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;j &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt; j &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;5&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt; j&lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;++&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
			tbuf&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;i&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;j&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;

	&lt;span class=&quot;z-comment z-line z-double-slash z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; work the dot here
&lt;&#x2F;span&gt;	jj &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;-&lt;&#x2F;span&gt; y&lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;10&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;5&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	ii &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; z&lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;10&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;5&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;

	&lt;span class=&quot;z-comment z-line z-double-slash z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; assign ceiling values to trap the dot into display!
&lt;&#x2F;span&gt;	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;ii &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;4&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
		ii &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;4&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;jj &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;4&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
		jj &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;4&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;ii &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
		ii &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;jj &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
		jj &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;

	tbuf&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;ii&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;jj&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;i &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt; i &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;5&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt; i&lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;++&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
		buf&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;i&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	
	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;i &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt; i &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;5&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt; i&lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;++&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;j &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt; j &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;5&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt; j&lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;++&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
			buf&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;i&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-augmented z-c&quot;&gt;|=&lt;&#x2F;span&gt; tbuf&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;i&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;j&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
			&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;j &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;4&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
				buf&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;i&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-augmented z-c&quot;&gt;&amp;lt;&amp;lt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

	ret &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;display_set_brightness&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;dev&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-hexadecimal z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-numeric z-base z-c&quot;&gt;0x&lt;&#x2F;span&gt;7F&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;ret &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;printk&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;display_set_brightness failed: &lt;span class=&quot;z-constant z-other z-placeholder z-c&quot;&gt;%u&lt;&#x2F;span&gt;&#x2F;&lt;span class=&quot;z-constant z-other z-placeholder z-c&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-character z-escape z-c&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt;
			&lt;span class=&quot;z-support z-constant z-c&quot;&gt;__LINE__&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; ret&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
	ret &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;display_write&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;dev&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;buf_desc&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; buf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;ret &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;printk&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;display_write failed: &lt;span class=&quot;z-constant z-other z-placeholder z-c&quot;&gt;%u&lt;&#x2F;span&gt;&#x2F;&lt;span class=&quot;z-constant z-other z-placeholder z-c&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-character z-escape z-c&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt;
			&lt;span class=&quot;z-support z-constant z-c&quot;&gt;__LINE__&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; ret&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

	ret &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;display_blanking_off&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;dev&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;ret &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;printk&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;display_blanking_off failed: &lt;span class=&quot;z-constant z-other z-placeholder z-c&quot;&gt;%u&lt;&#x2F;span&gt;&#x2F;&lt;span class=&quot;z-constant z-other z-placeholder z-c&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-character z-escape z-c&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt;
			&lt;span class=&quot;z-support z-constant z-c&quot;&gt;__LINE__&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; ret&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-modifier z-c&quot;&gt;static&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-c&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-c&quot;&gt;char&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-c&quot;&gt;now_str&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-storage z-type z-c&quot;&gt;void&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;
	&lt;span class=&quot;z-storage z-modifier z-c&quot;&gt;static&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-c&quot;&gt;char&lt;&#x2F;span&gt; buf&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;16&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;&#x2F;*&lt;&#x2F;span&gt; ...HH:MM:SS.MMM &lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;*&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-support z-type z-stdint z-c&quot;&gt;uint32_t&lt;&#x2F;span&gt; now &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;k_uptime_get_32&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-storage z-type z-c&quot;&gt;unsigned&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-c&quot;&gt;int&lt;&#x2F;span&gt; ms &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; now &lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;%&lt;&#x2F;span&gt; MSEC_PER_SEC&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-storage z-type z-c&quot;&gt;unsigned&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-c&quot;&gt;int&lt;&#x2F;span&gt; s&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-storage z-type z-c&quot;&gt;unsigned&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-c&quot;&gt;int&lt;&#x2F;span&gt; min&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-storage z-type z-c&quot;&gt;unsigned&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-c&quot;&gt;int&lt;&#x2F;span&gt; h&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;

	now &lt;span class=&quot;z-keyword z-operator z-assignment z-augmented z-c&quot;&gt;&#x2F;=&lt;&#x2F;span&gt; MSEC_PER_SEC&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	s &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; now &lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;%&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;60&lt;span class=&quot;z-storage z-type z-numeric z-c&quot;&gt;U&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	now &lt;span class=&quot;z-keyword z-operator z-assignment z-augmented z-c&quot;&gt;&#x2F;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;60&lt;span class=&quot;z-storage z-type z-numeric z-c&quot;&gt;U&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	min &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; now &lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;%&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;60&lt;span class=&quot;z-storage z-type z-numeric z-c&quot;&gt;U&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	now &lt;span class=&quot;z-keyword z-operator z-assignment z-augmented z-c&quot;&gt;&#x2F;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;60&lt;span class=&quot;z-storage z-type z-numeric z-c&quot;&gt;U&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	h &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; now&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;

	&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-support z-function z-C99 z-c&quot;&gt;snprintf&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;buf&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-word z-c&quot;&gt;sizeof&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;buf&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-other z-placeholder z-c&quot;&gt;%u&lt;&#x2F;span&gt;:&lt;span class=&quot;z-constant z-other z-placeholder z-c&quot;&gt;%02u&lt;&#x2F;span&gt;:&lt;span class=&quot;z-constant z-other z-placeholder z-c&quot;&gt;%02u&lt;&#x2F;span&gt;.&lt;span class=&quot;z-constant z-other z-placeholder z-c&quot;&gt;%03u&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt;
		 h&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; min&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; s&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; ms&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-keyword z-control z-flow z-return z-c&quot;&gt;return&lt;&#x2F;span&gt; buf&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;z-storage z-modifier z-c&quot;&gt;static&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-c&quot;&gt;int&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-c&quot;&gt;process_mpu6050&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-c&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-c&quot;&gt;struct&lt;&#x2F;span&gt; device &lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-c&quot;&gt;dev&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-c&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-c&quot;&gt;struct&lt;&#x2F;span&gt; device &lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-c&quot;&gt;ddev&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;
	&lt;span class=&quot;z-storage z-type z-c&quot;&gt;struct&lt;&#x2F;span&gt; sensor_value temperature&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-storage z-type z-c&quot;&gt;struct&lt;&#x2F;span&gt; sensor_value accel&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;3&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-storage z-type z-c&quot;&gt;struct&lt;&#x2F;span&gt; sensor_value gyro&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;3&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-storage z-type z-c&quot;&gt;int&lt;&#x2F;span&gt; rc &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;sensor_sample_fetch&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;dev&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;

	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;rc &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;==&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
		rc &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;sensor_channel_get&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;dev&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; SENSOR_CHAN_ACCEL_XYZ&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt;
					accel&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;rc &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;==&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
		rc &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;sensor_channel_get&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;dev&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; SENSOR_CHAN_GYRO_XYZ&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt;
					gyro&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;rc &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;==&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
		rc &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;sensor_channel_get&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;dev&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; SENSOR_CHAN_AMBIENT_TEMP&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt;
					&lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;temperature&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;rc &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;==&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
&lt;span class=&quot;z-comment z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;&#x2F;*&lt;&#x2F;span&gt;		printf(&amp;quot;[%s]:%g Cel\n&amp;quot;
		       &amp;quot;  accel %f %f %f m&#x2F;s&#x2F;s\n&amp;quot;
		       &amp;quot;  gyro  %f %f %f rad&#x2F;s\n&amp;quot;,
		       now_str(),
		       sensor_value_to_double(&amp;amp;temperature),
		       sensor_value_to_double(&amp;amp;accel[0]),
		       sensor_value_to_double(&amp;amp;accel[1]),
		       sensor_value_to_double(&amp;amp;accel[2]),
		       sensor_value_to_double(&amp;amp;gyro[0]),
		       sensor_value_to_double(&amp;amp;gyro[1]),
		       sensor_value_to_double(&amp;amp;gyro[2]));&lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;*&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-c&quot;&gt;else&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-support z-function z-C99 z-c&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;sample fetch&#x2F;get failed: &lt;span class=&quot;z-constant z-other z-placeholder z-c&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-character z-escape z-c&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; rc&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

	&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;update_mydisplay&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;sensor_value_to_double&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;accel&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;sensor_value_to_double&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;accel&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; ddev&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;

	&lt;span class=&quot;z-keyword z-control z-flow z-return z-c&quot;&gt;return&lt;&#x2F;span&gt; rc&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;


&lt;span class=&quot;z-storage z-type z-c&quot;&gt;int&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-c&quot;&gt;main&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-storage z-type z-c&quot;&gt;void&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;
	&lt;span class=&quot;z-storage z-modifier z-c&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-c&quot;&gt;struct&lt;&#x2F;span&gt; device &lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-c&quot;&gt;const&lt;&#x2F;span&gt; mpu6050 &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;DEVICE_DT_GET_ONE&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;invensense_mpu6050&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;

	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;device_is_ready&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;mpu6050&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-support z-function z-C99 z-c&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Device &lt;span class=&quot;z-constant z-other z-placeholder z-c&quot;&gt;%s&lt;&#x2F;span&gt; is not ready&lt;span class=&quot;z-constant z-character z-escape z-c&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; mpu6050&lt;span class=&quot;z-punctuation z-accessor z-c&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;name&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-keyword z-control z-flow z-return z-c&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

	&lt;span class=&quot;z-storage z-type z-c&quot;&gt;int&lt;&#x2F;span&gt; ret&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-storage z-modifier z-c&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-c&quot;&gt;struct&lt;&#x2F;span&gt; device &lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-c&quot;&gt;const&lt;&#x2F;span&gt; dev &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;DEVICE_DT_GET_ONE&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;nordic_nrf_led_matrix&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;

	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;!&lt;&#x2F;span&gt;dev&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;printk&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Display device not ready&lt;span class=&quot;z-constant z-character z-escape z-c&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-keyword z-control z-flow z-return z-c&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

	&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;display_get_capabilities&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;dev&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;caps&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;caps&lt;span class=&quot;z-punctuation z-accessor z-c&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-member z-c&quot;&gt;supported_pixel_formats&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;&amp;amp;&lt;&#x2F;span&gt; PIXEL_FORMAT_MONO01&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;printk&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Expected pixel format not supported&lt;span class=&quot;z-constant z-character z-escape z-c&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-keyword z-control z-flow z-return z-c&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

	ret &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;display_set_pixel_format&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;dev&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; PIXEL_FORMAT_MONO01&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;ret &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;printk&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;display_set_pixel_format failed: &lt;span class=&quot;z-constant z-other z-placeholder z-c&quot;&gt;%u&lt;&#x2F;span&gt;&#x2F;&lt;span class=&quot;z-constant z-other z-placeholder z-c&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-character z-escape z-c&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt;
			&lt;span class=&quot;z-support z-constant z-c&quot;&gt;__LINE__&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; ret&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

	&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;while&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;IS_ENABLED&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;CONFIG_MPU6050_TRIGGER&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-storage z-type z-c&quot;&gt;int&lt;&#x2F;span&gt; rc &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;process_mpu6050&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;mpu6050&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; dev&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;

		&lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;rc &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;!=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
			&lt;span class=&quot;z-keyword z-control z-flow z-break z-c&quot;&gt;break&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
		&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;k_msleep&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;100&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

	&lt;span class=&quot;z-comment z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;&#x2F;*&lt;&#x2F;span&gt; triggered runs with its own thread after exit &lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;*&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
	&lt;span class=&quot;z-keyword z-control z-flow z-return z-c&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;accel_final_effect.gif&quot; alt=&quot;animation final effect&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Micro:Bit IO breakout board</title>
		<published>2023-05-05T00:27:00+00:00</published>
		<updated>2023-05-05T00:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/micro-bit-breakout/" type="text/html"/>
		<id>https://ntn888.github.io/blog/micro-bit-breakout/</id>
		<content type="html">&lt;p&gt;As we have seen prevously, we have switched our interest to the Nordic family of chips.&lt;&#x2F;p&gt;
&lt;p&gt;Providing a whole portfolio of low-power wireless microcontrollers, we are spoiled for choice when it comes to IoT centric projects. Given that 99% of embedded projects these days is somehow IoT based, this is the rationale behind going for these chips. Infact RF is in the name for Nordic, think nRF (the name of their mcu range).&lt;&#x2F;p&gt;
&lt;p&gt;In a wide range of Nordic chips our go-to is the nRF52833 controller. I find it has the right balance of cost vs performance. Detailed info of this chip &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.nordicsemi.com&#x2F;products&#x2F;nrf52833&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Now there are two viable hobbiest boards for this MCU&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;nRF52840 Dongle [Which uses a similar chip only difference being double RAM&#x2F;ROM]&lt;&#x2F;li&gt;
&lt;li&gt;Micro:Bit v2&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;micro_bit.jpg&quot; alt=&quot;bbc micro:bit&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I choose the Micro:Bit. Here&#x27;s why.&lt;&#x2F;p&gt;
&lt;p&gt;It packs in a lot of on-board sensors, which can be beneficial to quickly getting up and running; and at a reasonable price overhead. It retails for around $17.&lt;&#x2F;p&gt;
&lt;p&gt;It is also widely available.&lt;&#x2F;p&gt;
&lt;p&gt;Although its initial concept was to aid in kids&#x27; programming education; it has found its way into the arsenal of the serious firmware developer. Now isn&#x27;t that a very familiar story?&lt;&#x2F;p&gt;
&lt;p&gt;But there is one hurdle in using the Micro:Bit in breadboarding prototypes. There is a solution to this. Enter, the &lt;em&gt;T-type breakout board&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;micro_bit_breakout.jpg&quot; alt=&quot;breakout board pic&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It can be procured from Aliexpress &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.aliexpress.com&#x2F;item&#x2F;1005003217623333.html&quot;&gt;here&lt;&#x2F;a&gt;. Here&#x27;s an excerpt of the board&#x27;s device tree in Zephyr that conveniently shows the GPIO mapping of the nRF52833 to the marked pins in the breakout board.&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;edge_connector: connector {
		compatible = &amp;quot;microbit,edge-connector&amp;quot;;
		#gpio-cells = &amp;lt;2&amp;gt;;
		gpio-map-mask = &amp;lt;0xffffffff 0xffffffc0&amp;gt;;
		gpio-map-pass-thru = &amp;lt;0 0x3f&amp;gt;;
		gpio-map = &amp;lt;0 0 &amp;amp;gpio0 2 0&amp;gt;,	&#x2F;* P0 *&#x2F;
			   &amp;lt;1 0 &amp;amp;gpio0 3 0&amp;gt;,	&#x2F;* P1 *&#x2F;
			   &amp;lt;2 0 &amp;amp;gpio0 4 0&amp;gt;,	&#x2F;* P2 *&#x2F;
			   &amp;lt;3 0 &amp;amp;gpio0 31 0&amp;gt;,	&#x2F;* P3 *&#x2F;
			   &amp;lt;4 0 &amp;amp;gpio0 28 0&amp;gt;,	&#x2F;* P4 *&#x2F;
			   &amp;lt;5 0 &amp;amp;gpio0 14 0&amp;gt;,	&#x2F;* P5 *&#x2F;
			   &amp;lt;6 0 &amp;amp;gpio1 5 0&amp;gt;,	&#x2F;* P6 *&#x2F;
			   &amp;lt;7 0 &amp;amp;gpio0 11 0&amp;gt;,	&#x2F;* P7 *&#x2F;
			   &amp;lt;8 0 &amp;amp;gpio0 10 0&amp;gt;,	&#x2F;* P8 *&#x2F;
			   &amp;lt;9 0 &amp;amp;gpio0 9 0&amp;gt;,	&#x2F;* P9 *&#x2F;
			   &amp;lt;10 0 &amp;amp;gpio0 30 0&amp;gt;,	&#x2F;* P10 *&#x2F;
			   &amp;lt;11 0 &amp;amp;gpio0 23 0&amp;gt;,	&#x2F;* P11 *&#x2F;
			   &amp;lt;12 0 &amp;amp;gpio0 12 0&amp;gt;,	&#x2F;* P12 *&#x2F;
			   &amp;lt;13 0 &amp;amp;gpio0 17 0&amp;gt;,	&#x2F;* P13 *&#x2F;
			   &amp;lt;14 0 &amp;amp;gpio0 1 0&amp;gt;,	&#x2F;* P14 *&#x2F;
			   &amp;lt;15 0 &amp;amp;gpio0 13 0&amp;gt;,	&#x2F;* P15 *&#x2F;
			   &amp;lt;16 0 &amp;amp;gpio1 2 0&amp;gt;,	&#x2F;* P16 *&#x2F;
			   &amp;lt;19 0 &amp;amp;gpio0 26 0&amp;gt;,	&#x2F;* P19 *&#x2F;
			   &amp;lt;20 0 &amp;amp;gpio1 0 0&amp;gt;;	&#x2F;* P20 *&#x2F;
};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;For an updated post of a newly available alternative see &lt;a href=&quot;https:&#x2F;&#x2F;ntn888.github.io&#x2F;blog&#x2F;nrf-clones&#x2F;&quot;&gt;this post&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>802.15.4 Wireless</title>
		<published>2023-04-22T00:27:00+00:00</published>
		<updated>2023-04-22T00:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/802-15-4-wireless/" type="text/html"/>
		<id>https://ntn888.github.io/blog/802-15-4-wireless/</id>
		<content type="html">&lt;p&gt;&#x27;802.15.4&#x27; is a low power low-data-rate  wireless LAN comminications protocol ideally suited for microcontrollers. And only requires roughly 10-20mA of current to operate (on a 3.3V supply). It has been widely adopted in many applications, such as wireless sensor networks, home automation, and industrial control. It is similar to the widely popular zigbee protocol but is an open standard. Which means it is shipped with opensource RTOS&#x27;s for platforms that are compatible... My main gripe is that it is yet not popular among hobyists who tend to reach for WiFi in place of this low power network even in microcontroller settings...&lt;&#x2F;p&gt;
&lt;p&gt;The Nordic seires of microcontrollers well support this protocol along with BLE. Compared to BLE this is more suited for industrial noisy environments!&lt;&#x2F;p&gt;
&lt;p&gt;The IEEE 802.15.4 standard defines the physical layer (PHY) and medium access control (MAC) layer for LR-WPANs(low-rate wireless personal area networks). The PHY layer specifies the radio transmission characteristics, including the modulation scheme, data rate, and frequency band. The MAC layer provides mechanisms for channel access, data framing, and error control.&lt;&#x2F;p&gt;
&lt;p&gt;The IEEE 802.15.4 standard supports two frequency bands: 2.4 GHz and 868&#x2F;915 MHz. The 2.4 GHz band is used in most LR-WPAN applications and provides a data rate of 250 kbps. The 868&#x2F;915 MHz band is used in some applications that require longer range but lower data rates.&lt;&#x2F;p&gt;
&lt;p&gt;The MAC layer of IEEE 802.15.4 uses a beacon-enabled mode and a non-beacon-enabled mode. In the beacon-enabled mode, a coordinator device periodically transmits a beacon frame that contains information about the network. In the non-beacon-enabled mode, devices can transmit data at any time, without waiting for a beacon frame.&lt;&#x2F;p&gt;
&lt;p&gt;IEEE 802.15.4 also supports two types of topologies: star and peer-to-peer. In the star topology, all devices communicate with a central coordinator device. In the peer-to-peer topology, devices can communicate directly with each other.&lt;&#x2F;p&gt;
&lt;p&gt;In future articles we will see this protocol in action with the Micro:bitV2 which is equipped with the Nordic nRF52833.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Selfhosted email delivery with postfix</title>
		<published>2022-12-27T00:27:00+00:00</published>
		<updated>2022-12-27T00:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/postfix-mail/" type="text/html"/>
		<id>https://ntn888.github.io/blog/postfix-mail/</id>
		<content type="html">&lt;p&gt;Note that it is assumed that a Gitlab docker instance is setup on a Debian 10&#x2F;11 machine... This article follows the &lt;a href=&quot;https:&#x2F;&#x2F;ntn888.github.io&#x2F;blog&#x2F;selfhosted-gitlab&#x2F;&quot;&gt;post&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;According to the docs, the official image of Gitlab doesn&#x27;t include a Mail Transfer Agent (MTA) preinstalled. For our purposes this is the program that routes out the email from our system. So we&#x27;ll install it on the host system and setup Gitlab to route mail to it.&lt;&#x2F;p&gt;
&lt;p&gt;This is simple enough, but getting our local hosted email service to play nice with Gmail is a different story.&lt;&#x2F;p&gt;
&lt;p&gt;We begin by setting up basic postfix email. Install &lt;code&gt;postfix&lt;&#x2F;code&gt; as per &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.digitalocean.com&#x2F;community&#x2F;tutorials&#x2F;how-to-install-and-configure-postfix-on-ubuntu-20-04&quot;&gt;this&lt;&#x2F;a&gt;. We only need &lt;em&gt;step one&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To test:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;echo &amp;quot;Subject: test&amp;quot; | sendmail -v mymail@mydomain.com
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will not actually deliver the mail as yet; but atleast it should run without errors!&lt;&#x2F;p&gt;
&lt;p&gt;To allow the docker container to access postfix we make a small change to &lt;code&gt;&#x2F;etc&#x2F;postfix&#x2F;main.cf&lt;&#x2F;code&gt;. Add &lt;code&gt;0.0.0.0&#x2F;0&lt;&#x2F;code&gt; to &lt;code&gt;mynetworks&lt;&#x2F;code&gt;. This allows any IP to initiate email, as IP address change with every container restarts, we will take this approach.&lt;&#x2F;p&gt;
&lt;p&gt;Remember to restart postfix on every edit to this file by:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sudo systemctl reload postfix
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then add this smtp settings in our Gitlab&#x27;s &lt;code&gt;docker-compose.yml&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;gitlab_rails[&amp;#39;smtp_enable&amp;#39;] = true
gitlab_rails[&amp;#39;smtp_address&amp;#39;] = &amp;quot;gitlab.example.com&amp;quot;
gitlab_rails[&amp;#39;smtp_port&amp;#39;] = 25
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that &lt;code&gt;&#x27;smtp_address&#x27;&lt;&#x2F;code&gt; will be the FQDN that we set as our host machine domain.&lt;&#x2F;p&gt;
&lt;p&gt;Now to test, execute the following:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sudo docker exec -it  gitlab-compose-web-1 bash
gitlab-rails console -e production

Notify.test_email(&amp;#39;mymail@mydomain.com&amp;#39;, &amp;#39;Message Subject&amp;#39;, &amp;#39;Message Body&amp;#39;).deliver_now
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the first command &lt;code&gt;gitlab-compose-web-1&lt;&#x2F;code&gt; is the name of the container. To check your running name run &lt;code&gt;sudo docker ps&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Note this will not yet work if you&#x27;re using a Gmail addresses read on to fix this...&lt;&#x2F;p&gt;
&lt;h2 id=&quot;setting-up-sasl-for-gmail-receipients&quot;&gt;Setting up SASL (for Gmail receipients)&lt;a class=&quot;zola-anchor&quot; href=&quot;#setting-up-sasl-for-gmail-receipients&quot; aria-label=&quot;Anchor link for: setting-up-sasl-for-gmail-receipients&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Next thing to do is to install Dovecot. On debian:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sudo apt install dovecot-core dovecot-pop3d dovecot-imapd
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then in &lt;code&gt;&#x2F;etc&#x2F;dovecot&#x2F;conf.d&#x2F;10-master.conf&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;service auth {
  unix_listener auth-userdb {
    mode = 0666
    user = postfix
    group = postfix
  }

  # Postfix smtp-auth
  #unix_listener &#x2F;var&#x2F;spool&#x2F;postfix&#x2F;private&#x2F;auth {
  #  mode = 0666
  #}

  # Auth process is run as this user.
  #user = $default_internal_user
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Don&#x27;t forget to restart dovecot:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sudo systemctl restart dovecot
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then modify postfix to use dovecot ADD &lt;code&gt;&#x2F;etc&#x2F;postfix&#x2F;main.cf&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;smtpd_sasl_type = dovecot
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Don&#x27;t forget to restart postfix:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sudo systemctl reload postfix
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Lastly we need to add a TXT record for our domain:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;v=spf1 ip4:x.x.x.x ~all
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;where &lt;code&gt;x.x.x.x&lt;&#x2F;code&gt; is the IP of the server.&lt;&#x2F;p&gt;
&lt;p&gt;Now try:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;echo &amp;quot;Subject: test&amp;quot; | sendmail -v me@gmail.com
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Tip: handy commands to view the log messages:
postfix: &lt;code&gt;sudo tail -f &#x2F;var&#x2F;log&#x2F;mail.log&lt;&#x2F;code&gt;
Dovecot: &lt;code&gt;sudo tail -f &#x2F;var&#x2F;log&#x2F;syslog&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Sphinx Documentation Generator</title>
		<published>2022-12-07T00:27:00+00:00</published>
		<updated>2022-12-07T00:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/sphinx/" type="text/html"/>
		<id>https://ntn888.github.io/blog/sphinx/</id>
		<content type="html">&lt;p&gt;Today I write about the python documentation generator; Sphinx. Which is based on reStructuredText.&lt;&#x2F;p&gt;
&lt;p&gt;reStructuredText is an alternative to Markdown in styling text fragments using simple relevant syntax. However restructured text (or reST for short) is bit more versatile and in my opinion more featured. It is also extensible using third party plugins! One notable feature is the native ability to handle LaTex; which is great for including Mathematic formulas.&lt;&#x2F;p&gt;
&lt;p&gt;In comparison with Markdown, reST aims to be more readable and less obtrusive. For example link addresses are provided with reference as opposed to being inline as in Markdown. The second method is also possible as I said it being versatile.&lt;&#x2F;p&gt;
&lt;p&gt;I intend to document my ideas about RISC-V lowlevel concepts in Sphinx; I believe this will be an interesting take.&lt;&#x2F;p&gt;
&lt;p&gt;One of the initial difficulty in grasping Sphinx is understanding the toctree for linking the table of contents. Which I will clarify here...&lt;&#x2F;p&gt;
&lt;p&gt;Basically it is a recursive link to the other page as a relative reference from the current page&#x27;s current directory. Once you have generated the base skeleton project from the &lt;code&gt;sphinx-quickstart&lt;&#x2F;code&gt; command; you just need to append these links to other pages in the toc section in &lt;code&gt;index.rst&lt;&#x2F;code&gt;. Like so:&lt;&#x2F;p&gt;
&lt;p&gt;index.rst:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;.. toctree::
   :maxdepth: 4
   :caption: Contents:

   fm&#x2F;welcome
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And then in &lt;code&gt;.&#x2F;fm&#x2F;welcome.rst&lt;&#x2F;code&gt; for example:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
=================
Test welcome page
=================

This is the first proper page we will write. This should show up as the first page from the TOC!

.. toctree::
   :maxdepth: 4

   test-page_1
   test-page_2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The above welcome page contains reference to &lt;code&gt;test-page_1.rst&lt;&#x2F;code&gt; and &lt;code&gt;test-page_2.rst&lt;&#x2F;code&gt; which we will need to provide inside the &lt;code&gt;.&#x2F;fm&#x2F;&lt;&#x2F;code&gt; subdir.&lt;&#x2F;p&gt;
&lt;p&gt;As is apparent you can structure your book directory into other subfolders as &lt;code&gt;.&#x2F;ch1&#x2F;&lt;&#x2F;code&gt; and so on.&lt;&#x2F;p&gt;
&lt;p&gt;The Sphinx documentation can be found &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.sphinx-doc.org&#x2F;en&#x2F;master&#x2F;&quot;&gt;here&lt;&#x2F;a&gt; and the reST syntax is &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;docutils.sourceforge.io&#x2F;docs&#x2F;user&#x2F;rst&#x2F;quickstart.html&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Happy Writing!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Sipeed BL702 board</title>
		<published>2022-12-01T00:27:00+00:00</published>
		<updated>2022-12-01T00:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/sipeed-bl702/" type="text/html"/>
		<id>https://ntn888.github.io/blog/sipeed-bl702/</id>
		<content type="html">&lt;p&gt;A well known Chinese kits maker Sipeed, has &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.aliexpress.us&#x2F;item&#x2F;1005005012406688.html&quot;&gt;started selling&lt;&#x2F;a&gt; a micro board based on the BL702 chip! With some additional peripherals such as an accelerometer and a pixie LED, the board retails for only 4USD. More information can be found &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;wiki.sipeed.com&#x2F;hardware&#x2F;en&#x2F;maixzero&#x2F;sense&#x2F;maix_zero_sense.html&quot;&gt;here&lt;&#x2F;a&gt;.
It even has the 4 debug pins collated together on one side! Good ergonomics!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;sipeedM0.jpg&quot; alt=&quot;Main board with debugger&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This release from Sipeed paves way for more exposure and popularity which brings more adoption... And in turn more polished toolset and kits. Looking back into the bl_mcu_sdk after some months, there seems to have been an overhaul on the API. Although I&#x27;m against making changes (and breaking user&#x27;s codebase), hopefully this brings better convenence and features!&lt;&#x2F;p&gt;
&lt;p&gt;Considering that the ideal target application is battery powered uses, the board does come with a port for battery input. But it lacks capability for LiPO charging. But this could be easily fixed with an external module such as &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.aliexpress.com&#x2F;item&#x2F;1005003781466639.html&quot;&gt;this&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Happy Hacking!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Gitlab Selfhohsted!</title>
		<published>2022-11-23T00:27:00+00:00</published>
		<updated>2022-11-23T00:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/selfhosted-gitlab/" type="text/html"/>
		<id>https://ntn888.github.io/blog/selfhosted-gitlab/</id>
		<content type="html">&lt;p&gt;Carrying on my spree of selfhosted software, I moved to hosting my on instance of the free and opensource ==Gitlab==. I think this will be the most rewarding selfhosted project given it&#x27;s useful nature.&lt;&#x2F;p&gt;
&lt;p&gt;To peek on my installed instance goto &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;gitlab.myjabber.site&#x2F;ajit&quot;&gt;http:&#x2F;&#x2F;gitlab.myjabber.site&#x2F;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The good news is that it only requires a cheap less powerful instance. On the flip side we need 2 of those! A dedicated one is recommended for the CI&#x2F;CD runner application, for acceptable performance. Or it may hurt the responsiveness.&lt;&#x2F;p&gt;
&lt;p&gt;And it was a convenient time to hustle a deal on VPS with black friday on! As being cost conscious as ever; I headed to &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;lowendbox.com&#x2F;&quot;&gt;Lowendbox&lt;&#x2F;a&gt; to snap a deal. At the time I checked &lt;em&gt;Racknerd&lt;&#x2F;em&gt; had a 2.5G deal for 23.50usd yearly. And then for the Gitlab Runner instance, I opted for the CloudServer&#x27;s 1G for 10usd&#x2F;yearly. It takes a lot of time to compile the pipiline on some projects but it&#x27;d fine for my usecase...&lt;&#x2F;p&gt;
&lt;p&gt;I initially rushed in for a native binary install on the Debian 11 machine I setup. Then I reset the VM and went for the docker based setup, which is just straightforward. Once this is done, you have to download the binary for the runner onto the secondary VM and set it up to attach to the main instance. You will find instructions to do this on the gitlab&#x27;s documention website.&lt;&#x2F;p&gt;
&lt;p&gt;For those interested here&#x27;s a copy of my docker-compose.yml.&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;version: &amp;#39;3.6&amp;#39;
services:
  web:
    image: &amp;#39;gitlab&#x2F;gitlab-ee:latest&amp;#39;
    restart: always
    hostname: &amp;#39;gitlab&amp;#39;
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url &amp;#39;https:&#x2F;&#x2F;gitlab.myjabber.site&amp;#39;
        gitlab_rails[&amp;#39;gitlab_shell_ssh_port&amp;#39;] = 2289
        # Add any other gitlab.rb configuration here, each on its own line
        pages_external_url &amp;quot;http:&#x2F;&#x2F;pages.myjabber.site&amp;quot; # not a subdomain of external_url
        #pages_nginx[&amp;#39;redirect_http_to_https&amp;#39;] = true
        gitlab_rails[&amp;#39;smtp_enable&amp;#39;] = true
        gitlab_rails[&amp;#39;smtp_address&amp;#39;] = &amp;quot;smtp.mailgun.org&amp;quot;
        gitlab_rails[&amp;#39;smtp_port&amp;#39;] = 587
        gitlab_rails[&amp;#39;smtp_authentication&amp;#39;] = &amp;quot;plain&amp;quot;
        gitlab_rails[&amp;#39;smtp_enable_starttls_auto&amp;#39;] = true
        gitlab_rails[&amp;#39;smtp_user_name&amp;#39;] = &amp;quot;&amp;lt;from address&amp;gt;&amp;quot;
        gitlab_rails[&amp;#39;smtp_password&amp;#39;] = &amp;quot;&amp;lt;password_here&amp;gt;&amp;quot;
        gitlab_rails[&amp;#39;smtp_domain&amp;#39;] = &amp;quot;&amp;lt;mailgun domain&amp;gt;&amp;quot;
    ports:
      - &amp;#39;80:80&amp;#39;
      - &amp;#39;443:443&amp;#39;
      - &amp;#39;2289:22&amp;#39;
    volumes:
      - &amp;#39;$GITLAB_HOME&#x2F;config:&#x2F;etc&#x2F;gitlab&amp;#39;
      - &amp;#39;$GITLAB_HOME&#x2F;logs:&#x2F;var&#x2F;log&#x2F;gitlab&amp;#39;
      - &amp;#39;$GITLAB_HOME&#x2F;data:&#x2F;var&#x2F;opt&#x2F;gitlab&amp;#39;
    shm_size: &amp;#39;256m&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and the .env file in the same folder:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;GITLAB_HOME=&#x2F;srv&#x2F;gitlab
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;del&gt;You may have noticed the use of smtp settings. This is used to mail the users with notifications. I&#x27;ve used Mailgun as my email forwarder; which I think is the goto these days. You can send 2000 mails in the free tier.&lt;&#x2F;del&gt; The free tier has been stopped! Check &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;simplycreate.online&#x2F;update&#x2F;2022&#x2F;12&#x2F;26&#x2F;postfix_mail.html&quot;&gt;this&lt;&#x2F;a&gt; for local email forwarder.&lt;&#x2F;p&gt;
&lt;p&gt;Note: I had trouble setting up Gitlab Pages to work on my instance, this may have been because of SSL certificates improperly installed. But I gave-up on this issue and commented out the lines above relating to Pages. I suppose it&#x27;s not that important on a self hosted instance!?&lt;&#x2F;p&gt;
&lt;p&gt;Finally don&#x27;t forget to setup the firewall!!&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A note on backup: Given the sensitive nature of one&#x27;s own code repository it is a no brainer to setup backups. You could use the Oracle&#x27;s free tier compute VPS for this purpose. We will spinup the AMD [] instead of the ARM Ampere since we dont need resources for this purpose.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Proceed to install rsync on both machines and follow with the script provided &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;blog.ssdnodes.com&#x2F;blog&#x2F;vps-backups-simple-overthinking&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>C linker scripts howto</title>
		<published>2022-11-16T00:27:00+00:00</published>
		<updated>2022-11-16T00:27:00+00:00</updated>
        <summary>&lt;p&gt;In this article series we will look at dealing and understanding linker script writing. Targetting the RISC-V RV32 core. We begin with looking at programming assembly, as this will help understand the innards of the microcontroller.&lt;&#x2F;p&gt;
</summary>
		<link href="https://ntn888.github.io/blog/c-linkerscripts/" type="text/html"/>
		<id>https://ntn888.github.io/blog/c-linkerscripts/</id>
		<content type="html">&lt;p&gt;In this article series we will look at dealing and understanding linker script writing. Targetting the RISC-V RV32 core. We begin with looking at programming assembly, as this will help understand the innards of the microcontroller.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;The RISC-V chip was intended and intentionally designed as a heuristic use case, coming in from academic origins has now found popularity among the commercial setting. As such it is ideal microcontroller for tackling to understand the assembly environment, and given it&#x27;s rising populatity among the other giants in the field especially ARM cortex; has practical value.&lt;&#x2F;p&gt;
&lt;p&gt;You may ofcourse run a simulation by installing the toolchain and qemu along with gdb; which then enables the ability to run in step and inspect the memory state. However for a total beginner an all inclusive ready-built package is more useful. &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mortbopet&#x2F;Ripes&quot;&gt;Ripes&lt;&#x2F;a&gt; is such a package. It comes as an appimage so just download and execute from the terminal to fire it up!&lt;&#x2F;p&gt;
&lt;p&gt;One major advantage of Ripes is that it contains simulation of external peripherals such as LED matrix and switches. Which makes it more engaging for the new-commer.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;img&#x2F;ripes_animation.gif&quot;&gt;Ripes in action&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Stay tuned..&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>DOOM Emacs intro</title>
		<published>2022-11-16T00:27:00+00:00</published>
		<updated>2022-11-16T00:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/doom/" type="text/html"/>
		<id>https://ntn888.github.io/blog/doom/</id>
		<content type="html">&lt;p&gt;I&#x27;ve always been shuffling around &lt;code&gt;neovim&lt;&#x2F;code&gt;, &lt;code&gt;emacs&lt;&#x2F;code&gt;, &lt;code&gt;vscode&lt;&#x2F;code&gt;. This writeup will explain how I&#x27;ve settled on the use of emacs. DOOM Emacs specifically.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;yay_evil_by_ultravioletbat_d1uicfh.jpg&quot; alt=&quot;doom_logo&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s github page is accessible &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;doomemacs&#x2F;doomemacs&quot;&gt;DOOM Emacs&lt;&#x2F;a&gt;; documentation &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;doomemacs&#x2F;doomemacs&#x2F;blob&#x2F;master&#x2F;docs&#x2F;index.org&quot;&gt;here&lt;&#x2F;a&gt; and installation for all platform are accessible &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;doomemacs&#x2F;doomemacs&#x2F;blob&#x2F;master&#x2F;docs&#x2F;getting_started.org&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;DOOM Emacs is a batteries included edition of emacs. Together with which-key and easy language enable features (layers), it has a very intuitive experience which is ideal for the beginner (to command line editior altogether!) I think DOOM&#x27;s got a clean modern funky interface too.&lt;&#x2F;p&gt;
&lt;p&gt;The one thing it&#x27;s lacking is a newbie friendly guide&#x2F;intro to using it. In contrast to my opinion; the developers&#x27; hold that DOOM is for an experienced emacs user. I beg to differ as stated above.&lt;&#x2F;p&gt;
&lt;p&gt;To help with this user onboarding issue, when I&#x27;ve tried to pick up usage, I&#x27;ve scoured the internet to put together a single sheet&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; summarising all the essential commands. Accessible &lt;a href=&quot;&#x2F;img&#x2F;doom-cmds.pdf&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Let me know down what&#x27;s you favourite newbie friendly emacs edition is?&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;That&#x27;s all the familiarity it requires. That&#x27;s how intuitive it is!&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Self hosted Mastodon Instance</title>
		<published>2022-11-13T00:27:00+00:00</published>
		<updated>2022-11-13T00:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/mastodon/" type="text/html"/>
		<id>https://ntn888.github.io/blog/mastodon/</id>
		<content type="html">&lt;p&gt;In keeping with the times, I messed about with setting up an own Mastodon self-hosted instance!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;del&gt;An ideal VM is the Oracle&#x27;s OCI cloud service. In there they provide a 4vcore, 24GB ram(!) as a free service. Which is plenty for this purpose. In contrast to the other competitors offering which I found is actually insufficient for self hosting Mastodon. Additionally you get 150G block storage free (in addition to 50G boot volume). Oracle calls it &amp;quot;VM.Standard.A1.Flex&amp;quot;.&lt;&#x2F;del&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I instead went ahead with LUXVPS. They allow open port on 25 (upon request) for sending emails from local machine without a middleman subscription (and they get expensive quick). They&#x27;re prices are also very affordable; for 3EUR you get a 1c &#x2F; 4GB VM with KVM virtualisation. In my experiment this is sufficient... My instance with two test users, with federation relay and full text search only consumes 1G Ram and plenty of processor left. Should be enough for a small gathering :).&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;If you&#x27;re taking the local server option for emails, you have a good guide here: &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;doc.dovecot.org&#x2F;configuration_manual&#x2F;howto&#x2F;postfix_and_dovecot_sasl&#x2F;&quot;&gt;https:&#x2F;&#x2F;doc.dovecot.org&#x2F;configuration_manual&#x2F;howto&#x2F;postfix_and_dovecot_sasl&#x2F;&lt;&#x2F;a&gt;. Setting up your own local mail server is tricky with a combination of packages required. This is due to the fact most mail providers (especially Google&#x27;s GMail) require SASL authentication. But it&#x27;s worth the effort I think. Again one thing you cannot avoid is that your setup will send the mail almost invariably to the users SPAM folder! But you can always opt for a mail forwarder subscription.&lt;&#x2F;p&gt;
&lt;p&gt;Following on from the above link, some lines has to be commented in &#x2F;etc&#x2F;postfix&#x2F;master.cf:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;submission inet n - n - - smtpd
  -o smtpd_tls_security_level=encrypt
  -o smtpd_sasl_auth_enable=yes
  -o smtpd_sasl_type=dovecot
  -o smtpd_sasl_path=private&#x2F;auth
  -o smtpd_sasl_security_options=noanonymous
  -o smtpd_sasl_local_domain=$myhostname
#  -o smtpd_client_restrictions=permit_sasl_authenticated,reject
#  -o smtpd_sender_login_maps=hash:&#x2F;etc&#x2F;postfix&#x2F;virtual
  -o smtpd_sender_restrictions=reject_sender_login_mismatch
#  -o smtpd_recipient_restrictions=reject_non_fqdn_recipient,reject_unknown_recipient_domain,permit_sasl_authenticated,reject
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here&#x27;s the mastodon config (&#x2F;home&#x2F;mastodon&#x2F;live&#x2F;.env.production)relating to smtp:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;SMTP_SERVER=localhost
SMTP_PORT=587
SMTP_LOGIN=
SMTP_PASSWORD=
SMTP_FROM_ADDRESS=notifications@yourdomain.online
SMTP_AUTH_METHOD=plain
SMTP_OPENSSL_VERIFY_MODE=none
SMTP_ENABLE_STARTTLS_AUTO=true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Once you get a VM instance up and running, continue with the official help page: &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;docs.joinmastodon.org&#x2F;admin&#x2F;install&#x2F;&quot;&gt;https:&#x2F;&#x2F;docs.joinmastodon.org&#x2F;admin&#x2F;install&#x2F;&lt;&#x2F;a&gt;. I installed on a Debian 11 image.&lt;&#x2F;p&gt;
&lt;p&gt;An &#x27;errata&#x27; to the last bit with certbot has input here if you run into problems: &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mastodon&#x2F;documentation&#x2F;issues&#x2F;940&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;mastodon&#x2F;documentation&#x2F;issues&#x2F;940&lt;&#x2F;a&gt;.
Don&#x27;t forget the prerequisites: &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;docs.joinmastodon.org&#x2F;admin&#x2F;prerequisites&#x2F;&quot;&gt;https:&#x2F;&#x2F;docs.joinmastodon.org&#x2F;admin&#x2F;prerequisites&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;My instance setup is accessible via &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;simplysocial.online&#x2F;&quot;&gt;https:&#x2F;&#x2F;simplysocial.online&#x2F;&lt;&#x2F;a&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. Users can create accounts on this instance!&lt;&#x2F;p&gt;
&lt;p&gt;Stay in touch for further discussion on integrating cloudflare with Backblaze for free egress, in bringing costs down further!&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;In Ubuntu 22.04 you need to run &lt;code&gt;sudo usermod -a -G mastodon www-data&lt;&#x2F;code&gt; to fix permissions issue: https:&#x2F;&#x2F;github.com&#x2F;mastodon&#x2F;mastodon&#x2F;discussions&#x2F;19651&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Review: PI Pico 4MB version</title>
		<published>2022-11-04T00:27:00+00:00</published>
		<updated>2022-11-04T00:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/pico-4m/" type="text/html"/>
		<id>https://ntn888.github.io/blog/pico-4m/</id>
		<content type="html">&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;4MB_Pico.jpg&quot; alt=&quot;Pico 4M versio&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I recently tried out the PICO 4MB version sold here: &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.aliexpress.com&#x2F;item&#x2F;1005003928558306&quot;&gt;https:&#x2F;&#x2F;www.aliexpress.com&#x2F;item&#x2F;1005003928558306&lt;&#x2F;a&gt;. A cheaper alternative to the official version but with the larger flash.&lt;&#x2F;p&gt;
&lt;p&gt;Specifically called &amp;quot;Lite Black&amp;quot; by the seller, it has a similar layout to the original with the single LED at port-25.&lt;&#x2F;p&gt;
&lt;p&gt;Considering it&#x27;s an Cortex-M chipset (M0+) it will be programmed by a ST-LINK (SWD) debugger probe. The PI Pico comes with it&#x27;s own programming environment &#x2F; SDK for building application in C&#x2F;C++.&lt;&#x2F;p&gt;
&lt;p&gt;This 4MB variant at it&#x27;s given price is an excellent alternative to the classic bluepill which lacks flash for any complex applications. And will be a drop in replacement for any bluepill suitable projects in future.&lt;&#x2F;p&gt;
&lt;p&gt;Articles about Pico Projects soon to come...&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Switching to the nRFMicro</title>
		<published>2022-03-20T00:27:00+00:00</published>
		<updated>2022-03-20T00:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/nrfmicro/" type="text/html"/>
		<id>https://ntn888.github.io/blog/nrfmicro/</id>
		<content type="html">&lt;p&gt;In response to my &lt;a href=&quot;https:&#x2F;&#x2F;ntn888.github.io&#x2F;blog&#x2F;thoughts-esp-idf&#x2F;&quot;&gt;rants&lt;&#x2F;a&gt; on the low-power wireless situation with the ESP ecosystem, I&#x27;ve finally (hopefully :-) ) decided instead to base on the nRF52 platform using Zephyr RTOS. These chips come with onboard low-power wireless radio including the 802.15.4; ideal for short distance networking.&lt;&#x2F;p&gt;
&lt;p&gt;My biggest gripe was that the ecosystem didn&#x27;t support hobbyiest level cheap development modules. This is not the case anymore since I found this breakout board project on &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;joric&#x2F;nrfmicro&quot;&gt;github&lt;&#x2F;a&gt;. This board can be ordered on &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.pcbway.com&#x2F;project&#x2F;shareproject&#x2F;nRFMicro_1_4.html&quot;&gt;PCBWay&lt;&#x2F;a&gt; for like $30 for an assembled 5 bunch.&lt;&#x2F;p&gt;
&lt;p&gt;The board lacks out-of-the box support from Zephyr, but this could easily be solved by an upstream pull-request. Also featuring the board on the Zephyr supported list could bring in some more exposure; I had to ravage through the internet to come across this project!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Thoughts on the ESP-IDF SDK</title>
		<published>2022-03-19T00:27:00+00:00</published>
		<updated>2022-03-19T00:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/thoughts-esp-idf/" type="text/html"/>
		<id>https://ntn888.github.io/blog/thoughts-esp-idf/</id>
		<content type="html">&lt;p&gt;By contrast the esp-idf SDK feels intuitive and very matured. This is a given, considering the popularity of the ESP chips. My only gripe about this ecosystem is the lack of lowpower wireless module. Although this is being fulfilled with the advent of the upcoming ESP32-H2, it&#x27;s a long overdue wait!&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Even though the existing chips feature a BLE radio; it&#x27;s not as power efficient as it should be, negating any possibility of deploying into low-power applications.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I did consider the well know nRF52840 chip targetting low power wireless applications. A huge advantage here is that it&#x27;s already available! But most dev-boards, including simple ones like Adafruit Feather and Arduino Nano 33 BLE go for a whopping 40-50usd! Even the company&#x27;s own (hideous looking) nRF52 dongle is 15usd. Which in my view makes it inaccessible for hobbyist applications.&lt;&#x2F;p&gt;
&lt;p&gt;In the end, this allows me to trial out the esp-idf SDK with the on-hand chip: esp32-c3, while waiting for the H2.&lt;&#x2F;p&gt;
&lt;p&gt;I personally think this is a shameful situation in the maker world in this day and age. Or I might be missing something.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Switching to the ESP32-C3</title>
		<published>2022-03-18T00:27:00+00:00</published>
		<updated>2022-03-18T00:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/esp32c3/" type="text/html"/>
		<id>https://ntn888.github.io/blog/esp32c3/</id>
		<content type="html">&lt;p&gt;This blog will here-on switch to the esp32-c3 controller...&lt;&#x2F;p&gt;
&lt;p&gt;It is noted that the esp32 chips are infamous for higher power consumption, especially with the radio on. But it&#x27;s expected that this problem will disappear with the introduction of the upcomming ESP32-H2 MCU.&lt;&#x2F;p&gt;
&lt;p&gt;The rationale for the switch is the incomplete and nonfunctional tooling on the Buffalo Lab boards, especially the inability to use JTAG debugging.&lt;&#x2F;p&gt;
&lt;p&gt;The esp32-c3 is a similarly low cost solution with a mature SDK and built-in debugger.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Debugging BL702</title>
		<published>2022-03-17T00:28:00+00:00</published>
		<updated>2022-03-17T00:28:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/debug-bl702/" type="text/html"/>
		<id>https://ntn888.github.io/blog/debug-bl702/</id>
		<content type="html">&lt;p&gt;You may use the advertised &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.cnx-software.com&#x2F;2021&#x2F;06&#x2F;21&#x2F;rv-debugger-plus-uart-jtag-debug-board-bl702-zigbee-ble-risc-v-soc&#x2F;&quot;&gt;Sipeed RV-Debugger Plus&lt;&#x2F;a&gt;. It emulates a dual device one for the flashing (UART) and for JTAG.&lt;&#x2F;p&gt;
&lt;p&gt;Then hookup the probe according to the following pinouts on the BL702:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;BL702 Pin&lt;&#x2F;th&gt;&lt;th&gt;JTAG Function&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;D0&lt;&#x2F;td&gt;&lt;td&gt;TMS&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;D1&lt;&#x2F;td&gt;&lt;td&gt;TDI&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;D2&lt;&#x2F;td&gt;&lt;td&gt;TCK&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;D9&lt;&#x2F;td&gt;&lt;td&gt;TDO&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;You may ofcourse simply plug it with breadboard dupont wires. But I found it convenient to use one of these 2x5 IDC ribbon cables:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;idc_ribbon.jpg&quot; alt=&quot;IDC ribbon cable&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;and solder them on straight to the board like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;soldered_board.jpg&quot; alt=&quot;soldered board&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Once the hardware is setup, place the following files in the &lt;code&gt;~&#x2F;openocd-cfg&#x2F;&lt;&#x2F;code&gt; directory:&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;code&gt;if_rv_dbg_plus.cfg&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;# BouffaloLab USB-JTAG&#x2F;TTL adapter
adapter driver ftdi
ftdi_vid_pid 0x0403 0x6010

ftdi_channel 0
#ftdi_tdo_sample_edge falling
transport select jtag
adapter speed     4000

ftdi_layout_init 0x00f8 0x00fb
#ftdi_layout_signal nTRST -data 0x0400
#ftdi_layout_signal nSRST -ndata 0x0020

#reset_config srst_only srst_push_pull
#adapter_nsrst_delay 100
#adapter_nsrst_assert_width 100
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In &lt;code&gt;tgt_702.cfg&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;#target chip

set _CHIPNAME riscv
jtag newtap $_CHIPNAME cpu -irlen 5 -expected-id 0x20000e05

set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME.0 riscv -chain-position $_TARGETNAME
$_TARGETNAME.0 configure -work-area-phys 0x22020000 -work-area-size 0x10000 -work-area-backup 1
#$_TARGETNAME.0 configure -rtos auto

echo &amp;quot;Ready for Remote Connections&amp;quot;

$_TARGETNAME.0 configure -event reset-assert-pre {
    echo &amp;quot;reset-assert-pre&amp;quot;
    adapter speed 100
}

$_TARGETNAME.0 configure -event reset-deassert-post {
    echo &amp;quot;reset-deassert-post&amp;quot;
    adapter speed 4000
    reg mstatus 0x7800
    reg mie 0x0
#    reg pc 0x22008000
}

$_TARGETNAME.0 configure -event reset-init {
    echo &amp;quot;reset-init&amp;quot;
# 4MHz for FPGA
    adapter speed 4000
}

gdb_memory_map enable
gdb_flash_program disable

riscv set_prefer_sba on
riscv set_command_timeout_sec 1

init
reset init

#jtag arp_init

#resume
#exit
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In &lt;code&gt;702.init&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;set architecture riscv:rv32
#target remote :3333
#set disassemble-next-line on
set mem inaccessible-by-default off
#gdb_breakpoint_override [hard|soft|disable]

mem 0x22008000 0x22014000 rw
mem 0x42008000 0x42014000 rw
mem 0x22014000 0x22020000 rw
mem 0x42014000 0x42020000 rw
mem 0x22020000 0x22030000 rw
mem 0x42020000 0x42030000 rw
mem 0x22030000 0x2204C000 rw
mem 0x42030000 0x4204C000 rw
mem 0x23000000 0x23400000 ro
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then run:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;openocd -f ~&#x2F;openocd-cfg&#x2F;if_rv_dbg_plus.cfg -f ~&#x2F;openocd-cfg&#x2F;tgt_702.cfg
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hopefully you&#x27;ll get the following message:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[riscv.cpu.0] Target successfully examined.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now that openocd sucessfully connects to the target board, next step is to fire-up gdb:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;~&#x2F;bl_iot_sdk&#x2F;toolchain&#x2F;riscv&#x2F;Linux&#x2F;bin&#x2F;riscv64-unknown-elf-gdb &amp;lt;path_to_project&amp;gt;&#x2F;build_out&#x2F;main.elf -x ~&#x2F;openocd-cfg&#x2F;702.init
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now you can finally attach a GDB session like this on the &lt;code&gt;(gdb)&lt;&#x2F;code&gt; prompt:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;target extended-remote localhost:3333
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Further, considering that the dev board uses external flash, there are two ways to debug on chip:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;debug code on ram&lt;&#x2F;li&gt;
&lt;li&gt;pre-load code to xip as usual using serial, before starting the debug session.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;More details can be found on the official pdf&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. We will use the second method, on the (gdb) prompt:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;set $pc = 0x21000000
set $mie = 0
set $mstatus = 0x1880
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now you can step throught the code and probe to your heart&#x27;s liking. For example:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;thb main
continue
continue
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;See more commands in the official pdf&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. To learn more about GDB see &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.cprogramming.com&#x2F;gdb.html&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;https:&#x2F;&#x2F;github.com&#x2F;bouffalolab&#x2F;bl_docs&#x2F;blob&#x2F;main&#x2F;BL602_Openocd%26GDB&#x2F;en&#x2F;Introduction%20of%20OpenOCD%20and%20GDB.pdf&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;blockquote&gt;
&lt;p&gt;You can also use a typical ftdi232rl as a debugger probe for openocd as dicussed in &lt;a href=&quot;https:&#x2F;&#x2F;ntn888.github.io&#x2F;blog&#x2F;diy-jtag-debugger&#x2F;&quot;&gt;this post&lt;&#x2F;a&gt;. But due to conflicts on pins for UART and JTAG mode on the ftdi module, you&#x27;ll need to setup two modules each for flashing (UART) and probing (JTAG).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>SSD1306 OLED Display</title>
		<published>2022-03-17T00:27:00+00:00</published>
		<updated>2022-03-17T00:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/ssd1306/" type="text/html"/>
		<id>https://ntn888.github.io/blog/ssd1306/</id>
		<content type="html">&lt;p&gt;The SSD1306 128x64 oled display is a popular I&#x2F;O device that can be added to any project for example to provide some visual diagnostics. It comes in two main variaties; the I2C and the SPI version. We&#x27;ll be using the I2C one.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;oled.jpg&quot; alt=&quot;SSD1306 128x64&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Fortunately the SDK has already the implementation for the lvgl graphics library (provides APIs to simplify access to the display), so we just need to write the I2C protocol driver for oled. &lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Low-cost microcontrollers for hobbyists</title>
		<published>2022-03-16T00:27:00+00:00</published>
		<updated>2022-03-16T00:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/mcu-selection-guide/" type="text/html"/>
		<id>https://ntn888.github.io/blog/mcu-selection-guide/</id>
		<content type="html">&lt;p&gt;There are a multitude of chip manufacturers, let alone individual chip modules. It can get overwhelming quickly for a newbie in the field of embedded or IOT systems, especially if all you want to do is tinker at a hobbyist level.&lt;&#x2F;p&gt;
&lt;p&gt;I present to you a selection guide based on 3 modules to serve a wide range of applications. The rationale being, by having only a few select chips in your toolset you can put the effort to master your chips and get into the nitty gritty. This leads to less frustration when developing and also by working on the native toolsets for the chip in hand, you&#x27;re confident in producing the most efficient code.&lt;&#x2F;p&gt;
&lt;p&gt;With this in mind I present to you the following list&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;del&gt;Bluepill (stm32f103c8)&lt;&#x2F;del&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;: sub-dollar chip that&#x27;s simple and very compact formfactor. Deploy it for the simplest of applications. You can still run freeRTOS! And even drive an OLED display! An excellent intro using free licence tools are covered in the book: &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;link.springer.com&#x2F;book&#x2F;10.1007&#x2F;978-1-4842-3624-6&quot;&gt;Beginning STM32&lt;&#x2F;a&gt; by Warren Gay.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Micro:Bit (nRF52833): low power wireless! When it comes to low power wireless, Nordic is the undisputed king. RF is in their name and they have gained good popularity in the industry over the past years. See &lt;a href=&quot;https:&#x2F;&#x2F;ntn888.github.io&#x2F;blog&#x2F;micro-bit-breakout&#x2F;&quot;&gt;this post&lt;&#x2F;a&gt; for viable hobbyist boards.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;XT-ZB1 (bl702): the king of versatility! Although intended for IOT applications, the $2 price tag opens the possibilities to deploy into anything! A RISC-V clocked at 144 MHz including FPU. That’s decent enough for most of demanding applications. Note that the fact the SDK is still in developement (after 2 years of release!) and that it&#x27;s unsupported by any IOT RTOS frameworks (RT-Thread for example) makes is a questionable choice right now and we go with the above chip for wireless.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Between the Bluepill and the nRF52, I believe you have the world of embedded at your hands!&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;If you&#x27;re interested in beginner boards or controller see &lt;a href=&quot;https:&#x2F;&#x2F;ntn888.github.io&#x2F;blog&#x2F;begin-embedded&#x2F;&quot;&gt;this post&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;Edit: See &lt;a href=&quot;https:&#x2F;&#x2F;ntn888.github.io&#x2F;blog&#x2F;pico-4m&#x2F;&quot;&gt;this post&lt;&#x2F;a&gt; about the PI Pico variant. This would be an excellent replacement for the bluepill. With 4M flash and 130MHz M0+ processor it is a no brainer for new projects!!&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Board Setup Config</title>
		<published>2022-03-15T00:27:00+00:00</published>
		<updated>2022-03-15T00:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/bsp-config/" type="text/html"/>
		<id>https://ntn888.github.io/blog/bsp-config/</id>
		<content type="html">&lt;p&gt;The board setup configuration is included in the path &lt;code&gt;components&#x2F;platform&#x2F;soc&#x2F;bl702&#x2F;bl702_std&#x2F;BSP_Board&lt;&#x2F;code&gt;. In our case it&#x27;s the &lt;code&gt;bl702_evb&lt;&#x2F;code&gt; sub directory. It houses three files:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clock_config.h&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;peripheral_config.h&lt;&#x2F;code&gt; &lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;pinmux_config.h&lt;&#x2F;code&gt; &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The &lt;code&gt;clock_config.h&lt;&#x2F;code&gt; can be used as-is for our board XT-ZB1 without any changes.&lt;&#x2F;p&gt;
&lt;p&gt;The complimentary online &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;dev.bouffalolab.com&#x2F;media&#x2F;config&#x2F;index.html&quot;&gt;GUI Tool&lt;&#x2F;a&gt; is handy for new users to intuitively generate these config files according to desired custom configurations.&lt;&#x2F;p&gt;
&lt;p&gt;&amp;lt; TODO &amp;gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Find out:&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;how to over-ride these files locally per project&lt;&#x2F;li&gt;
&lt;li&gt;need to manually edit the &lt;code&gt;pinmux_config.h&lt;&#x2F;code&gt; to accomodate an enabled peripheral (eg SPI)?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Analog Filters Primer</title>
		<published>2022-02-27T00:27:00+00:00</published>
		<updated>2022-02-27T00:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/analog-filters-primer/" type="text/html"/>
		<id>https://ntn888.github.io/blog/analog-filters-primer/</id>
		<content type="html">&lt;p&gt;Noise and interference is inherent in any electrical&#x2F;electronic system. Their effects are especially prominent in analog systems. Most if not all embedded systems are connected to these analog signal lines and fall prey to this problem. Increasingly we find ready made modules that have digitised interface to the analog sensor. But there are times when we struck upon a novel problem and have to deal it ourselves.&lt;&#x2F;p&gt;
&lt;p&gt;Among other things analog filters help mitigate this problem. It is very often the case that this falls in scope of the task of an embedded&#x2F;firmware developer due to being fairly connected.&lt;&#x2F;p&gt;
&lt;p&gt;Here we see the available resources to help build know-how of analog filtering. The following is a list of copy-left books and resources in sequential progressive order:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;open.umn.edu&#x2F;opentextbooks&#x2F;textbooks&#x2F;dc-electrical-circuit-analysis-a-practical-approach-fiore&quot;&gt;DC Electrical Circuit Analysis&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;open.umn.edu&#x2F;opentextbooks&#x2F;textbooks&#x2F;883&quot;&gt;AC Electrical Circuit Analysis&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;open.umn.edu&#x2F;opentextbooks&#x2F;textbooks&#x2F;semiconductor-devices-theory-and-application&quot;&gt;Semiconductor Devices&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;open.umn.edu&#x2F;opentextbooks&#x2F;textbooks&#x2F;operational-amplifiers-linear-integrated-circuits-theory-and-application-3e&quot;&gt;Operational Amplifiers &amp;amp; Linear Integrated Circuits&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;You may use simulation on PC to experiment and follow along with the above texts. Kicad has a simulation mode which can be used after entering the schematic in eeschema. Look here: &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;http:&#x2F;&#x2F;ngspice.sourceforge.net&#x2F;ngspice-eeschema.html&quot;&gt;http:&#x2F;&#x2F;ngspice.sourceforge.net&#x2F;ngspice-eeschema.html&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Also a prerequisite to above circuit analysis is some basic highschool math: calculus and complex numbers. Refer:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;open.umn.edu&#x2F;opentextbooks&#x2F;textbooks&#x2F;415&quot;&gt;Calculus: Early Transcendentals&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;open.umn.edu&#x2F;opentextbooks&#x2F;textbooks&#x2F;a-first-course-in-electrical-and-computer-engineering&quot;&gt;A First Course in Electrical and Computer Engineering&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Octave Command Line Mode</title>
		<published>2022-02-27T00:27:00+00:00</published>
		<updated>2022-02-27T00:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/octave-cli/" type="text/html"/>
		<id>https://ntn888.github.io/blog/octave-cli/</id>
		<content type="html">&lt;p&gt;GNU Octave has a lesser known command line mode. I think it&#x27;s awesome. You get to work in the always familiar environment in the shell with vim running alongside to edit script files... You have access to certain shell commands such as &lt;code&gt;cd&lt;&#x2F;code&gt;, &lt;code&gt;ls&lt;&#x2F;code&gt;, &lt;code&gt;mkdir&lt;&#x2F;code&gt;. Enough to navigate you way around. Makes you feel like a true hacker rather than working in the outdated, ugly GUI IDE.
Here&#x27;s a snapshot:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt; octave
GNU Octave, version 6.1.1~hg.2021.01.26
Copyright (C) 2020 The Octave Project Developers.
This is free software; see the source code for copying conditions.
There is ABSOLUTELY NO WARRANTY; not even for MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  For details, type &amp;#39;warranty&amp;#39;.

Octave was configured for &amp;quot;x86_64-pc-linux-gnu&amp;quot;.

Additional information about Octave is available at https:&#x2F;&#x2F;www.octave.org.

Please contribute if you find this software useful.
For more information, visit https:&#x2F;&#x2F;www.octave.org&#x2F;get-involved.html

Read https:&#x2F;&#x2F;www.octave.org&#x2F;bugs.html to learn how to submit bug reports.
For information about changes from previous versions, type &amp;#39;news&amp;#39;.

octave:1&amp;gt; pi
ans = 3.1416
octave:2&amp;gt; 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Device Drivers 101</title>
		<published>2022-02-24T00:31:00+00:00</published>
		<updated>2022-02-24T00:31:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/device-drivers-101/" type="text/html"/>
		<id>https://ntn888.github.io/blog/device-drivers-101/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;The SDK has the provisions for &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;elinux.org&#x2F;Device_Tree_Reference&quot;&gt;device tree system&lt;&#x2F;a&gt;. However this has been segregated into the flash tool with all the communication ports enabled. We will write our device driver in the conventional way in pure C, built on top of the relevant peripheral API; eg, UART, I2C...&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;PCF8574.jpeg&quot; alt=&quot;i2c gpio extender&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;i2c-gpio-extender&quot;&gt;I2C GPIO extender&lt;a class=&quot;zola-anchor&quot; href=&quot;#i2c-gpio-extender&quot; aria-label=&quot;Anchor link for: i2c-gpio-extender&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;To exercise the I2C bus in this post, we’ll be using the PCF8574 GPIO extender chip. This is a great chip for adding additional GPIO lines, provided that you don’t need high speed (the demo operates the I2C bus at ??? kHz). This will be an exercise in writing device drivers; first of many more to come!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>PWM</title>
		<published>2022-02-24T00:30:00+00:00</published>
		<updated>2022-02-24T00:30:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/pwm/" type="text/html"/>
		<id>https://ntn888.github.io/blog/pwm/</id>
		<content type="html">&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;breather_led.gif&quot; alt=&quot;Led Fade&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;step-1-led-fade&quot;&gt;Step 1: Led Fade&lt;a class=&quot;zola-anchor&quot; href=&quot;#step-1-led-fade&quot; aria-label=&quot;Anchor link for: step-1-led-fade&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut elit ipsum, bibendum eget semper ac, eleifend sit amet ex. In hac habitasse platea dictumst. Morbi tempus metus a nibh blandit condimentum. Quisque quis neque urna. Etiam eget sapien ac lacus accumsan tincidunt nec nec felis. Quisque placerat, justo vitae congue efficitur, est est volutpat magna, sit amet consectetur purus lorem sed neque. Ut aliquet elit a ultrices hendrerit. In hac habitasse platea dictumst. Pellentesque quis eros lacinia, porttitor justo a, suscipit erat. Etiam vestibulum nibh quis mattis laoreet. Aenean sed lacus in massa elementum dapibus. Maecenas at arcu condimentum, consectetur ipsum a, dignissim nibh. Nulla facilisi. Suspendisse potenti. Aliquam eleifend ultrices gravida. Proin lacinia pellentesque faucibus.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;led-fade-with-dma-interrupts-idle-cpu&quot;&gt;Led Fade with DMA &amp;amp; Interrupts (Idle CPU)&lt;a class=&quot;zola-anchor&quot; href=&quot;#led-fade-with-dma-interrupts-idle-cpu&quot; aria-label=&quot;Anchor link for: led-fade-with-dma-interrupts-idle-cpu&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&amp;lt; TODO &amp;gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Timers</title>
		<published>2022-02-24T00:29:00+00:00</published>
		<updated>2022-02-24T00:29:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/timers/" type="text/html"/>
		<id>https://ntn888.github.io/blog/timers/</id>
		<content type="html">&lt;h2 id=&quot;tick-timing&quot;&gt;Tick Timing&lt;a class=&quot;zola-anchor&quot; href=&quot;#tick-timing&quot; aria-label=&quot;Anchor link for: tick-timing&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Basic timing, there is nothing much to it. We just need a couple of functions for basic timing. If you are familiar with tick based timing in another RTOS, it&#x27;s exactly the same.&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;tickType ts, milliseconds_spent;

ts = xTaskGetTickCount();

&amp;lt; do stuff &amp;gt;

milliseconds_spent = (xTaskGetTickCount() - ts) &#x2F; portTICK_RATE_MS;

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;hardware-timers-with-interrupts&quot;&gt;Hardware Timers with Interrupts&lt;a class=&quot;zola-anchor&quot; href=&quot;#hardware-timers-with-interrupts&quot; aria-label=&quot;Anchor link for: hardware-timers-with-interrupts&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Serial UART</title>
		<published>2022-02-24T00:28:00+00:00</published>
		<updated>2022-02-24T00:28:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/serial/" type="text/html"/>
		<id>https://ntn888.github.io/blog/serial/</id>
		<content type="html">&lt;p&gt;We will study the UART peripheral here. First the basic polling mode.&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;hosal_uart.h&amp;gt;
#include &amp;lt;FreeRTOS.h&amp;gt;
#include &amp;lt;task.h&amp;gt;

&#x2F;&#x2F;hosal_uart_dev_t uart_dev;

HOSAL_UART_DEV_DECL(uart_dev, 0, 16, 7, 2000000);

void main (void)
{
   char data[] = &amp;quot;test\n&amp;quot;;

   &#x2F;&#x2F; uart setup (for info)
   hosal_uart_init(&amp;amp;uart_dev);

   while (1) {
      hosal_uart_send(&amp;amp;uart_dev, data, sizeof(data));
      vTaskDelay(500);
   }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We begin by including the relevant header &lt;code&gt;hosal_uart.h&lt;&#x2F;code&gt;. The initialisation is done in 2 parts. In line 8, we use the macro to configure the settings as desired, including which uart peripheral we select in the second argument, here we select the uart0.
Next we simply call in line 16.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;interrupt-mode&quot;&gt;Interrupt Mode&lt;a class=&quot;zola-anchor&quot; href=&quot;#interrupt-mode&quot; aria-label=&quot;Anchor link for: interrupt-mode&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&amp;lt; todo &amp;gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>freeRTOS Overview</title>
		<published>2022-02-24T00:27:00+00:00</published>
		<updated>2022-02-24T00:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/freertos/" type="text/html"/>
		<id>https://ntn888.github.io/blog/freertos/</id>
		<content type="html">&lt;p&gt;The SDK includes the freeRTOS as the system kernel. More info can be seen by clicking on the &#x27;More Info&#x27; button on the top of this page. But the kernel is already configured for use in the SDK, so we do not need to worry about it&#x27;s config or setting up.&lt;&#x2F;p&gt;
&lt;p&gt;In this article we&#x27;ll go through a rough overview of freeRTOS of just the necessary features.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;2tasks.gif&quot; alt=&quot;2tasks&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tasks&quot;&gt;Tasks&lt;a class=&quot;zola-anchor&quot; href=&quot;#tasks&quot; aria-label=&quot;Anchor link for: tasks&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
#include &amp;lt;hosal_gpio.h&amp;gt;
#include &amp;lt;FreeRTOS.h&amp;gt;
#include &amp;lt;task.h&amp;gt;

static hosal_gpio_dev_t gp1, gp2;

void my_task (void *p)
{
   static _Bool val = 1;

   while (1) {
      hosal_gpio_output_set(&amp;amp;gp2, val);
      val = !val;
      vTaskDelay(pdMS_TO_TICKS(700));
   }
}

void main (void)
{
   &#x2F;&#x2F; setup
   gp1.port = 5;
   gp1.config = OUTPUT_OPEN_DRAIN_NO_PULL;
   hosal_gpio_init(&amp;amp;gp1);
   _Bool value = 1;
   &#x2F;&#x2F; setup second gpio
   gp2.port = 4;
   gp2.config = OUTPUT_OPEN_DRAIN_NO_PULL;
   hosal_gpio_init(&amp;amp;gp2);

   xTaskCreate(my_task, &amp;quot;second_entry&amp;quot;, 1024, NULL, 15, NULL);

   while (1) {	&#x2F;&#x2F; should never reach this point
      hosal_gpio_output_set(&amp;amp;gp1, value );
      value = !value;
      vTaskDelay(pdMS_TO_TICKS(500));
   }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Tasks are created using the function in line 30. You need to specify the entry callback function here (as first parameter) and have it defined. The external task we define here is &lt;code&gt;my_task&lt;&#x2F;code&gt; in line 7. Other parameters are as follows:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;second_entry&amp;quot;&lt;&#x2F;code&gt;: A descriptive name for the task. This is not used by FreeRTOS in any
way. It is included purely as a debugging aid.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;1024&lt;&#x2F;code&gt;: The stack depth. Note the value is &lt;code&gt;number-of-bytes&lt;&#x2F;code&gt; &#x2F; 4. Learning to choose the right size is an artform you pickup as you work through the examples.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;NULL&lt;&#x2F;code&gt;: Parameter to our callback function. Here we&#x27;re passing nothing.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;15&lt;&#x2F;code&gt;: The task Priority. See below.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Null&lt;&#x2F;code&gt;: Not used.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In this example we maintain our blinky program in main that toggles every 500ms. In addition to this we are creating a task for a secondary blinky on port D4, with a different frequency... This example shows how an off-the self kernel eases our multitasking.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;priorities&quot;&gt;Priorities&lt;a class=&quot;zola-anchor&quot; href=&quot;#priorities&quot; aria-label=&quot;Anchor link for: priorities&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The SDK sets the maximum number of priorities to 32. See configMAX_PRIORITIES in &lt;code&gt;bl_iot_sdk&#x2F;components&#x2F;platform&#x2F;soc&#x2F;bl602&#x2F;freertos_riscv&#x2F;config&#x2F;FreeRTOSConfig.h&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Higher the value: higher the priority. If two tasks have the same priority a round robin scheduling is done.
To modify the priority of a running task use &lt;code&gt;vTaskPrioritySet(n)&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;queues&quot;&gt;Queues&lt;a class=&quot;zola-anchor&quot; href=&quot;#queues&quot; aria-label=&quot;Anchor link for: queues&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h2 id=&quot;semaphores&quot;&gt;Semaphores&lt;a class=&quot;zola-anchor&quot; href=&quot;#semaphores&quot; aria-label=&quot;Anchor link for: semaphores&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;mutex&quot;&gt;Mutex&lt;a class=&quot;zola-anchor&quot; href=&quot;#mutex&quot; aria-label=&quot;Anchor link for: mutex&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Basic GPIO BL702</title>
		<published>2022-02-23T00:27:00+00:00</published>
		<updated>2022-02-23T00:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/basic-gpio/" type="text/html"/>
		<id>https://ntn888.github.io/blog/basic-gpio/</id>
		<content type="html">&lt;p&gt;The BL702 chip has 15 GPIOs. Each pin can be selected as one of the following modes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ANALOG_MODE&lt;&#x2F;p&gt;
&lt;p&gt;Used as a function pin, input and output analog.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;INPUT_PULL_UP&lt;&#x2F;p&gt;
&lt;p&gt;Input with an internal pull-up resistor - use with devices that actively drive the signal low - e.g. button connected to ground.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;INPUT_PULL_DOWN&lt;&#x2F;p&gt;
&lt;p&gt;Input with an internal pull-down resistor - use with devices that actively drive the signal high - e.g. button connected to a power rail.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;INPUT_HIGH_IMPEDANCE&lt;&#x2F;p&gt;
&lt;p&gt;Input - must always be driven, either actively or by an external pullup resistor.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;OUTPUT_PUSH_PULL&lt;&#x2F;p&gt;
&lt;p&gt;Output actively driven high and actively driven low - must not be connected to other active outputs - e.g. LED output.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;OUTPUT_OPEN_DRAIN_NO_PULL&lt;&#x2F;p&gt;
&lt;p&gt;Output actively driven low but is high-impedance when set high - can be connected to other open-drain&#x2F;open-collector outputs. Needs an external pull-up resistor.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;OUTPUT_OPEN_DRAIN_PULL_UP&lt;&#x2F;p&gt;
&lt;p&gt;Output actively driven low and is pulled high with an internal resistor when set high - can be connected to other open-drain&#x2F;open-collector outputs.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;OUTPUT_OPEN_DRAIN_AF&lt;&#x2F;p&gt;
&lt;p&gt;Alternate Function Open Drain Mode.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;OUTPUT_PUSH_PULL_AF&lt;&#x2F;p&gt;
&lt;p&gt;Alternate Function Push Pull Mode.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;using-gpio&quot;&gt;Using GPIO&lt;a class=&quot;zola-anchor&quot; href=&quot;#using-gpio&quot; aria-label=&quot;Anchor link for: using-gpio&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;blinky_702.jpg&quot; alt=&quot;blinky&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The relevant functions are defined in &lt;code&gt;hosal_gpio.h&lt;&#x2F;code&gt;. Include this header before using any GPIO functions. An example application is as follows:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;hosal_gpio.h&amp;gt;
#include &amp;lt;FreeRTOS.h&amp;gt;
#include &amp;lt;task.h&amp;gt;

static hosal_gpio_dev_t gp1;

void main (void)
{
   &#x2F;&#x2F; setup
   gp1.port = 0; &#x2F;&#x2F; &amp;lt;== make sure led connected to pin D0!
   gp1.config = OUTPUT_OPEN_DRAIN_NO_PULL;
   hosal_gpio_init(&amp;amp;gp1);
   hosal_gpio_output_set(&amp;amp;gp1, 1);

   uint8_t value = 1;

   while (1) {
      hosal_gpio_output_set(&amp;amp;gp1, value );
      value = !value;
      vTaskDelay(500);
   }
}

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Before we could use the GPIO API, the GPIO struct must be defined and assigned as in line6. Here we&#x27;re naming it as &lt;code&gt;gp1&lt;&#x2F;code&gt; to reference later.&lt;&#x2F;p&gt;
&lt;p&gt;Then we must initialise and config a GPIO pin before we can use it. This tas is done in lines 11-13.&lt;&#x2F;p&gt;
&lt;p&gt;The possible value for the &#x27;config&#x27; setting was introduced in the start of this article; see above. Finally call the function &lt;code&gt;hosal_gpio_init&lt;&#x2F;code&gt;. Now we can use the API to control them.&lt;&#x2F;p&gt;
&lt;p&gt;As basic functionality of GPIOs, we set the output levels using the following commands:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;hosal_gpio_output_set(hosal_gpio_dev_t *gpio, uint8_t value)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Value 0 sets the pin in logical 0 &#x2F; inactive state. Value 1 sets the pin in logical 1 &#x2F; active state.&lt;&#x2F;p&gt;
&lt;p&gt;To read an input:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;hosal_gpio_input_get(hosal_gpio_dev_t *gpio, uint8_t *value)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I&#x27;ve looked for a GPIO &#x27;toggle&#x27; function to simplify this example, but unfortunately the API docs do not indicate any...&lt;&#x2F;p&gt;
&lt;h2 id=&quot;interrupt-mode&quot;&gt;Interrupt Mode&lt;a class=&quot;zola-anchor&quot; href=&quot;#interrupt-mode&quot; aria-label=&quot;Anchor link for: interrupt-mode&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;We look into interrupts using GPIO pins. Each GPIO can be set as an interrupt function. The main idea is to register a callback functionusing the Interrupt API, and define it&#x27;s contents. As follows:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;hosal_gpio.h&amp;gt;
#include &amp;lt;FreeRTOS.h&amp;gt;
#include &amp;lt;task.h&amp;gt;

static hosal_gpio_dev_t gp1;
static hosal_gpio_dev_t key1;
uint8_t value = 1;

void key1_irq(void *arg)
{
   hosal_gpio_output_set(&amp;amp;gp1, value );
   value = !value;
}

void main (void)
{
   &#x2F;&#x2F; setup
   key1.port = 8; &#x2F;&#x2F; the d8 button; note that it&amp;#39;s active LOW
   key1.config = INPUT_HIGH_IMPEDANCE; &#x2F;&#x2F; button includes external pullup
   hosal_gpio_init(&amp;amp;key1);
   hosal_gpio_irq_set(&amp;amp;key1, HOSAL_IRQ_TRIG_NEG_PULSE, key1_irq, NULL); &#x2F;&#x2F; &amp;#39;key1_irq&amp;#39; indicates the desired procedure at interrupt.

   gp1.port = 5;
   gp1.config = OUTPUT_OPEN_DRAIN_PULL_UP;
   hosal_gpio_init(&amp;amp;gp1);
   hosal_gpio_output_set(&amp;amp;gp1, 1);

   while (1) {
   }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Line 10 defines the callback function named &lt;code&gt;key1_irq&lt;&#x2F;code&gt;. Here we are simply toggling the D8 LED.&lt;&#x2F;p&gt;
&lt;p&gt;Initialising the Interrupt requires a string of statements beginning on line 19. Notably we initialise it as an input Pin as we covered in the previous section. Then finally use the &#x27;irq-set&#x27; function to configure it and indicate our callback function. Note that we had to define the device on line 7.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a very basic demonstration of push button with no debounce mechanism. The led may inadvertently toggle multiple times for a single push.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;alt-function-mode&quot;&gt;ALT Function Mode&lt;a class=&quot;zola-anchor&quot; href=&quot;#alt-function-mode&quot; aria-label=&quot;Anchor link for: alt-function-mode&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This is the secondary mode of each GPIO PIN where we tie it to the required peripheral. We&#x27;ll look at setting up the PINs for alternate function as we deal with the relevant peripheral.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Basic application structure</title>
		<published>2022-02-22T00:28:00+00:00</published>
		<updated>2022-02-22T00:28:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/basic-app-structure/" type="text/html"/>
		<id>https://ntn888.github.io/blog/basic-app-structure/</id>
		<content type="html">&lt;p&gt;The &lt;code&gt;bl_iot_sdk&lt;&#x2F;code&gt; is the development toolkit provided for the development of applications for the BL70X and BL60X controllers. It is quite a pleasant environment built upon the following major components:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;freeRTOS kernel&lt;&#x2F;li&gt;
&lt;li&gt;lwIP stack&lt;&#x2F;li&gt;
&lt;li&gt;&#x27;HOSAL&#x27; API (based off AliOS-Things HAL)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To acquire the SDK, use the following git command (preferably from the home folder):&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;git clone https:&#x2F;&#x2F;github.com&#x2F;bouffalolab&#x2F;bl_iot_sdk.git
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ProTip&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The sdk docs are available at &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;bouffalolab.github.io&#x2F;bl_iot_sdk&#x2F;index.html&quot;&gt;https:&#x2F;&#x2F;bouffalolab.github.io&#x2F;bl_iot_sdk&#x2F;index.html&lt;&#x2F;a&gt;. Use the firefox translate &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;addons.mozilla.org&#x2F;en-US&#x2F;firefox&#x2F;addon&#x2F;traduzir-paginas-web&#x2F;&quot;&gt;plugin&lt;&#x2F;a&gt; to view it in English. I found that the chrome version is a bit finnicky...&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;A basic bl-iot-sdk project structure is as follows:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;.
├── compile_commands.json
├── main
│   ├── bouffalo.mk
│   └── main.c
├── Makefile
└── proj_config.mk
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One file may already be familiar to you: &lt;code&gt;compile_commands.json&lt;&#x2F;code&gt;. If not see &lt;a href=&quot;https:&#x2F;&#x2F;ntn888.github.io&#x2F;blog&#x2F;dev-env&#x2F;&quot;&gt;this post&lt;&#x2F;a&gt; on how to setup a dev environment.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;main.c&lt;&#x2F;code&gt; is the main application C file. It contains the &lt;code&gt;main()&lt;&#x2F;code&gt; function. In our blinky example:
{% highlight c linenos %}
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;hosal_gpio.h&amp;gt;
#include &amp;lt;FreeRTOS.h&amp;gt;
#include &amp;lt;task.h&amp;gt;&lt;&#x2F;p&gt;
&lt;p&gt;static hosal_gpio_dev_t gp1;&lt;&#x2F;p&gt;
&lt;p&gt;void main (void)
{
&#x2F;&#x2F; setup
gp1.port = 0; &#x2F;&#x2F; &amp;lt;== make sure led connected to pin D0!
gp1.config = OUTPUT_OPEN_DRAIN_NO_PULL;
hosal_gpio_init(&amp;amp;gp1);
hosal_gpio_output_set(&amp;amp;gp1, 1);&lt;&#x2F;p&gt;
&lt;p&gt;uint8_t value = 1;&lt;&#x2F;p&gt;
&lt;p&gt;while (1) {
hosal_gpio_output_set(&amp;amp;gp1, value );
value = !value;
vTaskDelay(500);
}
}&lt;br &#x2F;&gt;
{% endhighlight %} 
The specifics of this file are not important to us right now. We will study the contents in the next post.&lt;&#x2F;p&gt;
&lt;p&gt;The other three makefiles are simply copied over from the official blinky sample, and are required to successfully build the project.&lt;&#x2F;p&gt;
&lt;p&gt;The main makefile &lt;code&gt;Makefile&lt;&#x2F;code&gt; in the project root, is slightly modified:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;#
# This is a project Makefile. It is assumed the directory this Makefile resides in is a
# project subdirectory.
#

PROJECT_NAME := main
BL60X_SDK_PATH=~&#x2F;bl_iot_sdk
CONFIG_CHIP_NAME=BL702
export BL60X_SDK_PATH CONFIG_CHIP_NAME
PROJECT_PATH := $(abspath .)
PROJECT_BOARD := evb
export PROJECT_PATH PROJECT_BOARD
#CONFIG_TOOLPREFIX :=

-include .&#x2F;proj_config.mk

ifeq ($(origin BL60X_SDK_PATH), undefined)
BL60X_SDK_PATH_GUESS ?= $(shell pwd)
BL60X_SDK_PATH ?= $(BL60X_SDK_PATH_GUESS)&#x2F;..&#x2F;..&#x2F;..
$(info ****** Please SET BL60X_SDK_PATH ******)
$(info ****** Trying SDK PATH [$(BL60X_SDK_PATH)])
endif

COMPONENTS_BLSYS   := bltime blfdt blmtd bloop loopset looprt
COMPONENTS_VFS     := romfs

SOC_DRV = $(shell echo $(CONFIG_CHIP_NAME) | tr A-Z a-z)


INCLUDE_COMPONENTS += $(SOC_DRV)_rf
INCLUDE_COMPONENTS += $(SOC_DRV)_freertos

INCLUDE_COMPONENTS += $(SOC_DRV) $(SOC_DRV)_std
INCLUDE_COMPONENTS += hosal mbedtls_lts lwip cli vfs yloop utils blog blog_testc newlibc
INCLUDE_COMPONENTS += $(COMPONENTS_NETWORK)
INCLUDE_COMPONENTS += $(COMPONENTS_BLSYS)
INCLUDE_COMPONENTS += $(COMPONENTS_VFS)
INCLUDE_COMPONENTS += $(PROJECT_NAME)

include $(BL60X_SDK_PATH)&#x2F;make_scripts_riscv&#x2F;project.mk
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We have hardcoded the chip name and the sdk path. This makes the make command simpler. Also note that we have changed the &lt;code&gt;PROJECT_NAME&lt;&#x2F;code&gt; to a generic name: main. This avoids the need to modify the variable to match each project.&lt;&#x2F;p&gt;
&lt;p&gt;A quick tutorial on Make is viewable &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.cs.colby.edu&#x2F;maxwell&#x2F;courses&#x2F;tutorials&#x2F;maketutor&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;NOTE: The makefile variable &lt;code&gt;BL60X_SDK_PATH&lt;&#x2F;code&gt; assumes that you have cloned the sdk into your home directory. If not please modify this variable to reflect your chosen path.&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;code&gt;proj_config.mk&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
####
CONFIG_SYS_VFS_ENABLE:=1
CONFIG_SYS_VFS_UART_ENABLE:=1
CONFIG_SYS_AOS_CLI_ENABLE:=1
CONFIG_SYS_AOS_LOOP_ENABLE:=1
CONFIG_SYS_BLOG_ENABLE:=1
CONFIG_SYS_DMA_ENABLE:=1
CONFIG_SYS_USER_VFS_ROMFS_ENABLE:=0
CONFIG_SYS_APP_TASK_STACK_SIZE:=4096
CONFIG_SYS_APP_TASK_PRIORITY:=15


CONFIG_SYS_COMMON_MAIN_ENABLE:=1
CONFIG_BL702_USE_ROM_DRIVER:=1
CONFIG_BUILD_ROM_CODE := 1
CONFIG_USE_XTAL32K:=1


LOG_ENABLED_COMPONENTS:= blog_testc hosal
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In &lt;code&gt;bouffalo.mk&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;#
# &amp;quot;main&amp;quot; pseudo-component makefile.
#
# (Uses default behaviour of compiling all source files in directory, adding &amp;#39;include&amp;#39; to include path.)

include $(BL60X_SDK_PATH)&#x2F;components&#x2F;network&#x2F;ble&#x2F;ble_common.mk

ifeq ($(CONFIG_ENABLE_PSM_RAM),1)
CPPFLAGS += -DCONF_USER_ENABLE_PSRAM
endif

ifeq ($(CONFIG_ENABLE_CAMERA),1)
CPPFLAGS += -DCONF_USER_ENABLE_CAMERA
endif

ifeq ($(CONFIG_ENABLE_BLSYNC),1)
CPPFLAGS += -DCONF_USER_ENABLE_BLSYNC
endif

ifeq ($(CONFIG_ENABLE_VFS_SPI),1)
CPPFLAGS += -DCONF_USER_ENABLE_VFS_SPI
endif

ifeq ($(CONFIG_ENABLE_VFS_ROMFS),1)
CPPFLAGS += -DCONF_USER_ENABLE_VFS_ROMFS
endif

CPPFLAGS += -DCONF_USER_BL702
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;As a convenience you may simply download the following &lt;a href=&quot;&#x2F;assets&#x2F;src.zip&quot;&gt;project skeleton&lt;&#x2F;a&gt;. Extract it to a &#x27;workspace&#x27; directory of choice; then whenever you want to initiate a new project, simply run:
&lt;code&gt;cp -a src&#x2F; my_proj&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Once the above files are in place all you have to do is run:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;make  -j
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once your project compiles successfully; you may run &lt;code&gt;make flash&lt;&#x2F;code&gt; to burn the firmware (ensuring you have the chip in bootloader mode).&lt;&#x2F;p&gt;
&lt;p&gt;If you ever run into problems run &lt;code&gt;make clean&lt;&#x2F;code&gt; as the first step.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Setup a development environment</title>
		<published>2022-02-22T00:27:00+00:00</published>
		<updated>2022-02-22T00:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/dev-env/" type="text/html"/>
		<id>https://ntn888.github.io/blog/dev-env/</id>
		<content type="html">&lt;p&gt;In this guide we will be setting a development environment for the bl602 development. Neovim is used here but you may choose to your liking. The important requirement is to setup code completion in your editor that&#x27;ll give ide like features. I find that this is actually useful in the initial phases to aid learning the new framework.&lt;&#x2F;p&gt;
&lt;p&gt;To do this, we are going to setup lsp on neovim. Lsp is native to neovim and only requires some config settings! But you dont have to do this yourself, there&#x27;s a &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nvim-lua&#x2F;kickstart.nvim&quot;&gt;github repository&lt;&#x2F;a&gt; with preset config file you can just copy. It also helps to configure sane defaults to other settings.&lt;&#x2F;p&gt;
&lt;p&gt;First install neovim. Then you need a language server, kickstarter uses clangd. Install this via your package manager. In ubuntu:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sudo apt install clangd
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally copy the kickstarter config. That&#x27;s it for installation. You may scout around kickstarter to personalise your neovim setup further.&lt;&#x2F;p&gt;
&lt;p&gt;You also need to install a small app called bear. Then in your project directory run:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;make clean
bear -- make
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This spits out a file called &lt;code&gt;compile_commands.json&lt;&#x2F;code&gt; in your project root. Now you will have super ide like features in Neovim that make programming much more pleasurable!&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;clangd would throw out an error: &lt;code&gt;unknown argument: &#x27;-fstrict-volatile-bitfields&#x27;&lt;&#x2F;code&gt;; to avoid this you can do so by instructing clangd to remove that flag from the compile command. To do this create a file &lt;code&gt;~&#x2F;.config&#x2F;clangd&#x2F;config.yaml&lt;&#x2F;code&gt; with the following contents:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;CompileFlags:
 Remove: [-fstrict-volatile-bitfields]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;blockquote&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>THE Dev board you&#x27;ve been waiting for: $1.8 XT-ZB1 Zigbee &amp; BLE devkit features BL702 RISC-V module</title>
		<published>2022-02-20T00:27:00+00:00</published>
		<updated>2022-02-20T00:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/xt-zb1-bl702/" type="text/html"/>
		<id>https://ntn888.github.io/blog/xt-zb1-bl702/</id>
		<content type="html">&lt;p&gt;I chanced upon the XT-ZB1 on ali-express on the lookout for the perfect IoT board... Coming at around 1.8usd this is more than perfect, this is a surprise! Made by the same company that makes the SOC for the DT-BL10, Bouffalo Labs, I think this is a new frontier in IoT development. I think we probably should thank the RISC-V movement for making such things possible.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;XT-ZB1.jpg&quot; alt=&quot;XT-ZB1 pinouts&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The MCU specs at: BL702C 32-bit RISC-V microcontroller @ 144 MHz with FPU, 132KB RAM, 192KB ROM with 8MB embedded flash. That&#x27;s decent enough for most of demanding applications.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s one caveat however, the zigbee supporting SDK variant is buried in the indicated site: www.bl602.fun, one has to download the tar copy of the SDK there.&lt;&#x2F;p&gt;
&lt;p&gt;Debugging is achieved using the advertised Sipeed RV-Debugger also available on Aliexpress. Alternatively one may use the OpenOCD&#x27;s ft232r technique discussed here in an earlier post.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>NuttX Supported Boards</title>
		<published>2022-02-18T00:27:00+00:00</published>
		<updated>2022-02-18T00:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/nuttx-supported-boards/" type="text/html"/>
		<id>https://ntn888.github.io/blog/nuttx-supported-boards/</id>
		<content type="html">&lt;p&gt;NuttX supports a variety of boards. One of the reasons I&#x27;ve settled on Nuttx is it&#x27;s front row support for cheap chinese boards. Namely the bluepill, esp32 and our favourite the RISC-V DT-BL10 from Doiting.&lt;&#x2F;p&gt;
&lt;p&gt;The official site page for &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;nuttx.apache.org&#x2F;docs&#x2F;latest&#x2F;platforms&#x2F;index.html&quot;&gt;supported boards&lt;&#x2F;a&gt; is a stub. It infact fooled me at first...&lt;&#x2F;p&gt;
&lt;p&gt;You can simply traverse the &lt;code&gt;boards&lt;&#x2F;code&gt; folder to get an uptodate view of the supported boards. For completeness sake I&#x27;ll list here the list of supported boards at the time of writing:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;$ tree boards -dL 3
boards
├── arm
│   ├── a1x
│   │   └── pcduino-a10
│   ├── am335x
│   │   └── beaglebone-black
│   ├── c5471
│   │   └── c5471evm
│   ├── cxd56xx
│   │   ├── common
│   │   ├── drivers
│   │   └── spresense
│   ├── dm320
│   │   └── ntosd-dm320
│   ├── efm32
│   │   ├── efm32-g8xx-stk
│   │   ├── efm32gg-stk3700
│   │   └── olimex-efm32g880f128-stk
│   ├── eoss3
│   │   └── quickfeather
│   ├── imx6
│   │   └── sabre-6quad
│   ├── imxrt
│   │   ├── imxrt1020-evk
│   │   ├── imxrt1050-evk
│   │   ├── imxrt1060-evk
│   │   ├── imxrt1064-evk
│   │   └── teensy-4.x
│   ├── kinetis
│   │   ├── freedom-k28f
│   │   ├── freedom-k64f
│   │   ├── freedom-k66f
│   │   ├── kwikstik-k40
│   │   ├── teensy-3.x
│   │   ├── twr-k60n512
│   │   └── twr-k64f120m
│   ├── kl
│   │   ├── freedom-kl25z
│   │   ├── freedom-kl26z
│   │   └── teensy-lc
│   ├── lc823450
│   │   └── lc823450-xgevk
│   ├── lpc17xx_40xx
│   │   ├── lincoln60
│   │   ├── lpc4088-devkit
│   │   ├── lpc4088-quickstart
│   │   ├── lpcxpresso-lpc1768
│   │   ├── lx_cpu
│   │   ├── mbed
│   │   ├── mcb1700
│   │   ├── olimex-lpc1766stk
│   │   ├── open1788
│   │   ├── pnev5180b
│   │   ├── u-blox-c027
│   │   └── zkit-arm-1769
│   ├── lpc214x
│   │   ├── mcu123-lpc214x
│   │   └── zp214xpa
│   ├── lpc2378
│   │   └── olimex-lpc2378
│   ├── lpc31xx
│   │   ├── ea3131
│   │   ├── ea3152
│   │   └── olimex-lpc-h3131
│   ├── lpc43xx
│   │   ├── bambino-200e
│   │   ├── lpc4330-xplorer
│   │   ├── lpc4337-ws
│   │   ├── lpc4357-evb
│   │   └── lpc4370-link2
│   ├── lpc54xx
│   │   └── lpcxpresso-lpc54628
│   ├── max326xx
│   │   └── max32660-evsys
│   ├── moxart
│   │   └── moxa
│   ├── nrf52
│   │   ├── nrf52832-dk
│   │   ├── nrf52832-mdk
│   │   ├── nrf52832-sparkfun
│   │   ├── nrf52840-dk
│   │   ├── nrf52840-dongle
│   │   └── nrf52-feather
│   ├── nuc1xx
│   │   └── nutiny-nuc120
│   ├── phy62xx
│   │   └── phy6222
│   ├── rp2040
│   │   ├── common
│   │   ├── pimoroni-tiny2040
│   │   └── raspberrypi-pico
│   ├── s32k1xx
│   │   ├── s32k118evb
│   │   ├── s32k144evb
│   │   ├── s32k146evb
│   │   ├── s32k148evb
│   │   └── ucans32k146
│   ├── sam34
│   │   ├── arduino-due
│   │   ├── flipnclick-sam3x
│   │   ├── sam3u-ek
│   │   ├── sam4cmp-db
│   │   ├── sam4e-ek
│   │   ├── sam4l-xplained
│   │   ├── sam4s-xplained
│   │   └── sam4s-xplained-pro
│   ├── sama5
│   │   ├── giant-board
│   │   ├── sama5d2-xult
│   │   ├── sama5d3x-ek
│   │   ├── sama5d3-xplained
│   │   └── sama5d4-ek
│   ├── samd2l2
│   │   ├── arduino-m0
│   │   ├── circuit-express
│   │   ├── samd20-xplained
│   │   ├── samd21-xplained
│   │   └── saml21-xplained
│   ├── samd5e5
│   │   ├── metro-m4
│   │   └── same54-xplained-pro
│   ├── samv7
│   │   ├── common
│   │   ├── same70-qmtech
│   │   ├── same70-xplained
│   │   └── samv71-xult
│   ├── stm32
│   │   ├── axoloti
│   │   ├── b-g431b-esc1
│   │   ├── b-g474e-dpow1
│   │   ├── clicker2-stm32
│   │   ├── cloudctrl
│   │   ├── common
│   │   ├── emw3162
│   │   ├── et-stm32-stamp
│   │   ├── fire-stm32v2
│   │   ├── hymini-stm32v
│   │   ├── maple
│   │   ├── mikroe-stm32f4
│   │   ├── nucleo-f103rb
│   │   ├── nucleo-f207zg
│   │   ├── nucleo-f302r8
│   │   ├── nucleo-f303re
│   │   ├── nucleo-f303ze
│   │   ├── nucleo-f334r8
│   │   ├── nucleo-f410rb
│   │   ├── nucleo-f412zg
│   │   ├── nucleo-f429zi
│   │   ├── nucleo-f446re
│   │   ├── nucleo-f4x1re
│   │   ├── nucleo-g431kb
│   │   ├── nucleo-g431rb
│   │   ├── nucleo-l152re
│   │   ├── olimexino-stm32
│   │   ├── olimex-stm32-e407
│   │   ├── olimex-stm32-h405
│   │   ├── olimex-stm32-h407
│   │   ├── olimex-stm32-p107
│   │   ├── olimex-stm32-p207
│   │   ├── olimex-stm32-p407
│   │   ├── omnibusf4
│   │   ├── photon
│   │   ├── shenzhou
│   │   ├── stm3210e-eval
│   │   ├── stm3220g-eval
│   │   ├── stm3240g-eval
│   │   ├── stm32butterfly2
│   │   ├── stm32f103-minimum
│   │   ├── stm32f334-disco
│   │   ├── stm32f3discovery
│   │   ├── stm32f411e-disco
│   │   ├── stm32f411-minimum
│   │   ├── stm32f429i-disco
│   │   ├── stm32f4discovery
│   │   ├── stm32ldiscovery
│   │   ├── stm32_tiny
│   │   ├── stm32vldiscovery
│   │   └── viewtool-stm32f107
│   ├── stm32f0l0g0
│   │   ├── b-l072z-lrwan1
│   │   ├── nucleo-f072rb
│   │   ├── nucleo-f091rc
│   │   ├── nucleo-g070rb
│   │   ├── nucleo-g071rb
│   │   ├── nucleo-l073rz
│   │   ├── stm32f051-discovery
│   │   └── stm32f072-discovery
│   ├── stm32f7
│   │   ├── nucleo-144
│   │   ├── stm32f746g-disco
│   │   ├── stm32f746-ws
│   │   └── stm32f769i-disco
│   ├── stm32h7
│   │   ├── nucleo-h743zi
│   │   ├── nucleo-h743zi2
│   │   └── stm32h747i-disco
│   ├── stm32l4
│   │   ├── b-l475e-iot01a
│   │   ├── nucleo-l432kc
│   │   ├── nucleo-l452re
│   │   ├── nucleo-l476rg
│   │   ├── nucleo-l496zg
│   │   ├── stm32l476-mdk
│   │   ├── stm32l476vg-disco
│   │   └── stm32l4r9ai-disco
│   ├── stm32l5
│   │   ├── drivers
│   │   ├── nucleo-l552ze
│   │   └── stm32l562e-dk
│   ├── stm32u5
│   │   ├── b-u585i-iot02a
│   │   └── drivers
│   ├── str71x
│   │   └── olimex-strp711
│   ├── tiva
│   │   ├── dk-tm4c129x
│   │   ├── eagle100
│   │   ├── ekk-lm3s9b96
│   │   ├── launchxl-cc1310
│   │   ├── launchxl-cc1312r1
│   │   ├── lm3s6432-s2e
│   │   ├── lm3s6965-ek
│   │   ├── lm3s8962-ek
│   │   ├── lm4f120-launchpad
│   │   ├── tm4c123g-launchpad
│   │   └── tm4c1294-launchpad
│   ├── tms570
│   │   ├── launchxl-tms57004
│   │   └── tms570ls31x-usb-kit
│   └── xmc4
│       ├── xmc4500-relax
│       └── xmc4700-relax
├── avr
│   ├── at32uc3
│   │   └── avr32dev1
│   ├── at90usb
│   │   ├── micropendous3
│   │   └── teensy-2.0
│   └── atmega
│       ├── amber
│       ├── arduino-mega2560
│       └── moteino-mega
├── dummy
├── hc
│   └── m9s12
│       ├── demo9s12ne64
│       └── ne64badge
├── mips
│   ├── pic32mx
│   │   ├── mirtoo
│   │   ├── pic32mx7mmb
│   │   ├── pic32mx-starterkit
│   │   ├── sure-pic32mx
│   │   └── ubw32
│   └── pic32mz
│       ├── chipkit-wifire
│       ├── flipnclick-pic32mz
│       └── pic32mz-starterkit
├── misoc
│   └── lm32
│       └── misoc
├── or1k
│   └── mor1kx
│       └── or1k
├── renesas
│   ├── m16c
│   │   └── skp16c26
│   ├── rx65n
│   │   ├── rx65n
│   │   ├── rx65n-grrose
│   │   ├── rx65n-rsk1mb
│   │   └── rx65n-rsk2mb
│   └── sh1
│       └── us7032evb1
├── risc-v
│   ├── bl602
│   │   └── bl602evb
│   ├── c906
│   │   └── smartl-c906
│   ├── esp32c3
│   │   └── esp32c3-devkit
│   ├── fe310
│   │   └── hifive1-revb
│   ├── k210
│   │   └── maix-bit
│   ├── litex
│   │   └── arty_a7
│   ├── mpfs
│   │   ├── common
│   │   ├── icicle
│   │   └── m100pfsevp
│   ├── qemu-rv
│   │   └── rv-virt
│   └── rv32m1
│       └── rv32m1-vega
├── sim
│   └── sim
│       └── sim
├── sparc
│   ├── bm3803
│   │   └── xx3803
│   └── bm3823
│       └── xx3823
├── x86
│   └── qemu
│       └── qemu-i486
├── x86_64
│   └── intel64
│       └── qemu-intel64
├── xtensa
│   ├── esp32
│   │   ├── common
│   │   ├── esp32-devkitc
│   │   ├── esp32-ethernet-kit
│   │   ├── esp32-wrover-kit
│   │   └── ttgo_lora_esp32
│   ├── esp32s2
│   │   ├── common
│   │   └── esp32s2-saola-1
│   └── esp32s3
│       ├── common
│       └── esp32s3-devkit
├── z16
│   └── z16f
│       └── z16f2800100zcog
└── z80
    ├── ez80
    │   ├── ez80f910200kitg
    │   ├── ez80f910200zco
    │   ├── makerlisp
    │   └── z20x
    ├── z180
    │   └── p112
    ├── z8
    │   ├── z8encore000zco
    │   └── z8f64200100kit
    └── z80
        └── z80sim

337 directories
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Welcome</title>
		<published>2022-02-16T00:27:00+00:00</published>
		<updated>2022-02-16T00:27:00+00:00</updated>
		<link href="https://ntn888.github.io/blog/welcome/" type="text/html"/>
		<id>https://ntn888.github.io/blog/welcome/</id>
		<content type="html">&lt;p&gt;Hello and Welcome!&lt;&#x2F;p&gt;
&lt;p&gt;In this blog we are interested in all things embedded! Primarily the topics will revolve around the &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;RT-Thread&#x2F;rt-thread&quot;&gt;RT-Thread&lt;&#x2F;a&gt; RTOS and cheap parts from outlets such as AliExpress.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>A DIY jtag debugger</title>
		<published>2022-02-16T00:26:00+00:00</published>
		<updated>2022-02-16T00:26:00+00:00</updated>
        <summary>&lt;p&gt;One of openocd&#x27;s hidden perks is it could use a typical ftdi232rl USB to Serial converter into a makeshift JTAG programmer. Not only is this cheap, it&#x27;s quick convenience than to wait and order a new programmer.&lt;&#x2F;p&gt;
&lt;p&gt;In this article we see how to put this to use...&lt;&#x2F;p&gt;
</summary>
		<link href="https://ntn888.github.io/blog/diy-jtag-debugger/" type="text/html"/>
		<id>https://ntn888.github.io/blog/diy-jtag-debugger/</id>
		<content type="html">&lt;p&gt;One of openocd&#x27;s hidden perks is it could use a typical ftdi232rl USB to Serial converter into a makeshift JTAG programmer. Not only is this cheap, it&#x27;s quick convenience than to wait and order a new programmer.&lt;&#x2F;p&gt;
&lt;p&gt;In this article we see how to put this to use...&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;First we have to install openocd if you haven&#x27;t already. This could be done using your systems package manager. Or if you&#x27;re installing manually be sure to enable the interface when building openocd in the following step:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;.&#x2F;configure --enable-ft232r
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hookup your board to the ftdi board. Follow the following pinouts:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;JTAG Pin&lt;&#x2F;th&gt;&lt;th&gt;ftdi Pin&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;TDI&lt;&#x2F;td&gt;&lt;td&gt;RXD&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;TCK&lt;&#x2F;td&gt;&lt;td&gt;TXD&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;TDO&lt;&#x2F;td&gt;&lt;td&gt;RTS&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;TMS&lt;&#x2F;td&gt;&lt;td&gt;CTS&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;TRST&lt;&#x2F;td&gt;&lt;td&gt;DTR&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;SRST&lt;&#x2F;td&gt;&lt;td&gt;DCD&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Here&#x27;s a pic with the debugger connected to a DT-BL10 (RISC-V) board:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;debugger.jpg&quot; alt=&quot;ftdi connection&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Then you need to fireup openocd with a config. To do this, create a file called &lt;code&gt;my_ft232r.cfg&lt;&#x2F;code&gt; somewhere in you home directory with the following contents:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;adapter driver ft232r
adapter speed 3000
ft232r_restore_serial 0x15
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now fireup openocd:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;openocd -f path&#x2F;to&#x2F;my_ft232r.cfg&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hopefully your target is detected!&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>